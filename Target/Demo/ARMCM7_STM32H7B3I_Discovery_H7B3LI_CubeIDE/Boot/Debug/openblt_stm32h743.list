
openblt_stm32h743.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048c4  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .user_data    00000000  08180000  08180000  000200c8  2**0
                  CONTENTS
  3 .rodata       00000c7c  08004b70  08004b70  00014b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080057ec  080057ec  000157ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080057f0  080057f0  000157f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000c8  24000000  080057f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004cc8  240000c8  080058bc  000200c8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24004d90  080058bc  00024d90  2**0
                  ALLOC
  9 .DATA_RAM_NOCACHE 00000000  24080000  24080000  000200c8  2**0
                  CONTENTS
 10 .DATA_DTCMRAM2 00000000  20010000  20010000  000200c8  2**0
                  CONTENTS
 11 .ARM.attributes 0000002e  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f1fd  00000000  00000000  000200f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005e91  00000000  00000000  0003f2f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d0  00000000  00000000  00045188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002030  00000000  00000000  00046358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00012db0  00000000  00000000  00048388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00007203  00000000  00000000  0005b138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0006233b  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002ca0  00000000  00000000  0006238c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    0000d270  00000000  00000000  0006502c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	240000c8 	.word	0x240000c8
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08004b58 	.word	0x08004b58

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	240000cc 	.word	0x240000cc
 80002e8:	08004b58 	.word	0x08004b58

080002ec <AppInit>:
**
****************************************************************************************/
void AppInit(void)
{
  /* initialize the bootloader */
  BootInit();
 80002ec:	f004 b836 	b.w	800435c <BootInit>

080002f0 <AppTask>:
**
****************************************************************************************/
void AppTask(void)
{
  /* Run the bootloader task. */
  BootTask();
 80002f0:	f004 b843 	b.w	800437a <BootTask>

080002f4 <CpuUserProgramStartHook>:
** \return    BLT_TRUE if it is okay to start the user program, BLT_FALSE to keep
**            keep the bootloader active.
**
****************************************************************************************/
blt_bool CpuUserProgramStartHook(void)
{
 80002f4:	b508      	push	{r3, lr}
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 80002f6:	4b05      	ldr	r3, [pc, #20]	; (800030c <CpuUserProgramStartHook+0x18>)
 80002f8:	691b      	ldr	r3, [r3, #16]
 80002fa:	049b      	lsls	r3, r3, #18
 80002fc:	d403      	bmi.n	8000306 <CpuUserProgramStartHook+0x12>
     * bootloader active instead.
     */
    return BLT_FALSE;
  }
  /* clean up the LED driver */
  LedBlinkExit();
 80002fe:	f000 f839 	bl	8000374 <LedBlinkExit>
  /*  okay to start the user program.*/
  return BLT_TRUE;
 8000302:	2001      	movs	r0, #1
} /*** end of CpuUserProgramStartHook ***/
 8000304:	bd08      	pop	{r3, pc}
    return BLT_FALSE;
 8000306:	2000      	movs	r0, #0
 8000308:	e7fc      	b.n	8000304 <CpuUserProgramStartHook+0x10>
 800030a:	bf00      	nop
 800030c:	58020800 	.word	0x58020800

08000310 <CopInitHook>:
void CopInitHook(void)
{
  /* this function is called upon initialization. might as well use it to initialize
   * the LED driver. It is kind of a visual watchdog anyways.
   */
  LedBlinkInit(100);
 8000310:	2064      	movs	r0, #100	; 0x64
 8000312:	f000 b805 	b.w	8000320 <LedBlinkInit>

08000316 <CopServiceHook>:
  /* run the LED blink task. this is a better place to do it than in the main() program
   * loop. certain operations such as flash erase can take a long time, which would cause
   * a blink interval to be skipped. this function is also called during such operations,
   * so no blink intervals will be skipped when calling the LED blink task here.
   */
  LedBlinkTask();
 8000316:	f000 b809 	b.w	800032c <LedBlinkTask>

0800031a <UsbConnectHook>:
**
****************************************************************************************/
void UsbConnectHook(blt_bool connect)
{
  /* Note that this is handled automatically by the OTG peripheral. */
} /*** end of UsbConnect ***/
 800031a:	4770      	bx	lr

0800031c <UsbEnterLowPowerModeHook>:
**
****************************************************************************************/
void UsbEnterLowPowerModeHook(void)
{
  /* support to enter a low power mode can be implemented here */
} /*** end of UsbEnterLowPowerMode ***/
 800031c:	4770      	bx	lr

0800031e <UsbLeaveLowPowerModeHook>:
 800031e:	4770      	bx	lr

08000320 <LedBlinkInit>:
**
****************************************************************************************/
void LedBlinkInit(blt_int16u interval_ms)
{
  /* store the interval time between LED toggles */
  ledBlinkIntervalMs = interval_ms;
 8000320:	4b01      	ldr	r3, [pc, #4]	; (8000328 <LedBlinkInit+0x8>)
 8000322:	8018      	strh	r0, [r3, #0]
} /*** end of LedBlinkInit ***/
 8000324:	4770      	bx	lr
 8000326:	bf00      	nop
 8000328:	240000e4 	.word	0x240000e4

0800032c <LedBlinkTask>:
** \brief     Task function for blinking the LED as a fixed timer interval.
** \return    none.
**
****************************************************************************************/
void LedBlinkTask(void)
{
 800032c:	b510      	push	{r4, lr}
  static blt_bool ledOn = BLT_FALSE;
  static blt_int32u nextBlinkEvent = 0;

  /* check for blink event */
  if (TimerGet() >= nextBlinkEvent)
 800032e:	4c0d      	ldr	r4, [pc, #52]	; (8000364 <LedBlinkTask+0x38>)
 8000330:	f003 fa54 	bl	80037dc <TimerGet>
 8000334:	6823      	ldr	r3, [r4, #0]
 8000336:	4298      	cmp	r0, r3
 8000338:	d30e      	bcc.n	8000358 <LedBlinkTask+0x2c>
  {
    /* toggle the LED state */
    if (ledOn == BLT_FALSE)
 800033a:	4b0b      	ldr	r3, [pc, #44]	; (8000368 <LedBlinkTask+0x3c>)
 800033c:	4a0b      	ldr	r2, [pc, #44]	; (800036c <LedBlinkTask+0x40>)
 800033e:	7819      	ldrb	r1, [r3, #0]
 8000340:	b959      	cbnz	r1, 800035a <LedBlinkTask+0x2e>
    {
      ledOn = BLT_TRUE;
 8000342:	2101      	movs	r1, #1
 8000344:	7019      	strb	r1, [r3, #0]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000346:	f44f 6300 	mov.w	r3, #2048	; 0x800
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 800034a:	6193      	str	r3, [r2, #24]
    {
      ledOn = BLT_FALSE;
      LL_GPIO_ResetOutputPin(GPIOG, LL_GPIO_PIN_11);
    }
    /* schedule the next blink event */
    nextBlinkEvent = TimerGet() + ledBlinkIntervalMs;
 800034c:	f003 fa46 	bl	80037dc <TimerGet>
 8000350:	4b07      	ldr	r3, [pc, #28]	; (8000370 <LedBlinkTask+0x44>)
 8000352:	881b      	ldrh	r3, [r3, #0]
 8000354:	4418      	add	r0, r3
 8000356:	6020      	str	r0, [r4, #0]
  }
} /*** end of LedBlinkTask ***/
 8000358:	bd10      	pop	{r4, pc}
      ledOn = BLT_FALSE;
 800035a:	2100      	movs	r1, #0
 800035c:	7019      	strb	r1, [r3, #0]
 800035e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000362:	e7f2      	b.n	800034a <LedBlinkTask+0x1e>
 8000364:	240000e8 	.word	0x240000e8
 8000368:	240000e6 	.word	0x240000e6
 800036c:	58021800 	.word	0x58021800
 8000370:	240000e4 	.word	0x240000e4

08000374 <LedBlinkExit>:
 8000374:	4b02      	ldr	r3, [pc, #8]	; (8000380 <LedBlinkExit+0xc>)
 8000376:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800037a:	619a      	str	r2, [r3, #24]
****************************************************************************************/
void LedBlinkExit(void)
{
  /* turn the LED off */
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_7);
} /*** end of LedBlinkExit ***/
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop
 8000380:	58020400 	.word	0x58020400

08000384 <LL_AHB4_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_AHB4_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB4ENR, Periphs);
 8000384:	4b06      	ldr	r3, [pc, #24]	; (80003a0 <LL_AHB4_GRP1_EnableClock+0x1c>)
{
 8000386:	b082      	sub	sp, #8
  SET_BIT(RCC->AHB4ENR, Periphs);
 8000388:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800038c:	4302      	orrs	r2, r0
 800038e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 8000392:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000396:	4018      	ands	r0, r3
 8000398:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 800039a:	9b01      	ldr	r3, [sp, #4]
}
 800039c:	b002      	add	sp, #8
 800039e:	4770      	bx	lr
 80003a0:	58024400 	.word	0x58024400

080003a4 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << ((POSITION_VAL(Line >> 16U)) & 31U));
 80003a4:	f001 0303 	and.w	r3, r1, #3
 80003a8:	0c0a      	lsrs	r2, r1, #16
 80003aa:	009b      	lsls	r3, r3, #2
 80003ac:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 80003b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
{
 80003b4:	b510      	push	{r4, lr}
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << ((POSITION_VAL(Line >> 16U)) & 31U));
 80003b6:	689c      	ldr	r4, [r3, #8]
 80003b8:	ea24 4111 	bic.w	r1, r4, r1, lsr #16
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003bc:	fa92 f2a2 	rbit	r2, r2
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 80003c0:	fab2 f282 	clz	r2, r2
 80003c4:	f002 021f 	and.w	r2, r2, #31
 80003c8:	4090      	lsls	r0, r2
 80003ca:	4308      	orrs	r0, r1
 80003cc:	6098      	str	r0, [r3, #8]
}
 80003ce:	bd10      	pop	{r4, pc}

080003d0 <SystemClock_Config>:
  */
void SystemClock_Config(void)
{

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80003d0:	4b52      	ldr	r3, [pc, #328]	; (800051c <SystemClock_Config+0x14c>)
 80003d2:	f04f 32ff 	mov.w	r2, #4294967295
{
 80003d6:	b510      	push	{r4, lr}
  RCC->CKGAENR = 0xFFFFFFFF;
 80003d8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  *         @arg @ref LL_FLASH_LATENCY_7
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80003dc:	4a50      	ldr	r2, [pc, #320]	; (8000520 <SystemClock_Config+0x150>)
 80003de:	6813      	ldr	r3, [r2, #0]
 80003e0:	f023 030f 	bic.w	r3, r3, #15
 80003e4:	f043 0307 	orr.w	r3, r3, #7
 80003e8:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_FLASH_LATENCY_6
  *         @arg @ref LL_FLASH_LATENCY_7
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80003ea:	6813      	ldr	r3, [r2, #0]
 80003ec:	f003 030f 	and.w	r3, r3, #15

  LL_FLASH_SetLatency(LL_FLASH_LATENCY_7);
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_7)
 80003f0:	2b07      	cmp	r3, #7
 80003f2:	d1fa      	bne.n	80003ea <SystemClock_Config+0x1a>
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ConfigSupply(uint32_t SupplySource)
{
  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, (PWR_CR3_SMPSLEVEL | PWR_CR3_SMPSEXTHP | PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS), SupplySource);
 80003f4:	4a4b      	ldr	r2, [pc, #300]	; (8000524 <SystemClock_Config+0x154>)
 80003f6:	68d3      	ldr	r3, [r2, #12]
 80003f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80003fc:	f043 0304 	orr.w	r3, r3, #4
 8000400:	60d3      	str	r3, [r2, #12]
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
#if defined (PWR_CPUCR_PDDS_D2)
  MODIFY_REG(PWR->D3CR, PWR_D3CR_VOS, VoltageScaling);
#else
  MODIFY_REG(PWR->SRDCR, PWR_SRDCR_VOS, VoltageScaling);
 8000402:	6993      	ldr	r3, [r2, #24]
 8000404:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000408:	6193      	str	r3, [r2, #24]
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800040a:	4b44      	ldr	r3, [pc, #272]	; (800051c <SystemClock_Config+0x14c>)
 800040c:	681a      	ldr	r2, [r3, #0]
 800040e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000412:	601a      	str	r2, [r3, #0]
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY))?1UL:0UL);
 8000414:	681a      	ldr	r2, [r3, #0]
 8000416:	0390      	lsls	r0, r2, #14
 8000418:	d5fc      	bpl.n	8000414 <SystemClock_Config+0x44>
  * @rmtoll CR           HSI48ON         LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSI48ON);
 800041a:	681a      	ldr	r2, [r3, #0]
 800041c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000420:	601a      	str	r2, [r3, #0]
  * @rmtoll CR           HSI48RDY        LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == (RCC_CR_HSI48RDY))?1UL:0UL);
 8000422:	4b3e      	ldr	r3, [pc, #248]	; (800051c <SystemClock_Config+0x14c>)
 8000424:	681a      	ldr	r2, [r3, #0]
 8000426:	0491      	lsls	r1, r2, #18
 8000428:	d5fc      	bpl.n	8000424 <SystemClock_Config+0x54>
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_SetSource(uint32_t PLLSource)
{
  MODIFY_REG(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC, PLLSource);
 800042a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800042c:	f022 0203 	bic.w	r2, r2, #3
 8000430:	f042 0202 	orr.w	r2, r2, #2
 8000434:	629a      	str	r2, [r3, #40]	; 0x28
  * @rmtoll PLLCFGR           DIVP1EN         LL_RCC_PLL1P_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL1P_Enable(void)
{
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP1EN);
 8000436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000438:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800043c:	62da      	str	r2, [r3, #44]	; 0x2c
  *         @arg @ref LL_RCC_PLLINPUTRANGE_8_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL1_SetVCOInputRange(uint32_t InputRange)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLL1RGE, InputRange << RCC_PLLCFGR_PLL1RGE_Pos);
 800043e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000440:	f022 020c 	bic.w	r2, r2, #12
 8000444:	f042 0204 	orr.w	r2, r2, #4
 8000448:	62da      	str	r2, [r3, #44]	; 0x2c
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLL1VCOSEL, VCORange << RCC_PLLCFGR_PLL1VCOSEL_Pos);
 800044a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800044c:	f022 0202 	bic.w	r2, r2, #2
 8000450:	62da      	str	r2, [r3, #44]	; 0x2c
  * @rmtoll PLLCKSELR       DIVM1          LL_RCC_PLL1_SetM
  * @param  M parameter can be a value between 0 and 63
  */
__STATIC_INLINE void LL_RCC_PLL1_SetM(uint32_t M)
{
  MODIFY_REG(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM1, M << RCC_PLLCKSELR_DIVM1_Pos);
 8000452:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000454:	f422 727c 	bic.w	r2, r2, #1008	; 0x3f0
 8000458:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800045c:	629a      	str	r2, [r3, #40]	; 0x28
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_N1, (N-1UL) << RCC_PLL1DIVR_N1_Pos);
 800045e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000460:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8000464:	f022 0201 	bic.w	r2, r2, #1
 8000468:	f442 728b 	orr.w	r2, r2, #278	; 0x116
 800046c:	f042 0201 	orr.w	r2, r2, #1
 8000470:	631a      	str	r2, [r3, #48]	; 0x30
  *
  * (*) : For stm32h72xxx and stm32h73xxx family lines.
  */
__STATIC_INLINE void LL_RCC_PLL1_SetP(uint32_t P)
{
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_P1, (P-1UL) << RCC_PLL1DIVR_P1_Pos);
 8000472:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000474:	f422 427e 	bic.w	r2, r2, #65024	; 0xfe00
 8000478:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800047c:	631a      	str	r2, [r3, #48]	; 0x30
  * @rmtoll PLL1DIVR        Q1          LL_RCC_PLL1_SetQ
  * @param  Q parameter can be a value between 1 and 128
  */
__STATIC_INLINE void LL_RCC_PLL1_SetQ(uint32_t Q)
{
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_Q1, (Q-1UL) << RCC_PLL1DIVR_Q1_Pos);
 800047e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000480:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000484:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000488:	631a      	str	r2, [r3, #48]	; 0x30
  * @rmtoll PLL1DIVR        R1          LL_RCC_PLL1_SetR
  * @param  R parameter can be a value between 1 and 128
  */
__STATIC_INLINE void LL_RCC_PLL1_SetR(uint32_t R)
{
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_R1, (R-1UL) << RCC_PLL1DIVR_R1_Pos);
 800048a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800048c:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
 8000490:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8000494:	631a      	str	r2, [r3, #48]	; 0x30
  SET_BIT(RCC->CR, RCC_CR_PLL1ON);
 8000496:	681a      	ldr	r2, [r3, #0]
 8000498:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800049c:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == (RCC_CR_PLL1RDY))?1UL:0UL);
 800049e:	4b1f      	ldr	r3, [pc, #124]	; (800051c <SystemClock_Config+0x14c>)
 80004a0:	681a      	ldr	r2, [r3, #0]
 80004a2:	0192      	lsls	r2, r2, #6
 80004a4:	d5fc      	bpl.n	80004a0 <SystemClock_Config+0xd0>
  MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, Prescaler);
 80004a6:	699a      	ldr	r2, [r3, #24]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80004a8:	4c1c      	ldr	r4, [pc, #112]	; (800051c <SystemClock_Config+0x14c>)
  MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, Prescaler);
 80004aa:	f022 020f 	bic.w	r2, r2, #15
 80004ae:	f042 0208 	orr.w	r2, r2, #8
 80004b2:	619a      	str	r2, [r3, #24]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80004b4:	691a      	ldr	r2, [r3, #16]
 80004b6:	f022 0207 	bic.w	r2, r2, #7
 80004ba:	f042 0203 	orr.w	r2, r2, #3
 80004be:	611a      	str	r2, [r3, #16]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80004c0:	6923      	ldr	r3, [r4, #16]
 80004c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
   LL_RCC_SetAHBPrescaler(LL_RCC_AHB_DIV_2);

  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL1);

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL1)
 80004c6:	2b18      	cmp	r3, #24
 80004c8:	d1fa      	bne.n	80004c0 <SystemClock_Config+0xf0>
  MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, Prescaler);
 80004ca:	69a3      	ldr	r3, [r4, #24]
  LL_RCC_SetAHBPrescaler(LL_RCC_AHB_DIV_1);
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
  LL_RCC_SetAPB3Prescaler(LL_RCC_APB3_DIV_2);
  LL_RCC_SetAPB4Prescaler(LL_RCC_APB4_DIV_2);
  LL_SetSystemCoreClock(280000000);
 80004cc:	4816      	ldr	r0, [pc, #88]	; (8000528 <SystemClock_Config+0x158>)
 80004ce:	f023 030f 	bic.w	r3, r3, #15
 80004d2:	61a3      	str	r3, [r4, #24]
  MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, Prescaler);
 80004d4:	69e3      	ldr	r3, [r4, #28]
 80004d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80004da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004de:	61e3      	str	r3, [r4, #28]
  MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, Prescaler);
 80004e0:	69e3      	ldr	r3, [r4, #28]
 80004e2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80004e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004ea:	61e3      	str	r3, [r4, #28]
  MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, Prescaler);
 80004ec:	69a3      	ldr	r3, [r4, #24]
 80004ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80004f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004f6:	61a3      	str	r3, [r4, #24]
  MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, Prescaler);
 80004f8:	6a23      	ldr	r3, [r4, #32]
 80004fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80004fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000502:	6223      	str	r3, [r4, #32]
 8000504:	f002 ff6a 	bl	80033dc <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000508:	2000      	movs	r0, #0
 800050a:	f000 fc61 	bl	8000dd0 <HAL_InitTick>
  MODIFY_REG(RCC->CFGR,  (MCOxSource << 16U) | (MCOxPrescaler << 16U), (MCOxSource & 0xFFFF0000U) | (MCOxPrescaler & 0xFFFF0000U));
 800050e:	6923      	ldr	r3, [r4, #16]
 8000510:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8000514:	f443 0304 	orr.w	r3, r3, #8650752	; 0x840000
 8000518:	6123      	str	r3, [r4, #16]
  {
    Error_Handler();
  }
  LL_RCC_ConfigMCO(LL_RCC_MCO1SOURCE_HSE, LL_RCC_MCO1_DIV_1);
}
 800051a:	bd10      	pop	{r4, pc}
 800051c:	58024400 	.word	0x58024400
 8000520:	52002000 	.word	0x52002000
 8000524:	58024800 	.word	0x58024800
 8000528:	10b07600 	.word	0x10b07600

0800052c <main>:
{
 800052c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000530:	2410      	movs	r4, #16
{
 8000532:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 8000534:	f000 fc72 	bl	8000e1c <HAL_Init>
 8000538:	4ed4      	ldr	r6, [pc, #848]	; (800088c <main+0x360>)
  SystemClock_Config();
 800053a:	f7ff ff49 	bl	80003d0 <SystemClock_Config>
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800053e:	4622      	mov	r2, r4
 8000540:	2100      	movs	r1, #0
 8000542:	4668      	mov	r0, sp
 8000544:	f004 fb00 	bl	8004b48 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000548:	2218      	movs	r2, #24
 800054a:	2100      	movs	r1, #0
 800054c:	eb0d 0004 	add.w	r0, sp, r4
 8000550:	f004 fafa 	bl	8004b48 <memset>

  /* GPIO Ports Clock Enable */
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOI);
 8000554:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000558:	f7ff ff14 	bl	8000384 <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOG);
 800055c:	2040      	movs	r0, #64	; 0x40
 800055e:	f7ff ff11 	bl	8000384 <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOK);
 8000562:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000566:	f7ff ff0d 	bl	8000384 <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOD);
 800056a:	2008      	movs	r0, #8
 800056c:	f7ff ff0a 	bl	8000384 <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOC);
 8000570:	2004      	movs	r0, #4
 8000572:	f7ff ff07 	bl	8000384 <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOE);
 8000576:	4620      	mov	r0, r4
 8000578:	f7ff ff04 	bl	8000384 <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOB);
 800057c:	2002      	movs	r0, #2
 800057e:	f7ff ff01 	bl	8000384 <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOJ);
 8000582:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000586:	f7ff fefd 	bl	8000384 <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOA);
 800058a:	2001      	movs	r0, #1
 800058c:	f7ff fefa 	bl	8000384 <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOF);
 8000590:	2020      	movs	r0, #32
 8000592:	f7ff fef7 	bl	8000384 <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOH);
 8000596:	2080      	movs	r0, #128	; 0x80
 8000598:	f7ff fef4 	bl	8000384 <LL_AHB4_GRP1_EnableClock>
 800059c:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 80005a0:	f8df b318 	ldr.w	fp, [pc, #792]	; 80008bc <main+0x390>
 80005a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80005a8:	61b3      	str	r3, [r6, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80005aa:	2106      	movs	r1, #6
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 80005ac:	4bb8      	ldr	r3, [pc, #736]	; (8000890 <main+0x364>)
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_4;
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
  EXTI_InitStruct.Line_64_95 = LL_EXTI_LINE_NONE;
  EXTI_InitStruct.LineCommand = ENABLE;
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80005ae:	f04f 0801 	mov.w	r8, #1
  EXTI_InitStruct.LineCommand = ENABLE;
 80005b2:	f240 1501 	movw	r5, #257	; 0x101
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80005b6:	f8df 9308 	ldr.w	r9, [pc, #776]	; 80008c0 <main+0x394>
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 80005ba:	f8cb 3018 	str.w	r3, [fp, #24]

  /**/
  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A15_Pin|A14_Pin
                          |A11_Pin|A10_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80005be:	2703      	movs	r7, #3
 80005c0:	4bb4      	ldr	r3, [pc, #720]	; (8000894 <main+0x368>)
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80005c2:	f8df a300 	ldr.w	sl, [pc, #768]	; 80008c4 <main+0x398>
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 80005c6:	619a      	str	r2, [r3, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80005c8:	2208      	movs	r2, #8
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTI, LL_SYSCFG_EXTI_LINE4);
 80005ca:	4610      	mov	r0, r2
 80005cc:	f8cb 2018 	str.w	r2, [fp, #24]
 80005d0:	6199      	str	r1, [r3, #24]
 80005d2:	49b1      	ldr	r1, [pc, #708]	; (8000898 <main+0x36c>)
 80005d4:	f7ff fee6 	bl	80003a4 <LL_SYSCFG_SetEXTISource>
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTI, LL_SYSCFG_EXTI_LINE5);
 80005d8:	2208      	movs	r2, #8
 80005da:	49b0      	ldr	r1, [pc, #704]	; (800089c <main+0x370>)
 80005dc:	4610      	mov	r0, r2
 80005de:	f7ff fee1 	bl	80003a4 <LL_SYSCFG_SetEXTISource>
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTI, LL_SYSCFG_EXTI_LINE8);
 80005e2:	2208      	movs	r2, #8
 80005e4:	49ae      	ldr	r1, [pc, #696]	; (80008a0 <main+0x374>)
 80005e6:	4610      	mov	r0, r2
 80005e8:	f7ff fedc 	bl	80003a4 <LL_SYSCFG_SetEXTISource>
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 80005ec:	49ad      	ldr	r1, [pc, #692]	; (80008a4 <main+0x378>)
 80005ee:	2002      	movs	r0, #2
 80005f0:	f7ff fed8 	bl	80003a4 <LL_SYSCFG_SetEXTISource>
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTH, LL_SYSCFG_EXTI_LINE2);
 80005f4:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 80005f8:	2007      	movs	r0, #7
 80005fa:	f7ff fed3 	bl	80003a4 <LL_SYSCFG_SetEXTISource>
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_4;
 80005fe:	9400      	str	r4, [sp, #0]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000600:	2400      	movs	r4, #0
  LL_EXTI_Init(&EXTI_InitStruct);
 8000602:	4668      	mov	r0, sp
  EXTI_InitStruct.LineCommand = ENABLE;
 8000604:	f8ad 500c 	strh.w	r5, [sp, #12]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000608:	f88d 800e 	strb.w	r8, [sp, #14]
  EXTI_InitStruct.Line_64_95 = LL_EXTI_LINE_NONE;
 800060c:	e9cd 4401 	strd	r4, r4, [sp, #4]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000610:	f001 fee8 	bl	80023e4 <LL_EXTI_Init>
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_5;
 8000614:	2120      	movs	r1, #32
  LL_EXTI_Init(&EXTI_InitStruct);
 8000616:	4668      	mov	r0, sp
  EXTI_InitStruct.LineCommand = ENABLE;
 8000618:	f8ad 500c 	strh.w	r5, [sp, #12]
  EXTI_InitStruct.Line_64_95 = LL_EXTI_LINE_NONE;
 800061c:	9402      	str	r4, [sp, #8]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 800061e:	f88d 800e 	strb.w	r8, [sp, #14]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000622:	e9cd 1400 	strd	r1, r4, [sp]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000626:	f001 fedd 	bl	80023e4 <LL_EXTI_Init>
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_8;
 800062a:	f44f 7380 	mov.w	r3, #256	; 0x100
  LL_EXTI_Init(&EXTI_InitStruct);
 800062e:	4668      	mov	r0, sp
  EXTI_InitStruct.LineCommand = ENABLE;
 8000630:	f8ad 500c 	strh.w	r5, [sp, #12]
  EXTI_InitStruct.Line_64_95 = LL_EXTI_LINE_NONE;
 8000634:	9402      	str	r4, [sp, #8]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000636:	f88d 800e 	strb.w	r8, [sp, #14]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 800063a:	e9cd 3400 	strd	r3, r4, [sp]
  LL_EXTI_Init(&EXTI_InitStruct);
 800063e:	f001 fed1 	bl	80023e4 <LL_EXTI_Init>
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8000642:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  LL_EXTI_Init(&EXTI_InitStruct);
 8000646:	4668      	mov	r0, sp
  EXTI_InitStruct.LineCommand = ENABLE;
 8000648:	f8ad 500c 	strh.w	r5, [sp, #12]
  EXTI_InitStruct.Line_64_95 = LL_EXTI_LINE_NONE;
 800064c:	9402      	str	r4, [sp, #8]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 800064e:	f88d 800e 	strb.w	r8, [sp, #14]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000652:	e9cd 1400 	strd	r1, r4, [sp]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000656:	f001 fec5 	bl	80023e4 <LL_EXTI_Init>
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 800065a:	2304      	movs	r3, #4
  LL_EXTI_Init(&EXTI_InitStruct);
 800065c:	4668      	mov	r0, sp
  EXTI_InitStruct.LineCommand = ENABLE;
 800065e:	f8ad 500c 	strh.w	r5, [sp, #12]
  EXTI_InitStruct.Line_64_95 = LL_EXTI_LINE_NONE;
 8000662:	9402      	str	r4, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000664:	2502      	movs	r5, #2
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000666:	f88d 800e 	strb.w	r8, [sp, #14]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 800066a:	e9cd 3400 	strd	r3, r4, [sp]
  LL_EXTI_Init(&EXTI_InitStruct);
 800066e:	f001 feb9 	bl	80023e4 <LL_EXTI_Init>
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8000672:	68f1      	ldr	r1, [r6, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_12;
 8000674:	230c      	movs	r3, #12
  LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000676:	4658      	mov	r0, fp
 8000678:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 800067c:	60f1      	str	r1, [r6, #12]
 800067e:	68f1      	ldr	r1, [r6, #12]
 8000680:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 8000684:	60f1      	str	r1, [r6, #12]
 8000686:	68f1      	ldr	r1, [r6, #12]
 8000688:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 800068c:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8000690:	60f1      	str	r1, [r6, #12]
 8000692:	f8d9 100c 	ldr.w	r1, [r9, #12]
 8000696:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 800069a:	f8c9 100c 	str.w	r1, [r9, #12]
 800069e:	f8da 100c 	ldr.w	r1, [sl, #12]
 80006a2:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 80006a6:	f8ca 100c 	str.w	r1, [sl, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80006aa:	6831      	ldr	r1, [r6, #0]
 80006ac:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 80006b0:	6031      	str	r1, [r6, #0]
 80006b2:	6831      	ldr	r1, [r6, #0]
 80006b4:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 80006b8:	6031      	str	r1, [r6, #0]
 80006ba:	6831      	ldr	r1, [r6, #0]
 80006bc:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 80006c0:	6031      	str	r1, [r6, #0]
 80006c2:	f8d9 1000 	ldr.w	r1, [r9]
 80006c6:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 80006ca:	f8c9 1000 	str.w	r1, [r9]
 80006ce:	f8da 1000 	ldr.w	r1, [sl]
 80006d2:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 80006d6:	f8ca 1000 	str.w	r1, [sl]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80006da:	f248 1133 	movw	r1, #33075	; 0x8133
  GPIO_InitStruct.Alternate = LL_GPIO_AF_12;
 80006de:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80006e0:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80006e2:	e9cd 1504 	strd	r1, r5, [sp, #16]
  LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006e6:	a904      	add	r1, sp, #16
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80006e8:	e9cd 7406 	strd	r7, r4, [sp, #24]
  LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006ec:	f001 ffec 	bl	80026c8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LCD_B6_Pin|LCD_B7_Pin|LCD_B4_Pin|LCD_B5_Pin
 80006f0:	21ff      	movs	r1, #255	; 0xff
                          |LCD_DE_Pin|LCD_G7_Pin|LCD_G6_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_14;
 80006f2:	230e      	movs	r3, #14
  LL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80006f4:	486c      	ldr	r0, [pc, #432]	; (80008a8 <main+0x37c>)
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80006f6:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_14;
 80006f8:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80006fa:	e9cd 1504 	strd	r1, r5, [sp, #16]
  LL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80006fe:	a904      	add	r1, sp, #16
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000700:	e9cd 4406 	strd	r4, r4, [sp, #24]
  LL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000704:	f001 ffe0 	bl	80026c8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OCSPI1_IO6_Pin;
 8000708:	f44f 7100 	mov.w	r1, #512	; 0x200
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_9;
 800070c:	2309      	movs	r3, #9
  LL_GPIO_Init(OCSPI1_IO6_GPIO_Port, &GPIO_InitStruct);
 800070e:	4658      	mov	r0, fp
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000710:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_9;
 8000712:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000714:	e9cd 1504 	strd	r1, r5, [sp, #16]
  LL_GPIO_Init(OCSPI1_IO6_GPIO_Port, &GPIO_InitStruct);
 8000718:	a904      	add	r1, sp, #16
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800071a:	e9cd 7406 	strd	r7, r4, [sp, #24]
  LL_GPIO_Init(OCSPI1_IO6_GPIO_Port, &GPIO_InitStruct);
 800071e:	f001 ffd3 	bl	80026c8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OCSPI1_IO7_Pin;
 8000722:	2180      	movs	r1, #128	; 0x80
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_10;
 8000724:	230a      	movs	r3, #10
  LL_GPIO_Init(OCSPI1_IO7_GPIO_Port, &GPIO_InitStruct);
 8000726:	4861      	ldr	r0, [pc, #388]	; (80008ac <main+0x380>)
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000728:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_10;
 800072a:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800072c:	e9cd 1504 	strd	r1, r5, [sp, #16]
  LL_GPIO_Init(OCSPI1_IO7_GPIO_Port, &GPIO_InitStruct);
 8000730:	a904      	add	r1, sp, #16
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000732:	e9cd 7406 	strd	r7, r4, [sp, #24]
  LL_GPIO_Init(OCSPI1_IO7_GPIO_Port, &GPIO_InitStruct);
 8000736:	f001 ffc7 	bl	80026c8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = D3_Pin|SDIO1_CMD_Pin|D2_Pin|D0_Pin
 800073a:	f24c 7107 	movw	r1, #50951	; 0xc707
                          |D1_Pin|D13_Pin|D15_Pin|D14_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_12;
 800073e:	230c      	movs	r3, #12
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000740:	485a      	ldr	r0, [pc, #360]	; (80008ac <main+0x380>)
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000742:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_12;
 8000744:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000746:	e9cd 1504 	strd	r1, r5, [sp, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800074a:	a904      	add	r1, sp, #16
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800074c:	e9cd 7406 	strd	r7, r4, [sp, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000750:	f001 ffba 	bl	80026c8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_CK_Pin|SDIO1_D3_Pin|SDIO1_D1_Pin
 8000754:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
                          |SDIO1_D0_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_12;
 8000758:	230c      	movs	r3, #12
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800075a:	4648      	mov	r0, r9
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800075c:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_12;
 800075e:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000760:	e9cd 1504 	strd	r1, r5, [sp, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000764:	a904      	add	r1, sp, #16
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000766:	e9cd 7406 	strd	r7, r4, [sp, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800076a:	f001 ffad 	bl	80026c8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin;
 800076e:	230e      	movs	r3, #14
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000770:	a904      	add	r1, sp, #16
 8000772:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000774:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000776:	e9cd 3804 	strd	r3, r8, [sp, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800077a:	e9cd 4406 	strd	r4, r4, [sp, #24]
  LL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800077e:	f001 ffa3 	bl	80026c8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = FMC_NBL0_Pin|FMC_NBL1_Pin|D9_Pin|D4_Pin
 8000782:	f64f 7183 	movw	r1, #65411	; 0xff83
                          |D12_Pin|D5_Pin|D8_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_12;
 8000786:	230c      	movs	r3, #12
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000788:	4849      	ldr	r0, [pc, #292]	; (80008b0 <main+0x384>)
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800078a:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_12;
 800078c:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800078e:	e9cd 1504 	strd	r1, r5, [sp, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000792:	a904      	add	r1, sp, #16
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000794:	e9cd 7406 	strd	r7, r4, [sp, #24]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000798:	f001 ff96 	bl	80026c8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = USER_LED1_Pin|AUDIO_NRST_Pin|USER_LED2_Pin;
 800079c:	f640 010c 	movw	r1, #2060	; 0x80c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007a0:	4658      	mov	r0, fp
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007a2:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80007a4:	e9cd 1804 	strd	r1, r8, [sp, #16]
  LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007a8:	a904      	add	r1, sp, #16
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80007aa:	e9cd 4406 	strd	r4, r4, [sp, #24]
  LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007ae:	f001 ff8b 	bl	80026c8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LCD_B3_Pin|LCD_B2_Pin|LCD_B1_Pin|LCD_B0_Pin
 80007b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
                          |LCD_R2_Pin|LCD_R5_Pin|LCD_R3_Pin|LCD_R4_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_14;
 80007b6:	230e      	movs	r3, #14
  LL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80007b8:	483e      	ldr	r0, [pc, #248]	; (80008b4 <main+0x388>)
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007ba:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_14;
 80007bc:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80007be:	e9cd 1504 	strd	r1, r5, [sp, #16]
  LL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80007c2:	a904      	add	r1, sp, #16
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80007c4:	e9cd 4406 	strd	r4, r4, [sp, #24]
  LL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80007c8:	f001 ff7e 	bl	80026c8 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = SPI2_SCK_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80007cc:	2305      	movs	r3, #5
  GPIO_InitStruct.Pin = SPI2_SCK_Pin;
 80007ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007d2:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80007d4:	9309      	str	r3, [sp, #36]	; 0x24
  LL_GPIO_Init(SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80007d6:	4b2f      	ldr	r3, [pc, #188]	; (8000894 <main+0x368>)
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80007d8:	e9cd 1504 	strd	r1, r5, [sp, #16]
  LL_GPIO_Init(SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80007dc:	4618      	mov	r0, r3
 80007de:	a904      	add	r1, sp, #16
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80007e0:	e9cd 4406 	strd	r4, r4, [sp, #24]
  LL_GPIO_Init(SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80007e4:	f001 ff70 	bl	80026c8 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = SPI2_NSS_Pin|LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e8:	4b2a      	ldr	r3, [pc, #168]	; (8000894 <main+0x368>)
  GPIO_InitStruct.Pin = SPI2_NSS_Pin|LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin;
 80007ea:	f640 0106 	movw	r1, #2054	; 0x806
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007ee:	9408      	str	r4, [sp, #32]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f0:	4618      	mov	r0, r3
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80007f2:	e9cd 1804 	strd	r1, r8, [sp, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f6:	a904      	add	r1, sp, #16
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80007f8:	e9cd 4406 	strd	r4, r4, [sp, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fc:	f001 ff64 	bl	80026c8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 8000800:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000804:	4b23      	ldr	r3, [pc, #140]	; (8000894 <main+0x368>)
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000806:	9408      	str	r4, [sp, #32]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000808:	4618      	mov	r0, r3
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800080a:	e9cd 1504 	strd	r1, r5, [sp, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800080e:	2107      	movs	r1, #7
 8000810:	9109      	str	r1, [sp, #36]	; 0x24
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000812:	a904      	add	r1, sp, #16
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000814:	e9cd 4406 	strd	r4, r4, [sp, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000818:	f001 ff56 	bl	80026c8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = A1_Pin|A0_Pin|A2_Pin|A4_Pin
 800081c:	f64f 013f 	movw	r1, #63551	; 0xf83f
                          |A9_Pin|A8_Pin|A6_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_12;
 8000820:	230c      	movs	r3, #12
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000822:	4825      	ldr	r0, [pc, #148]	; (80008b8 <main+0x38c>)
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000824:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_12;
 8000826:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000828:	e9cd 1504 	strd	r1, r5, [sp, #16]
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800082c:	a904      	add	r1, sp, #16
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800082e:	e9cd 7406 	strd	r7, r4, [sp, #24]
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000832:	f001 ff49 	bl	80026c8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MCO_Pin;
 8000836:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
  LL_GPIO_Init(MCO_GPIO_Port, &GPIO_InitStruct);
 800083a:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800083c:	e9cd 3504 	strd	r3, r5, [sp, #16]
  LL_GPIO_Init(MCO_GPIO_Port, &GPIO_InitStruct);
 8000840:	4b14      	ldr	r3, [pc, #80]	; (8000894 <main+0x368>)
 8000842:	4618      	mov	r0, r3
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000844:	e9cd 4406 	strd	r4, r4, [sp, #24]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 8000848:	e9cd 4408 	strd	r4, r4, [sp, #32]
  LL_GPIO_Init(MCO_GPIO_Port, &GPIO_InitStruct);
 800084c:	f001 ff3c 	bl	80026c8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OCSPI1_NCS_Pin;
 8000850:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_10;
  LL_GPIO_Init(OCSPI1_NCS_GPIO_Port, &GPIO_InitStruct);
 8000852:	a904      	add	r1, sp, #16
 8000854:	4658      	mov	r0, fp
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000856:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000858:	e9cd 3504 	strd	r3, r5, [sp, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_10;
 800085c:	230a      	movs	r3, #10
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800085e:	e9cd 7406 	strd	r7, r4, [sp, #24]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_10;
 8000862:	9309      	str	r3, [sp, #36]	; 0x24
  LL_GPIO_Init(OCSPI1_NCS_GPIO_Port, &GPIO_InitStruct);
 8000864:	f001 ff30 	bl	80026c8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_CLK_Pin|LCD_VSYNC_Pin|LCD_R0_Pin;
 8000868:	f44f 4370 	mov.w	r3, #61440	; 0xf000
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_14;
  LL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800086c:	a904      	add	r1, sp, #16
 800086e:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000870:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000872:	e9cd 3504 	strd	r3, r5, [sp, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_14;
 8000876:	230e      	movs	r3, #14
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000878:	e9cd 4406 	strd	r4, r4, [sp, #24]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_14;
 800087c:	9309      	str	r3, [sp, #36]	; 0x24
  LL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800087e:	f001 ff23 	bl	80026c8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_MOSI_Pin;
 8000882:	230c      	movs	r3, #12
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000884:	a904      	add	r1, sp, #16
 8000886:	4648      	mov	r0, r9
 8000888:	e01e      	b.n	80008c8 <main+0x39c>
 800088a:	bf00      	nop
 800088c:	58022000 	.word	0x58022000
 8000890:	08040000 	.word	0x08040000
 8000894:	58020000 	.word	0x58020000
 8000898:	000f0001 	.word	0x000f0001
 800089c:	00f00001 	.word	0x00f00001
 80008a0:	000f0002 	.word	0x000f0002
 80008a4:	00f00003 	.word	0x00f00003
 80008a8:	58022800 	.word	0x58022800
 80008ac:	58020c00 	.word	0x58020c00
 80008b0:	58021000 	.word	0x58021000
 80008b4:	58022400 	.word	0x58022400
 80008b8:	58021400 	.word	0x58021400
 80008bc:	58021800 	.word	0x58021800
 80008c0:	58020800 	.word	0x58020800
 80008c4:	58021c00 	.word	0x58021c00
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008c8:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80008ca:	e9cd 3504 	strd	r3, r5, [sp, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80008ce:	2305      	movs	r3, #5
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80008d0:	e9cd 4406 	strd	r4, r4, [sp, #24]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80008d4:	9309      	str	r3, [sp, #36]	; 0x24
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008d6:	f001 fef7 	bl	80026c8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = I2C4_SDA_Pin|I2C4_SCL_Pin;
 80008da:	f44f 5340 	mov.w	r3, #12288	; 0x3000
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008de:	a904      	add	r1, sp, #16
 80008e0:	481f      	ldr	r0, [pc, #124]	; (8000960 <main+0x434>)
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80008e2:	f8cd 8020 	str.w	r8, [sp, #32]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80008e6:	e9cd 3504 	strd	r3, r5, [sp, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80008ea:	2304      	movs	r3, #4
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80008ec:	e9cd 4806 	strd	r4, r8, [sp, #24]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80008f0:	9309      	str	r3, [sp, #36]	; 0x24
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008f2:	f001 fee9 	bl	80026c8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OCSPI1_IO4_Pin|OCSPI1_DQS_Pin;
 80008f6:	2322      	movs	r3, #34	; 0x22
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_10;
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008f8:	a904      	add	r1, sp, #16
 80008fa:	4648      	mov	r0, r9
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008fc:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80008fe:	e9cd 3504 	strd	r3, r5, [sp, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_10;
 8000902:	230a      	movs	r3, #10
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000904:	e9cd 7406 	strd	r7, r4, [sp, #24]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_10;
 8000908:	9309      	str	r3, [sp, #36]	; 0x24
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800090a:	f001 fedd 	bl	80026c8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SDNE1_Pin|SDNWE_Pin|SDCKE1_Pin;
 800090e:	23e0      	movs	r3, #224	; 0xe0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_12;
  LL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000910:	a904      	add	r1, sp, #16
 8000912:	4650      	mov	r0, sl
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000914:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000916:	e9cd 3504 	strd	r3, r5, [sp, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_12;
 800091a:	230c      	movs	r3, #12
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800091c:	e9cd 7406 	strd	r7, r4, [sp, #24]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_12;
 8000920:	9309      	str	r3, [sp, #36]	; 0x24
  LL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000922:	f001 fed1 	bl	80026c8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OCSPI1_IO5_Pin;
 8000926:	2208      	movs	r2, #8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_9;
 8000928:	2309      	movs	r3, #9
  LL_GPIO_Init(OCSPI1_IO5_GPIO_Port, &GPIO_InitStruct);
 800092a:	a904      	add	r1, sp, #16
 800092c:	4650      	mov	r0, sl
  GPIO_InitStruct.Alternate = LL_GPIO_AF_9;
 800092e:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000930:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000932:	e9cd 2504 	strd	r2, r5, [sp, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000936:	e9cd 7406 	strd	r7, r4, [sp, #24]
  LL_GPIO_Init(OCSPI1_IO5_GPIO_Port, &GPIO_InitStruct);
 800093a:	f001 fec5 	bl	80026c8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OCSPI1_CLK_Pin;
 800093e:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_9;
  LL_GPIO_Init(OCSPI1_CLK_GPIO_Port, &GPIO_InitStruct);
 8000940:	a904      	add	r1, sp, #16
 8000942:	4808      	ldr	r0, [pc, #32]	; (8000964 <main+0x438>)
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000944:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000946:	e9cd 3504 	strd	r3, r5, [sp, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_9;
 800094a:	2309      	movs	r3, #9
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800094c:	e9cd 7406 	strd	r7, r4, [sp, #24]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_9;
 8000950:	9309      	str	r3, [sp, #36]	; 0x24
  LL_GPIO_Init(OCSPI1_CLK_GPIO_Port, &GPIO_InitStruct);
 8000952:	f001 feb9 	bl	80026c8 <LL_GPIO_Init>
  AppInit();
 8000956:	f7ff fcc9 	bl	80002ec <AppInit>
    AppTask();
 800095a:	f7ff fcc9 	bl	80002f0 <AppTask>
  while (1)
 800095e:	e7fc      	b.n	800095a <main+0x42e>
 8000960:	58020c00 	.word	0x58020c00
 8000964:	58020400 	.word	0x58020400

08000968 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000968:	4b07      	ldr	r3, [pc, #28]	; (8000988 <HAL_MspInit+0x20>)
{
 800096a:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096c:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
 8000970:	f042 0202 	orr.w	r2, r2, #2
 8000974:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
 8000978:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800097c:	f003 0302 	and.w	r3, r3, #2
 8000980:	9301      	str	r3, [sp, #4]
 8000982:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000984:	b002      	add	sp, #8
 8000986:	4770      	bx	lr
 8000988:	58024400 	.word	0x58024400

0800098c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800098c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800098e:	b08d      	sub	sp, #52	; 0x34
 8000990:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000992:	2214      	movs	r2, #20
 8000994:	2100      	movs	r1, #0
 8000996:	a807      	add	r0, sp, #28
 8000998:	f004 f8d6 	bl	8004b48 <memset>
  if(hpcd->Instance==USB_OTG_HS)
 800099c:	6822      	ldr	r2, [r4, #0]
 800099e:	4b4d      	ldr	r3, [pc, #308]	; (8000ad4 <HAL_PCD_MspInit+0x148>)
 80009a0:	429a      	cmp	r2, r3
 80009a2:	f040 8094 	bne.w	8000ace <HAL_PCD_MspInit+0x142>
  MODIFY_REG(RCC->CDCCIP2R, RCC_CDCCIP2R_USBSEL, ClkSource);
 80009a6:	4c4c      	ldr	r4, [pc, #304]	; (8000ad8 <HAL_PCD_MspInit+0x14c>)
    PA3     ------> USB_OTG_HS_ULPI_D0
    PB10     ------> USB_OTG_HS_ULPI_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_12
                          |GPIO_PIN_0|GPIO_PIN_11|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a8:	2502      	movs	r5, #2
  SET_BIT(PWR->CR3, PWR_CR3_USB33DEN);
 80009aa:	4a4c      	ldr	r2, [pc, #304]	; (8000adc <HAL_PCD_MspInit+0x150>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80009ac:	260a      	movs	r6, #10
 80009ae:	6d63      	ldr	r3, [r4, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b0:	a907      	add	r1, sp, #28
 80009b2:	484b      	ldr	r0, [pc, #300]	; (8000ae0 <HAL_PCD_MspInit+0x154>)

    GPIO_InitStruct.Pin = GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2700      	movs	r7, #0
 80009b6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80009ba:	6563      	str	r3, [r4, #84]	; 0x54
 80009bc:	68d3      	ldr	r3, [r2, #12]
 80009be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80009c2:	60d3      	str	r3, [r2, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c4:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 80009c8:	f043 0302 	orr.w	r3, r3, #2
 80009cc:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
 80009d0:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 80009d4:	f003 0302 	and.w	r3, r3, #2
 80009d8:	9300      	str	r3, [sp, #0]
 80009da:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80009dc:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 80009e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009e4:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
 80009e8:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 80009ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009f0:	9301      	str	r3, [sp, #4]
 80009f2:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f4:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 80009f8:	f043 0304 	orr.w	r3, r3, #4
 80009fc:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
 8000a00:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8000a04:	f003 0304 	and.w	r3, r3, #4
 8000a08:	9302      	str	r3, [sp, #8]
 8000a0a:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a0c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8000a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a14:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
 8000a18:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8000a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a20:	9303      	str	r3, [sp, #12]
 8000a22:	9b03      	ldr	r3, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a24:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
 8000a30:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a34:	950a      	str	r5, [sp, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	9304      	str	r3, [sp, #16]
 8000a3c:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3e:	f643 4323 	movw	r3, #15395	; 0x3c23
 8000a42:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000a46:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a48:	f000 fc76 	bl	8001338 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000a4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a50:	a907      	add	r1, sp, #28
 8000a52:	4824      	ldr	r0, [pc, #144]	; (8000ae4 <HAL_PCD_MspInit+0x158>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000a54:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a56:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a5a:	e9cd 7509 	strd	r7, r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a5e:	f000 fc6b 	bl	8001338 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a62:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a64:	a907      	add	r1, sp, #28
 8000a66:	4820      	ldr	r0, [pc, #128]	; (8000ae8 <HAL_PCD_MspInit+0x15c>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000a68:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6a:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a6e:	e9cd 7509 	strd	r7, r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a72:	f000 fc61 	bl	8001338 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a76:	2310      	movs	r3, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a78:	a907      	add	r1, sp, #28
 8000a7a:	481c      	ldr	r0, [pc, #112]	; (8000aec <HAL_PCD_MspInit+0x160>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000a7c:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7e:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a82:	e9cd 7509 	strd	r7, r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a86:	f000 fc57 	bl	8001338 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 8000a8a:	2328      	movs	r3, #40	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8c:	a907      	add	r1, sp, #28
 8000a8e:	4818      	ldr	r0, [pc, #96]	; (8000af0 <HAL_PCD_MspInit+0x164>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000a90:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a92:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a96:	e9cd 7509 	strd	r7, r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9a:	f000 fc4d 	bl	8001338 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8000a9e:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 8000aa2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000aa6:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
 8000aaa:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 8000aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ab2:	9305      	str	r3, [sp, #20]
 8000ab4:	9b05      	ldr	r3, [sp, #20]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 8000ab6:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 8000aba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000abe:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
 8000ac2:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 8000ac6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000aca:	9306      	str	r3, [sp, #24]
 8000acc:	9b06      	ldr	r3, [sp, #24]
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }

}
 8000ace:	b00d      	add	sp, #52	; 0x34
 8000ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40040000 	.word	0x40040000
 8000ad8:	58024400 	.word	0x58024400
 8000adc:	58024800 	.word	0x58024800
 8000ae0:	58020400 	.word	0x58020400
 8000ae4:	58022000 	.word	0x58022000
 8000ae8:	58020800 	.word	0x58020800
 8000aec:	58021c00 	.word	0x58021c00
 8000af0:	58020000 	.word	0x58020000

08000af4 <HAL_PCD_MspDeInit>:
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspDeInit(PCD_HandleTypeDef* hpcd)
{
  if(hpcd->Instance==USB_OTG_HS)
 8000af4:	6802      	ldr	r2, [r0, #0]
{
 8000af6:	b508      	push	{r3, lr}
  if(hpcd->Instance==USB_OTG_HS)
 8000af8:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <HAL_PCD_MspDeInit+0x58>)
 8000afa:	429a      	cmp	r2, r3
 8000afc:	d124      	bne.n	8000b48 <HAL_PCD_MspDeInit+0x54>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspDeInit 0 */

  /* USER CODE END USB_OTG_HS_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USB_OTG_HS_CLK_DISABLE();
 8000afe:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <HAL_PCD_MspDeInit+0x5c>)
    PB0     ------> USB_OTG_HS_ULPI_D1
    PB11     ------> USB_OTG_HS_ULPI_D4
    PA3     ------> USB_OTG_HS_ULPI_D0
    PB10     ------> USB_OTG_HS_ULPI_D3
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_5|GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_12
 8000b00:	f643 4123 	movw	r1, #15395	; 0x3c23
 8000b04:	4813      	ldr	r0, [pc, #76]	; (8000b54 <HAL_PCD_MspDeInit+0x60>)
    __HAL_RCC_USB_OTG_HS_CLK_DISABLE();
 8000b06:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
 8000b0a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8000b0e:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_DISABLE();
 8000b12:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
 8000b16:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8000b1a:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_5|GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_12
 8000b1e:	f000 fcf7 	bl	8001510 <HAL_GPIO_DeInit>
                          |GPIO_PIN_0|GPIO_PIN_11|GPIO_PIN_10);

    HAL_GPIO_DeInit(GPIOI, GPIO_PIN_11);
 8000b22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b26:	480c      	ldr	r0, [pc, #48]	; (8000b58 <HAL_PCD_MspDeInit+0x64>)
 8000b28:	f000 fcf2 	bl	8001510 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 8000b2c:	2101      	movs	r1, #1
 8000b2e:	480b      	ldr	r0, [pc, #44]	; (8000b5c <HAL_PCD_MspDeInit+0x68>)
 8000b30:	f000 fcee 	bl	8001510 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_4);
 8000b34:	2110      	movs	r1, #16
 8000b36:	480a      	ldr	r0, [pc, #40]	; (8000b60 <HAL_PCD_MspDeInit+0x6c>)
 8000b38:	f000 fcea 	bl	8001510 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_3);
 8000b3c:	2128      	movs	r1, #40	; 0x28
 8000b3e:	4809      	ldr	r0, [pc, #36]	; (8000b64 <HAL_PCD_MspDeInit+0x70>)
  /* USER CODE BEGIN USB_OTG_HS_MspDeInit 1 */

  /* USER CODE END USB_OTG_HS_MspDeInit 1 */
  }

}
 8000b40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_3);
 8000b44:	f000 bce4 	b.w	8001510 <HAL_GPIO_DeInit>
}
 8000b48:	bd08      	pop	{r3, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40040000 	.word	0x40040000
 8000b50:	58024400 	.word	0x58024400
 8000b54:	58020400 	.word	0x58020400
 8000b58:	58022000 	.word	0x58022000
 8000b5c:	58020800 	.word	0x58020800
 8000b60:	58021c00 	.word	0x58021c00
 8000b64:	58020000 	.word	0x58020000

08000b68 <HAL_MspDeInit>:
/* USER CODE BEGIN 1 */
/**
  * De-Initializes the Global MSP.
  */
void HAL_MspDeInit(void)
{
 8000b68:	b510      	push	{r4, lr}
  /* Reset the RCC clock configuration to the default reset state. */
  LL_RCC_DeInit();
 8000b6a:	f001 fe31 	bl	80027d0 <LL_RCC_DeInit>
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 8000b6e:	4c1e      	ldr	r4, [pc, #120]	; (8000be8 <HAL_MspDeInit+0x80>)
 8000b70:	f44f 0300 	mov.w	r3, #8388608	; 0x800000

  /* Reset GPIO pin for the LED to turn it off. */
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_7);

  /* Deinit used GPIOs. */
  LL_GPIO_DeInit(GPIOD);
 8000b74:	481d      	ldr	r0, [pc, #116]	; (8000bec <HAL_MspDeInit+0x84>)
 8000b76:	61a3      	str	r3, [r4, #24]
 8000b78:	f001 fd2c 	bl	80025d4 <LL_GPIO_DeInit>
  LL_GPIO_DeInit(GPIOC);
 8000b7c:	481c      	ldr	r0, [pc, #112]	; (8000bf0 <HAL_MspDeInit+0x88>)
 8000b7e:	f001 fd29 	bl	80025d4 <LL_GPIO_DeInit>
  LL_GPIO_DeInit(GPIOB);
 8000b82:	4620      	mov	r0, r4
 8000b84:	f001 fd26 	bl	80025d4 <LL_GPIO_DeInit>
  LL_GPIO_DeInit(GPIOA);
 8000b88:	481a      	ldr	r0, [pc, #104]	; (8000bf4 <HAL_MspDeInit+0x8c>)
 8000b8a:	f001 fd23 	bl	80025d4 <LL_GPIO_DeInit>
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1HENR, Periphs);
 8000b8e:	4b1a      	ldr	r3, [pc, #104]	; (8000bf8 <HAL_MspDeInit+0x90>)
 8000b90:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000b94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000b98:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
  CLEAR_BIT(RCC->APB1LENR, Periphs);
 8000b9c:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 8000ba0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000ba4:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  CLEAR_BIT(RCC->AHB4ENR, Periphs);
 8000ba8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8000bac:	f022 0208 	bic.w	r2, r2, #8
 8000bb0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8000bb4:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8000bb8:	f022 0204 	bic.w	r2, r2, #4
 8000bbc:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8000bc0:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8000bc4:	f022 0202 	bic.w	r2, r2, #2
 8000bc8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8000bcc:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8000bd0:	f022 0201 	bic.w	r2, r2, #1
 8000bd4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB4_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB4ENR, Periphs);
 8000bd8:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
 8000bdc:	f022 0202 	bic.w	r2, r2, #2
 8000be0:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
  LL_AHB4_GRP1_DisableClock(LL_AHB4_GRP1_PERIPH_GPIOB);
  LL_AHB4_GRP1_DisableClock(LL_AHB4_GRP1_PERIPH_GPIOA);

  /* SYSCFG clock disable. */
  LL_APB4_GRP1_DisableClock(LL_APB4_GRP1_PERIPH_SYSCFG);
}
 8000be4:	bd10      	pop	{r4, pc}
 8000be6:	bf00      	nop
 8000be8:	58020400 	.word	0x58020400
 8000bec:	58020c00 	.word	0x58020c00
 8000bf0:	58020800 	.word	0x58020800
 8000bf4:	58020000 	.word	0x58020000
 8000bf8:	58024400 	.word	0x58024400

08000bfc <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000bfc:	4770      	bx	lr

08000bfe <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bfe:	e7fe      	b.n	8000bfe <HardFault_Handler>

08000c00 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <MemManage_Handler>

08000c02 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c02:	e7fe      	b.n	8000c02 <BusFault_Handler>

08000c04 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <UsageFault_Handler>

08000c06 <SVC_Handler>:
 8000c06:	4770      	bx	lr

08000c08 <DebugMon_Handler>:
 8000c08:	4770      	bx	lr

08000c0a <PendSV_Handler>:
 8000c0a:	4770      	bx	lr

08000c0c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c0c:	f000 b934 	b.w	8000e78 <HAL_IncTick>

08000c10 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8000c10:	f8df d064 	ldr.w	sp, [pc, #100]	; 8000c78 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c14:	f000 f848 	bl	8000ca8 <SystemInit>
  ldr r0, =_BeginData
 8000c18:	4818      	ldr	r0, [pc, #96]	; (8000c7c <LoopFillZerobss+0x12>)
  ldr r1, =_EndData
 8000c1a:	4919      	ldr	r1, [pc, #100]	; (8000c80 <LoopFillZerobss+0x16>)
  ldr r2, =0
 8000c1c:	f04f 0200 	mov.w	r2, #0
   b 2f
 8000c20:	e001      	b.n	8000c26 <Reset_Handler+0x16>
1:  str r2, [r0], #4
 8000c22:	f840 2b04 	str.w	r2, [r0], #4
2:  cmp r0, r1
 8000c26:	4288      	cmp	r0, r1
    blo 1b
 8000c28:	d3fb      	bcc.n	8000c22 <Reset_Handler+0x12>
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c2a:	4816      	ldr	r0, [pc, #88]	; (8000c84 <LoopFillZerobss+0x1a>)
  ldr r1, =_edata
 8000c2c:	4916      	ldr	r1, [pc, #88]	; (8000c88 <LoopFillZerobss+0x1e>)
  ldr r2, =_sidata
 8000c2e:	4a17      	ldr	r2, [pc, #92]	; (8000c8c <LoopFillZerobss+0x22>)
b 2f
 8000c30:	e003      	b.n	8000c3a <Reset_Handler+0x2a>
1:  ldr r3, [r2], #4
 8000c32:	f852 3b04 	ldr.w	r3, [r2], #4
    str r3, [r0], #4
 8000c36:	f840 3b04 	str.w	r3, [r0], #4
2:  cmp r0, r1
 8000c3a:	4288      	cmp	r0, r1
    blo 1b
 8000c3c:	d3f9      	bcc.n	8000c32 <Reset_Handler+0x22>
  ldr r0, =_snocachedata
 8000c3e:	4814      	ldr	r0, [pc, #80]	; (8000c90 <LoopFillZerobss+0x26>)
  ldr r1, =_enocachedata
 8000c40:	4914      	ldr	r1, [pc, #80]	; (8000c94 <LoopFillZerobss+0x2a>)
  ldr r2, =_sinocachedata
 8000c42:	4a15      	ldr	r2, [pc, #84]	; (8000c98 <LoopFillZerobss+0x2e>)
  b 2f
 8000c44:	e003      	b.n	8000c4e <Reset_Handler+0x3e>
1:  ldr r3, [r2], #4
 8000c46:	f852 3b04 	ldr.w	r3, [r2], #4
    str r3, [r0], #4
 8000c4a:	f840 3b04 	str.w	r3, [r0], #4
2:  cmp r0, r1
 8000c4e:	4288      	cmp	r0, r1
    blo 1b
 8000c50:	d3f9      	bcc.n	8000c46 <Reset_Handler+0x36>

08000c52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c56:	3304      	adds	r3, #4

08000c58 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000c58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c5c:	d3f9      	bcc.n	8000c52 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c5e:	4a0f      	ldr	r2, [pc, #60]	; (8000c9c <LoopFillZerobss+0x32>)
  ldr r4, =_ebss
 8000c60:	4c0f      	ldr	r4, [pc, #60]	; (8000ca0 <LoopFillZerobss+0x36>)
  movs r3, #0
 8000c62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c64:	e001      	b.n	8000c6a <LoopFillZerobss>

08000c66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c68:	3204      	adds	r2, #4

08000c6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c6c:	d3fb      	bcc.n	8000c66 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c6e:	f003 ff47 	bl	8004b00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c72:	f7ff fc5b 	bl	800052c <main>
  bx  lr
 8000c76:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8000c78:	24080000 	.word	0x24080000
  ldr r0, =_BeginData
 8000c7c:	08180000 	.word	0x08180000
  ldr r1, =_EndData
 8000c80:	08180000 	.word	0x08180000
  ldr r0, =_sdata
 8000c84:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000c88:	240000c8 	.word	0x240000c8
  ldr r2, =_sidata
 8000c8c:	080057f4 	.word	0x080057f4
  ldr r0, =_snocachedata
 8000c90:	24080000 	.word	0x24080000
  ldr r1, =_enocachedata
 8000c94:	24080000 	.word	0x24080000
  ldr r2, =_sinocachedata
 8000c98:	24080000 	.word	0x24080000
  ldr r2, =_sbss
 8000c9c:	240000c8 	.word	0x240000c8
  ldr r4, =_ebss
 8000ca0:	24004d90 	.word	0x24004d90

08000ca4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ca4:	e7fe      	b.n	8000ca4 <ADC_IRQHandler>
	...

08000ca8 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ca8:	4a20      	ldr	r2, [pc, #128]	; (8000d2c <SystemInit+0x84>)
 8000caa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000cae:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cb2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000cb6:	4a1e      	ldr	r2, [pc, #120]	; (8000d30 <SystemInit+0x88>)
 8000cb8:	6813      	ldr	r3, [r2, #0]
 8000cba:	f003 030f 	and.w	r3, r3, #15
 8000cbe:	2b02      	cmp	r3, #2
 8000cc0:	d805      	bhi.n	8000cce <SystemInit+0x26>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000cc2:	6813      	ldr	r3, [r2, #0]
 8000cc4:	f023 030f 	bic.w	r3, r3, #15
 8000cc8:	f043 0303 	orr.w	r3, r3, #3
 8000ccc:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000cce:	4b19      	ldr	r3, [pc, #100]	; (8000d34 <SystemInit+0x8c>)
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	f042 0201 	orr.w	r2, r2, #1
 8000cd6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000cd8:	2200      	movs	r2, #0
 8000cda:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000cdc:	4a16      	ldr	r2, [pc, #88]	; (8000d38 <SystemInit+0x90>)
 8000cde:	6819      	ldr	r1, [r3, #0]
 8000ce0:	400a      	ands	r2, r1

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ce2:	4913      	ldr	r1, [pc, #76]	; (8000d30 <SystemInit+0x88>)
  RCC->CR &= 0xEAF6ED7FU;
 8000ce4:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ce6:	680a      	ldr	r2, [r1, #0]
 8000ce8:	f012 0f0c 	tst.w	r2, #12
 8000cec:	d005      	beq.n	8000cfa <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000cee:	680a      	ldr	r2, [r1, #0]
 8000cf0:	f022 020f 	bic.w	r2, r2, #15
 8000cf4:	f042 0203 	orr.w	r2, r2, #3
 8000cf8:	600a      	str	r2, [r1, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000cfa:	2200      	movs	r2, #0

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000cfc:	490f      	ldr	r1, [pc, #60]	; (8000d3c <SystemInit+0x94>)
  RCC->CDCFGR1 = 0x00000000;
 8000cfe:	619a      	str	r2, [r3, #24]
  RCC->CDCFGR2 = 0x00000000;
 8000d00:	61da      	str	r2, [r3, #28]
  RCC->SRDCFGR = 0x00000000;
 8000d02:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8000d04:	6299      	str	r1, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000d06:	490e      	ldr	r1, [pc, #56]	; (8000d40 <SystemInit+0x98>)
 8000d08:	62d9      	str	r1, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000d0a:	490e      	ldr	r1, [pc, #56]	; (8000d44 <SystemInit+0x9c>)
 8000d0c:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000d0e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000d10:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000d12:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000d14:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000d16:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d18:	6819      	ldr	r1, [r3, #0]
 8000d1a:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8000d1e:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000d20:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000d22:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000d26:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <SystemInit+0xa0>)
 8000d28:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000d2a:	4770      	bx	lr
 8000d2c:	e000ed00 	.word	0xe000ed00
 8000d30:	52002000 	.word	0x52002000
 8000d34:	58024400 	.word	0x58024400
 8000d38:	eaf6ed7f 	.word	0xeaf6ed7f
 8000d3c:	02020200 	.word	0x02020200
 8000d40:	01ff0000 	.word	0x01ff0000
 8000d44:	01010280 	.word	0x01010280
 8000d48:	52004000 	.word	0x52004000

08000d4c <HAL_DeInit>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
  /* Reset of all peripherals */
  __HAL_RCC_AHB3_FORCE_RESET();
 8000d4c:	4b19      	ldr	r3, [pc, #100]	; (8000db4 <HAL_DeInit+0x68>)
 8000d4e:	4a1a      	ldr	r2, [pc, #104]	; (8000db8 <HAL_DeInit+0x6c>)
{
 8000d50:	b510      	push	{r4, lr}
  __HAL_RCC_AHB3_FORCE_RESET();
 8000d52:	67da      	str	r2, [r3, #124]	; 0x7c
  __HAL_RCC_AHB3_RELEASE_RESET();
 8000d54:	2400      	movs	r4, #0

  __HAL_RCC_AHB1_FORCE_RESET();
 8000d56:	4a19      	ldr	r2, [pc, #100]	; (8000dbc <HAL_DeInit+0x70>)
  __HAL_RCC_AHB3_RELEASE_RESET();
 8000d58:	67dc      	str	r4, [r3, #124]	; 0x7c
  __HAL_RCC_AHB1_FORCE_RESET();
 8000d5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __HAL_RCC_AHB1_RELEASE_RESET();

  __HAL_RCC_AHB2_FORCE_RESET();
 8000d5e:	f640 2275 	movw	r2, #2677	; 0xa75
  __HAL_RCC_AHB1_RELEASE_RESET();
 8000d62:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
  __HAL_RCC_AHB2_FORCE_RESET();
 8000d66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __HAL_RCC_AHB2_RELEASE_RESET();

  __HAL_RCC_AHB4_FORCE_RESET();
 8000d6a:	4a15      	ldr	r2, [pc, #84]	; (8000dc0 <HAL_DeInit+0x74>)
  __HAL_RCC_AHB2_RELEASE_RESET();
 8000d6c:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  __HAL_RCC_AHB4_FORCE_RESET();
 8000d70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 __HAL_RCC_AHB4_RELEASE_RESET();

  __HAL_RCC_APB3_FORCE_RESET();
 8000d74:	2208      	movs	r2, #8
 __HAL_RCC_AHB4_RELEASE_RESET();
 8000d76:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
  __HAL_RCC_APB3_FORCE_RESET();
 8000d7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  __HAL_RCC_APB3_RELEASE_RESET();

  __HAL_RCC_APB1L_FORCE_RESET();
 8000d7e:	4a11      	ldr	r2, [pc, #68]	; (8000dc4 <HAL_DeInit+0x78>)
  __HAL_RCC_APB3_RELEASE_RESET();
 8000d80:	f8c3 408c 	str.w	r4, [r3, #140]	; 0x8c
  __HAL_RCC_APB1L_FORCE_RESET();
 8000d84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  __HAL_RCC_APB1L_RELEASE_RESET();

  __HAL_RCC_APB1H_FORCE_RESET();
 8000d88:	f44f 729b 	mov.w	r2, #310	; 0x136
  __HAL_RCC_APB1L_RELEASE_RESET();
 8000d8c:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
  __HAL_RCC_APB1H_FORCE_RESET();
 8000d90:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __HAL_RCC_APB1H_RELEASE_RESET();

   __HAL_RCC_APB2_FORCE_RESET();
 8000d94:	4a0c      	ldr	r2, [pc, #48]	; (8000dc8 <HAL_DeInit+0x7c>)
  __HAL_RCC_APB1H_RELEASE_RESET();
 8000d96:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
   __HAL_RCC_APB2_FORCE_RESET();
 8000d9a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   __HAL_RCC_APB2_RELEASE_RESET();

  __HAL_RCC_APB4_FORCE_RESET();
 8000d9e:	4a0b      	ldr	r2, [pc, #44]	; (8000dcc <HAL_DeInit+0x80>)
   __HAL_RCC_APB2_RELEASE_RESET();
 8000da0:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
  __HAL_RCC_APB4_FORCE_RESET();
 8000da4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  __HAL_RCC_APB4_RELEASE_RESET();
 8000da8:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000dac:	f7ff fedc 	bl	8000b68 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
}
 8000db0:	4620      	mov	r0, r4
 8000db2:	bd10      	pop	{r4, pc}
 8000db4:	58024400 	.word	0x58024400
 8000db8:	01e95031 	.word	0x01e95031
 8000dbc:	02000223 	.word	0x02000223
 8000dc0:	002007ff 	.word	0x002007ff
 8000dc4:	e8ffc3ff 	.word	0xe8ffc3ff
 8000dc8:	40d730f3 	.word	0x40d730f3
 8000dcc:	0c00e6aa 	.word	0x0c00e6aa

08000dd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd0:	b538      	push	{r3, r4, r5, lr}
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000dd2:	4b0f      	ldr	r3, [pc, #60]	; (8000e10 <HAL_InitTick+0x40>)
{
 8000dd4:	4605      	mov	r5, r0
  if((uint32_t)uwTickFreq == 0UL)
 8000dd6:	7818      	ldrb	r0, [r3, #0]
 8000dd8:	b908      	cbnz	r0, 8000dde <HAL_InitTick+0xe>
  {
    return HAL_ERROR;
 8000dda:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000ddc:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000dde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000de2:	4a0c      	ldr	r2, [pc, #48]	; (8000e14 <HAL_InitTick+0x44>)
 8000de4:	fbb3 f3f0 	udiv	r3, r3, r0
 8000de8:	6810      	ldr	r0, [r2, #0]
 8000dea:	fbb0 f0f3 	udiv	r0, r0, r3
 8000dee:	f000 f8a5 	bl	8000f3c <HAL_SYSTICK_Config>
 8000df2:	4604      	mov	r4, r0
 8000df4:	2800      	cmp	r0, #0
 8000df6:	d1f0      	bne.n	8000dda <HAL_InitTick+0xa>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000df8:	2d0f      	cmp	r5, #15
 8000dfa:	d8ee      	bhi.n	8000dda <HAL_InitTick+0xa>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	4629      	mov	r1, r5
 8000e00:	f04f 30ff 	mov.w	r0, #4294967295
 8000e04:	f000 f868 	bl	8000ed8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e08:	4b03      	ldr	r3, [pc, #12]	; (8000e18 <HAL_InitTick+0x48>)
 8000e0a:	4620      	mov	r0, r4
 8000e0c:	601d      	str	r5, [r3, #0]
  return HAL_OK;
 8000e0e:	e7e5      	b.n	8000ddc <HAL_InitTick+0xc>
 8000e10:	24000008 	.word	0x24000008
 8000e14:	24000000 	.word	0x24000000
 8000e18:	2400000c 	.word	0x2400000c

08000e1c <HAL_Init>:
{
 8000e1c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e1e:	2003      	movs	r0, #3
 8000e20:	f000 f848 	bl	8000eb4 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000e24:	f001 fa1c 	bl	8002260 <HAL_RCC_GetSysClockFreq>
 8000e28:	490f      	ldr	r1, [pc, #60]	; (8000e68 <HAL_Init+0x4c>)
 8000e2a:	4a10      	ldr	r2, [pc, #64]	; (8000e6c <HAL_Init+0x50>)
 8000e2c:	698b      	ldr	r3, [r1, #24]
 8000e2e:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8000e32:	5cd3      	ldrb	r3, [r2, r3]
 8000e34:	f003 031f 	and.w	r3, r3, #31
 8000e38:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000e3a:	698b      	ldr	r3, [r1, #24]
 8000e3c:	f003 030f 	and.w	r3, r3, #15
 8000e40:	5cd3      	ldrb	r3, [r2, r3]
 8000e42:	4a0b      	ldr	r2, [pc, #44]	; (8000e70 <HAL_Init+0x54>)
 8000e44:	f003 031f 	and.w	r3, r3, #31
 8000e48:	fa20 f303 	lsr.w	r3, r0, r3
 8000e4c:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8000e4e:	4b09      	ldr	r3, [pc, #36]	; (8000e74 <HAL_Init+0x58>)
 8000e50:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e52:	2000      	movs	r0, #0
 8000e54:	f7ff ffbc 	bl	8000dd0 <HAL_InitTick>
 8000e58:	4604      	mov	r4, r0
 8000e5a:	b918      	cbnz	r0, 8000e64 <HAL_Init+0x48>
  HAL_MspInit();
 8000e5c:	f7ff fd84 	bl	8000968 <HAL_MspInit>
}
 8000e60:	4620      	mov	r0, r4
 8000e62:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000e64:	2401      	movs	r4, #1
 8000e66:	e7fb      	b.n	8000e60 <HAL_Init+0x44>
 8000e68:	58024400 	.word	0x58024400
 8000e6c:	08004b70 	.word	0x08004b70
 8000e70:	24000004 	.word	0x24000004
 8000e74:	24000000 	.word	0x24000000

08000e78 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000e78:	4a03      	ldr	r2, [pc, #12]	; (8000e88 <HAL_IncTick+0x10>)
 8000e7a:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <HAL_IncTick+0x14>)
 8000e7c:	6811      	ldr	r1, [r2, #0]
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	440b      	add	r3, r1
 8000e82:	6013      	str	r3, [r2, #0]
}
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	240005f8 	.word	0x240005f8
 8000e8c:	24000008 	.word	0x24000008

08000e90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e90:	b538      	push	{r3, r4, r5, lr}
 8000e92:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000e94:	f002 fcaa 	bl	80037ec <HAL_GetTick>
 8000e98:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e9a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000e9c:	bf1e      	ittt	ne
 8000e9e:	4b04      	ldrne	r3, [pc, #16]	; (8000eb0 <HAL_Delay+0x20>)
 8000ea0:	781b      	ldrbne	r3, [r3, #0]
 8000ea2:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ea4:	f002 fca2 	bl	80037ec <HAL_GetTick>
 8000ea8:	1b43      	subs	r3, r0, r5
 8000eaa:	42a3      	cmp	r3, r4
 8000eac:	d3fa      	bcc.n	8000ea4 <HAL_Delay+0x14>
  {
  }
}
 8000eae:	bd38      	pop	{r3, r4, r5, pc}
 8000eb0:	24000008 	.word	0x24000008

08000eb4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb4:	4907      	ldr	r1, [pc, #28]	; (8000ed4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eb6:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb8:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ebe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000ec2:	0412      	lsls	r2, r2, #16
 8000ec4:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ec6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ec8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000ed0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000ed2:	4770      	bx	lr
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ed8:	4b16      	ldr	r3, [pc, #88]	; (8000f34 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eda:	b530      	push	{r4, r5, lr}
 8000edc:	68dc      	ldr	r4, [r3, #12]
 8000ede:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ee2:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ee6:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ee8:	2d04      	cmp	r5, #4
 8000eea:	bf28      	it	cs
 8000eec:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eee:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef0:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ef4:	bf8c      	ite	hi
 8000ef6:	3c03      	subhi	r4, #3
 8000ef8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000efa:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 8000efe:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f00:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f04:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f08:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f0c:	fa01 f104 	lsl.w	r1, r1, r4
 8000f10:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f14:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000f18:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8000f1a:	db06      	blt.n	8000f2a <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000f20:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000f24:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000f28:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2a:	f000 000f 	and.w	r0, r0, #15
 8000f2e:	4a02      	ldr	r2, [pc, #8]	; (8000f38 <HAL_NVIC_SetPriority+0x60>)
 8000f30:	5413      	strb	r3, [r2, r0]
 8000f32:	e7f9      	b.n	8000f28 <HAL_NVIC_SetPriority+0x50>
 8000f34:	e000ed00 	.word	0xe000ed00
 8000f38:	e000ed14 	.word	0xe000ed14

08000f3c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f3c:	3801      	subs	r0, #1
 8000f3e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000f42:	d20b      	bcs.n	8000f5c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f44:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f48:	4a05      	ldr	r2, [pc, #20]	; (8000f60 <HAL_SYSTICK_Config+0x24>)
 8000f4a:	21f0      	movs	r1, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f4c:	6158      	str	r0, [r3, #20]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f4e:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f50:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f54:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f56:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f58:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f5a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000f5c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000f5e:	4770      	bx	lr
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <HAL_FLASH_Unlock>:
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8000f64:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <HAL_FLASH_Unlock+0x44>)
 8000f66:	68da      	ldr	r2, [r3, #12]
 8000f68:	07d2      	lsls	r2, r2, #31
 8000f6a:	d406      	bmi.n	8000f7a <HAL_FLASH_Unlock+0x16>
      return HAL_ERROR;
    }
  }

#if defined (DUAL_BANK)
  if(READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 8000f6c:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <HAL_FLASH_Unlock+0x44>)
 8000f6e:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
 8000f72:	f010 0001 	ands.w	r0, r0, #1
 8000f76:	d10a      	bne.n	8000f8e <HAL_FLASH_Unlock+0x2a>
 8000f78:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 8000f7a:	4a0c      	ldr	r2, [pc, #48]	; (8000fac <HAL_FLASH_Unlock+0x48>)
 8000f7c:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 8000f7e:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8000f82:	605a      	str	r2, [r3, #4]
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	07db      	lsls	r3, r3, #31
 8000f88:	d5f0      	bpl.n	8000f6c <HAL_FLASH_Unlock+0x8>
      return HAL_ERROR;
 8000f8a:	2001      	movs	r0, #1
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
}
 8000f8c:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
 8000f8e:	4a07      	ldr	r2, [pc, #28]	; (8000fac <HAL_FLASH_Unlock+0x48>)
 8000f90:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
 8000f94:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8000f98:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 8000f9c:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
 8000fa0:	f000 0001 	and.w	r0, r0, #1
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	52002000 	.word	0x52002000
 8000fac:	45670123 	.word	0x45670123

08000fb0 <HAL_FLASH_Lock>:
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
  /* Set the LOCK Bit to lock the FLASH Bank1 Control Register access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
 8000fb0:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <HAL_FLASH_Lock+0x2c>)
 8000fb2:	68da      	ldr	r2, [r3, #12]
 8000fb4:	f042 0201 	orr.w	r2, r2, #1
 8000fb8:	60da      	str	r2, [r3, #12]

  /* Verify Flash Bank1 is locked */
  if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) == 0U)
 8000fba:	68da      	ldr	r2, [r3, #12]
 8000fbc:	07d2      	lsls	r2, r2, #31
 8000fbe:	d50b      	bpl.n	8000fd8 <HAL_FLASH_Lock+0x28>
    return HAL_ERROR;
  }

#if defined (DUAL_BANK)
  /* Set the LOCK Bit to lock the FLASH Bank2 Control Register access */
  SET_BIT(FLASH->CR2, FLASH_CR_LOCK);
 8000fc0:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8000fc4:	f042 0201 	orr.w	r2, r2, #1
 8000fc8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  /* Verify Flash Bank2 is locked */
  if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) == 0U)
 8000fcc:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
 8000fd0:	43c0      	mvns	r0, r0
 8000fd2:	f000 0001 	and.w	r0, r0, #1
 8000fd6:	4770      	bx	lr
    return HAL_ERROR;
 8000fd8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }
#endif /* DUAL_BANK */

  return HAL_OK;
}
 8000fda:	4770      	bx	lr
 8000fdc:	52002000 	.word	0x52002000

08000fe0 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 8000fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fe4:	460c      	mov	r4, r1
 8000fe6:	4605      	mov	r5, r0
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
  uint32_t errorflag = 0;
  uint32_t tickstart = HAL_GetTick();
 8000fe8:	f002 fc00 	bl	80037ec <HAL_GetTick>
#if defined (DUAL_BANK)

  if (Bank == FLASH_BANK_2)
  {
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
 8000fec:	4e2b      	ldr	r6, [pc, #172]	; (800109c <FLASH_WaitForLastOperation+0xbc>)
 8000fee:	2c02      	cmp	r4, #2
  uint32_t tickstart = HAL_GetTick();
 8000ff0:	4607      	mov	r7, r0
  if (Bank == FLASH_BANK_2)
 8000ff2:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80010a0 <FLASH_WaitForLastOperation+0xc0>
    bsyflag = FLASH_FLAG_QW_BANK2;
 8000ff6:	bf18      	it	ne
 8000ff8:	2604      	movne	r6, #4
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8000ffa:	2e04      	cmp	r6, #4
 8000ffc:	d124      	bne.n	8001048 <FLASH_WaitForLastOperation+0x68>
 8000ffe:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8001002:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001006:	b9a3      	cbnz	r3, 8001032 <FLASH_WaitForLastOperation+0x52>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 8001008:	2c01      	cmp	r4, #1
 800100a:	4b25      	ldr	r3, [pc, #148]	; (80010a0 <FLASH_WaitForLastOperation+0xc0>)
 800100c:	4a25      	ldr	r2, [pc, #148]	; (80010a4 <FLASH_WaitForLastOperation+0xc4>)
 800100e:	d125      	bne.n	800105c <FLASH_WaitForLastOperation+0x7c>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 8001010:	691b      	ldr	r3, [r3, #16]
 8001012:	4013      	ands	r3, r2
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 8001014:	f033 4100 	bics.w	r1, r3, #2147483648	; 0x80000000
 8001018:	d029      	beq.n	800106e <FLASH_WaitForLastOperation+0x8e>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 800101a:	4823      	ldr	r0, [pc, #140]	; (80010a8 <FLASH_WaitForLastOperation+0xc8>)

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 800101c:	2b00      	cmp	r3, #0
    pFlash.ErrorCode |= errorflag;
 800101e:	6982      	ldr	r2, [r0, #24]
 8001020:	ea42 0203 	orr.w	r2, r2, r3
 8001024:	6182      	str	r2, [r0, #24]
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 8001026:	4a1e      	ldr	r2, [pc, #120]	; (80010a0 <FLASH_WaitForLastOperation+0xc0>)
 8001028:	db1e      	blt.n	8001068 <FLASH_WaitForLastOperation+0x88>
 800102a:	6153      	str	r3, [r2, #20]

    return HAL_ERROR;
 800102c:	2001      	movs	r0, #1
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
}
 800102e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001032:	1c6b      	adds	r3, r5, #1
 8001034:	d0e1      	beq.n	8000ffa <FLASH_WaitForLastOperation+0x1a>
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001036:	f002 fbd9 	bl	80037ec <HAL_GetTick>
 800103a:	1bc0      	subs	r0, r0, r7
 800103c:	42a8      	cmp	r0, r5
 800103e:	d801      	bhi.n	8001044 <FLASH_WaitForLastOperation+0x64>
 8001040:	2d00      	cmp	r5, #0
 8001042:	d1da      	bne.n	8000ffa <FLASH_WaitForLastOperation+0x1a>
        return HAL_TIMEOUT;
 8001044:	2003      	movs	r0, #3
 8001046:	e7f2      	b.n	800102e <FLASH_WaitForLastOperation+0x4e>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8001048:	f8d8 3110 	ldr.w	r3, [r8, #272]	; 0x110
 800104c:	ea26 0303 	bic.w	r3, r6, r3
 8001050:	f013 0f04 	tst.w	r3, #4
 8001054:	bf0c      	ite	eq
 8001056:	2301      	moveq	r3, #1
 8001058:	2300      	movne	r3, #0
 800105a:	e7d4      	b.n	8001006 <FLASH_WaitForLastOperation+0x26>
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 800105c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8001060:	4013      	ands	r3, r2
 8001062:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001066:	e7d5      	b.n	8001014 <FLASH_WaitForLastOperation+0x34>
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 8001068:	f8c2 1114 	str.w	r1, [r2, #276]	; 0x114
 800106c:	e7de      	b.n	800102c <FLASH_WaitForLastOperation+0x4c>
  if(Bank == FLASH_BANK_1)
 800106e:	2c01      	cmp	r4, #1
 8001070:	4a0b      	ldr	r2, [pc, #44]	; (80010a0 <FLASH_WaitForLastOperation+0xc0>)
 8001072:	d108      	bne.n	8001086 <FLASH_WaitForLastOperation+0xa6>
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 8001074:	6910      	ldr	r0, [r2, #16]
 8001076:	f410 3080 	ands.w	r0, r0, #65536	; 0x10000
 800107a:	d0d8      	beq.n	800102e <FLASH_WaitForLastOperation+0x4e>
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 800107c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001080:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 8001082:	4608      	mov	r0, r1
 8001084:	e7d3      	b.n	800102e <FLASH_WaitForLastOperation+0x4e>
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_EOP_BANK2))
 8001086:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
 800108a:	f410 3080 	ands.w	r0, r0, #65536	; 0x10000
 800108e:	d0ce      	beq.n	800102e <FLASH_WaitForLastOperation+0x4e>
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 8001090:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001094:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
 8001098:	e7f3      	b.n	8001082 <FLASH_WaitForLastOperation+0xa2>
 800109a:	bf00      	nop
 800109c:	80000004 	.word	0x80000004
 80010a0:	52002000 	.word	0x52002000
 80010a4:	17ae0000 	.word	0x17ae0000
 80010a8:	240005fc 	.word	0x240005fc

080010ac <HAL_FLASH_Program>:
{
 80010ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 80010b0:	4f37      	ldr	r7, [pc, #220]	; (8001190 <HAL_FLASH_Program+0xe4>)
{
 80010b2:	4606      	mov	r6, r0
 80010b4:	460c      	mov	r4, r1
 80010b6:	4690      	mov	r8, r2
  __HAL_LOCK(&pFlash);
 80010b8:	7d3b      	ldrb	r3, [r7, #20]
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d066      	beq.n	800118c <HAL_FLASH_Program+0xe0>
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
 80010be:	f101 4378 	add.w	r3, r1, #4160749568	; 0xf8000000
  __HAL_LOCK(&pFlash);
 80010c2:	2001      	movs	r0, #1
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
 80010c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
  __HAL_LOCK(&pFlash);
 80010c8:	7538      	strb	r0, [r7, #20]
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
 80010ca:	d33b      	bcc.n	8001144 <HAL_FLASH_Program+0x98>
 80010cc:	f101 4377 	add.w	r3, r1, #4143972352	; 0xf7000000
 80010d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010d8:	d334      	bcc.n	8001144 <HAL_FLASH_Program+0x98>
  else if(IS_FLASH_PROGRAM_ADDRESS_BANK2(FlashAddress))
 80010da:	f1a1 6301 	sub.w	r3, r1, #135266304	; 0x8100000
 80010de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80010e2:	d22d      	bcs.n	8001140 <HAL_FLASH_Program+0x94>
    bank = FLASH_BANK_2;
 80010e4:	2502      	movs	r5, #2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80010e6:	2300      	movs	r3, #0
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 80010e8:	4629      	mov	r1, r5
 80010ea:	f24c 3050 	movw	r0, #50000	; 0xc350
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80010ee:	61bb      	str	r3, [r7, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 80010f0:	f7ff ff76 	bl	8000fe0 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80010f4:	bb10      	cbnz	r0, 800113c <HAL_FLASH_Program+0x90>
    if(bank == FLASH_BANK_1)
 80010f6:	2d01      	cmp	r5, #1
 80010f8:	4b26      	ldr	r3, [pc, #152]	; (8001194 <HAL_FLASH_Program+0xe8>)
 80010fa:	d12a      	bne.n	8001152 <HAL_FLASH_Program+0xa6>
      if (TypeProgram == FLASH_TYPEPROGRAM_OTPWORD)
 80010fc:	2e02      	cmp	r6, #2
 80010fe:	d123      	bne.n	8001148 <HAL_FLASH_Program+0x9c>
        SET_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OTP);
 8001100:	699a      	ldr	r2, [r3, #24]
 8001102:	f042 0220 	orr.w	r2, r2, #32
 8001106:	619a      	str	r2, [r3, #24]
  __ASM volatile ("isb 0xF":::"memory");
 8001108:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
 800110c:	f3bf 8f4f 	dsb	sy
    if (TypeProgram == FLASH_TYPEPROGRAM_OTPWORD)
 8001110:	2e02      	cmp	r6, #2
 8001112:	d125      	bne.n	8001160 <HAL_FLASH_Program+0xb4>
      *(__IO uint16_t *)FlashAddress = *(__IO uint16_t*)DataAddress;
 8001114:	f8b8 3000 	ldrh.w	r3, [r8]
 8001118:	b29b      	uxth	r3, r3
 800111a:	8023      	strh	r3, [r4, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800111c:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
 8001120:	f3bf 8f4f 	dsb	sy
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8001124:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001128:	4629      	mov	r1, r5
 800112a:	f7ff ff59 	bl	8000fe0 <FLASH_WaitForLastOperation>
    if (TypeProgram == FLASH_TYPEPROGRAM_OTPWORD)
 800112e:	2e02      	cmp	r6, #2
 8001130:	4b18      	ldr	r3, [pc, #96]	; (8001194 <HAL_FLASH_Program+0xe8>)
 8001132:	d11d      	bne.n	8001170 <HAL_FLASH_Program+0xc4>
      CLEAR_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OTP);
 8001134:	699a      	ldr	r2, [r3, #24]
 8001136:	f022 0220 	bic.w	r2, r2, #32
 800113a:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(&pFlash);
 800113c:	2300      	movs	r3, #0
 800113e:	753b      	strb	r3, [r7, #20]
}
 8001140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bank = FLASH_BANK_1;
 8001144:	4605      	mov	r5, r0
 8001146:	e7ce      	b.n	80010e6 <HAL_FLASH_Program+0x3a>
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 8001148:	68da      	ldr	r2, [r3, #12]
 800114a:	f042 0202 	orr.w	r2, r2, #2
 800114e:	60da      	str	r2, [r3, #12]
 8001150:	e7da      	b.n	8001108 <HAL_FLASH_Program+0x5c>
      SET_BIT(FLASH->CR2, FLASH_CR_PG);
 8001152:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8001156:	f042 0202 	orr.w	r2, r2, #2
 800115a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 800115e:	e7d3      	b.n	8001108 <HAL_FLASH_Program+0x5c>
 8001160:	2300      	movs	r3, #0
        *dest_addr = *src_addr;
 8001162:	f858 2003 	ldr.w	r2, [r8, r3]
 8001166:	50e2      	str	r2, [r4, r3]
     } while (row_index != 0U);
 8001168:	3304      	adds	r3, #4
 800116a:	2b10      	cmp	r3, #16
 800116c:	d1f9      	bne.n	8001162 <HAL_FLASH_Program+0xb6>
 800116e:	e7d5      	b.n	800111c <HAL_FLASH_Program+0x70>
      if(bank == FLASH_BANK_1)
 8001170:	2d01      	cmp	r5, #1
 8001172:	d104      	bne.n	800117e <HAL_FLASH_Program+0xd2>
        CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 8001174:	68da      	ldr	r2, [r3, #12]
 8001176:	f022 0202 	bic.w	r2, r2, #2
 800117a:	60da      	str	r2, [r3, #12]
 800117c:	e7de      	b.n	800113c <HAL_FLASH_Program+0x90>
        CLEAR_BIT(FLASH->CR2, FLASH_CR_PG);
 800117e:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8001182:	f022 0202 	bic.w	r2, r2, #2
 8001186:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 800118a:	e7d7      	b.n	800113c <HAL_FLASH_Program+0x90>
  __HAL_LOCK(&pFlash);
 800118c:	2002      	movs	r0, #2
 800118e:	e7d7      	b.n	8001140 <HAL_FLASH_Program+0x94>
 8001190:	240005fc 	.word	0x240005fc
 8001194:	52002000 	.word	0x52002000

08001198 <FLASH_MassErase.constprop.0>:
#endif /* FLASH_CR_PSIZE */
  assert_param(IS_FLASH_BANK(Banks));

#if defined (DUAL_BANK)
  /* Flash Mass Erase */
  if((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 8001198:	f000 0303 	and.w	r3, r0, #3
 800119c:	2b03      	cmp	r3, #3
 800119e:	d105      	bne.n	80011ac <FLASH_MassErase.constprop.0+0x14>
    FLASH->CR1 |= VoltageRange;
    FLASH->CR2 |= VoltageRange;
#endif /* FLASH_CR_PSIZE */

    /* Set Mass Erase Bit */
    FLASH->OPTCR |= FLASH_OPTCR_MER;
 80011a0:	4a0b      	ldr	r2, [pc, #44]	; (80011d0 <FLASH_MassErase.constprop.0+0x38>)
 80011a2:	6993      	ldr	r3, [r2, #24]
 80011a4:	f043 0310 	orr.w	r3, r3, #16
 80011a8:	6193      	str	r3, [r2, #24]
 80011aa:	4770      	bx	lr
  }
  else
#endif /* DUAL_BANK */
  {
    /* Proceed to erase Flash Bank  */
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80011ac:	07c2      	lsls	r2, r0, #31
 80011ae:	d504      	bpl.n	80011ba <FLASH_MassErase.constprop.0+0x22>
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
      FLASH->CR1 |=  VoltageRange;
#endif /* FLASH_CR_PSIZE */

      /* Erase Bank1 */
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 80011b0:	4a07      	ldr	r2, [pc, #28]	; (80011d0 <FLASH_MassErase.constprop.0+0x38>)
 80011b2:	68d3      	ldr	r3, [r2, #12]
 80011b4:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80011b8:	60d3      	str	r3, [r2, #12]
    }

#if defined (DUAL_BANK)
    if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 80011ba:	0783      	lsls	r3, r0, #30
 80011bc:	d506      	bpl.n	80011cc <FLASH_MassErase.constprop.0+0x34>
      FLASH->CR2 &= (~FLASH_CR_PSIZE);
      FLASH->CR2 |= VoltageRange;
#endif /* FLASH_CR_PSIZE */

      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
 80011be:	4a04      	ldr	r2, [pc, #16]	; (80011d0 <FLASH_MassErase.constprop.0+0x38>)
 80011c0:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
 80011c4:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80011c8:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
    }
#endif /* DUAL_BANK */
  }
}
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	52002000 	.word	0x52002000

080011d4 <FLASH_Erase_Sector>:
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80011d4:	07ca      	lsls	r2, r1, #31
 80011d6:	d50a      	bpl.n	80011ee <FLASH_Erase_Sector+0x1a>
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#else
    /* Reset Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_SNB);
 80011d8:	4a0e      	ldr	r2, [pc, #56]	; (8001214 <FLASH_Erase_Sector+0x40>)
 80011da:	68d3      	ldr	r3, [r2, #12]
 80011dc:	f423 53fe 	bic.w	r3, r3, #8128	; 0x1fc0
 80011e0:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 80011e2:	68d3      	ldr	r3, [r2, #12]
 80011e4:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80011e8:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 80011ec:	60d3      	str	r3, [r2, #12]
#endif /* FLASH_CR_PSIZE */
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 80011ee:	078b      	lsls	r3, r1, #30
 80011f0:	d50e      	bpl.n	8001210 <FLASH_Erase_Sector+0x3c>
    FLASH->CR2 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);

    FLASH->CR2 |= (FLASH_CR_SER | VoltageRange  | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#else
    /* Reset Sector Number for Bank2 */
    FLASH->CR2 &= ~(FLASH_CR_SNB);
 80011f2:	4a08      	ldr	r2, [pc, #32]	; (8001214 <FLASH_Erase_Sector+0x40>)
 80011f4:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
 80011f8:	f423 53fe 	bic.w	r3, r3, #8128	; 0x1fc0
 80011fc:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8001200:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
 8001204:	ea43 1080 	orr.w	r0, r3, r0, lsl #6
 8001208:	f040 0024 	orr.w	r0, r0, #36	; 0x24
 800120c:	f8c2 010c 	str.w	r0, [r2, #268]	; 0x10c
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	52002000 	.word	0x52002000

08001218 <HAL_FLASHEx_Erase>:
{
 8001218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __HAL_LOCK(&pFlash);
 800121c:	4e43      	ldr	r6, [pc, #268]	; (800132c <HAL_FLASHEx_Erase+0x114>)
{
 800121e:	4605      	mov	r5, r0
 8001220:	460f      	mov	r7, r1
  __HAL_LOCK(&pFlash);
 8001222:	7d33      	ldrb	r3, [r6, #20]
 8001224:	2b01      	cmp	r3, #1
 8001226:	d07f      	beq.n	8001328 <HAL_FLASHEx_Erase+0x110>
 8001228:	2101      	movs	r1, #1
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800122a:	2300      	movs	r3, #0
  __HAL_LOCK(&pFlash);
 800122c:	7531      	strb	r1, [r6, #20]
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800122e:	6844      	ldr	r4, [r0, #4]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001230:	61b3      	str	r3, [r6, #24]
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8001232:	400c      	ands	r4, r1
 8001234:	d006      	beq.n	8001244 <HAL_FLASHEx_Erase+0x2c>
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 8001236:	f24c 3050 	movw	r0, #50000	; 0xc350
 800123a:	f7ff fed1 	bl	8000fe0 <FLASH_WaitForLastOperation>
  HAL_StatusTypeDef status = HAL_OK;
 800123e:	1e04      	subs	r4, r0, #0
 8001240:	bf18      	it	ne
 8001242:	2401      	movne	r4, #1
  if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8001244:	686b      	ldr	r3, [r5, #4]
 8001246:	079b      	lsls	r3, r3, #30
 8001248:	d406      	bmi.n	8001258 <HAL_FLASHEx_Erase+0x40>
  if(status == HAL_OK)
 800124a:	b16c      	cbz	r4, 8001268 <HAL_FLASHEx_Erase+0x50>
      status = HAL_ERROR;
 800124c:	2401      	movs	r4, #1
  __HAL_UNLOCK(&pFlash);
 800124e:	2300      	movs	r3, #0
 8001250:	7533      	strb	r3, [r6, #20]
}
 8001252:	4620      	mov	r0, r4
 8001254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 8001258:	2102      	movs	r1, #2
 800125a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800125e:	f7ff febf 	bl	8000fe0 <FLASH_WaitForLastOperation>
 8001262:	2800      	cmp	r0, #0
 8001264:	d0f1      	beq.n	800124a <HAL_FLASHEx_Erase+0x32>
 8001266:	e7f1      	b.n	800124c <HAL_FLASHEx_Erase+0x34>
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001268:	6829      	ldr	r1, [r5, #0]
 800126a:	2901      	cmp	r1, #1
 800126c:	d124      	bne.n	80012b8 <HAL_FLASHEx_Erase+0xa0>
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 800126e:	6868      	ldr	r0, [r5, #4]
 8001270:	f7ff ff92 	bl	8001198 <FLASH_MassErase.constprop.0>
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8001274:	686b      	ldr	r3, [r5, #4]
 8001276:	07d8      	lsls	r0, r3, #31
 8001278:	d50b      	bpl.n	8001292 <HAL_FLASHEx_Erase+0x7a>
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800127a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800127e:	f7ff feaf 	bl	8000fe0 <FLASH_WaitForLastOperation>
        FLASH->CR1 &= (~FLASH_CR_BER);
 8001282:	4a2b      	ldr	r2, [pc, #172]	; (8001330 <HAL_FLASHEx_Erase+0x118>)
          status = HAL_ERROR;
 8001284:	1e04      	subs	r4, r0, #0
        FLASH->CR1 &= (~FLASH_CR_BER);
 8001286:	68d3      	ldr	r3, [r2, #12]
          status = HAL_ERROR;
 8001288:	bf18      	it	ne
 800128a:	2401      	movne	r4, #1
        FLASH->CR1 &= (~FLASH_CR_BER);
 800128c:	f023 0308 	bic.w	r3, r3, #8
 8001290:	60d3      	str	r3, [r2, #12]
      if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8001292:	686b      	ldr	r3, [r5, #4]
 8001294:	079a      	lsls	r2, r3, #30
 8001296:	d5da      	bpl.n	800124e <HAL_FLASHEx_Erase+0x36>
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 8001298:	2102      	movs	r1, #2
 800129a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800129e:	f7ff fe9f 	bl	8000fe0 <FLASH_WaitForLastOperation>
        FLASH->CR2 &= (~FLASH_CR_BER);
 80012a2:	4a23      	ldr	r2, [pc, #140]	; (8001330 <HAL_FLASHEx_Erase+0x118>)
          status = HAL_ERROR;
 80012a4:	2800      	cmp	r0, #0
        FLASH->CR2 &= (~FLASH_CR_BER);
 80012a6:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
          status = HAL_ERROR;
 80012aa:	bf18      	it	ne
 80012ac:	2401      	movne	r4, #1
        FLASH->CR2 &= (~FLASH_CR_BER);
 80012ae:	f023 0308 	bic.w	r3, r3, #8
 80012b2:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 80012b6:	e7ca      	b.n	800124e <HAL_FLASHEx_Erase+0x36>
      *SectorError = 0xFFFFFFFFU;
 80012b8:	f04f 33ff 	mov.w	r3, #4294967295
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 80012bc:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8001330 <HAL_FLASHEx_Erase+0x118>
 80012c0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8001334 <HAL_FLASHEx_Erase+0x11c>
      *SectorError = 0xFFFFFFFFU;
 80012c4:	603b      	str	r3, [r7, #0]
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 80012c6:	f8d5 a008 	ldr.w	sl, [r5, #8]
 80012ca:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 80012ce:	4413      	add	r3, r2
 80012d0:	4553      	cmp	r3, sl
 80012d2:	d9bc      	bls.n	800124e <HAL_FLASHEx_Erase+0x36>
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 80012d4:	4650      	mov	r0, sl
 80012d6:	692a      	ldr	r2, [r5, #16]
 80012d8:	6869      	ldr	r1, [r5, #4]
 80012da:	f7ff ff7b 	bl	80011d4 <FLASH_Erase_Sector>
        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80012de:	6868      	ldr	r0, [r5, #4]
 80012e0:	f010 0001 	ands.w	r0, r0, #1
 80012e4:	d00a      	beq.n	80012fc <HAL_FLASHEx_Erase+0xe4>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 80012e6:	2101      	movs	r1, #1
 80012e8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80012ec:	f7ff fe78 	bl	8000fe0 <FLASH_WaitForLastOperation>
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 80012f0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80012f4:	ea03 0309 	and.w	r3, r3, r9
 80012f8:	f8c8 300c 	str.w	r3, [r8, #12]
        if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 80012fc:	686b      	ldr	r3, [r5, #4]
 80012fe:	079b      	lsls	r3, r3, #30
 8001300:	d50a      	bpl.n	8001318 <HAL_FLASHEx_Erase+0x100>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2);
 8001302:	2102      	movs	r1, #2
 8001304:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001308:	f7ff fe6a 	bl	8000fe0 <FLASH_WaitForLastOperation>
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800130c:	f8d8 310c 	ldr.w	r3, [r8, #268]	; 0x10c
 8001310:	ea03 0309 	and.w	r3, r3, r9
 8001314:	f8c8 310c 	str.w	r3, [r8, #268]	; 0x10c
        if(status != HAL_OK)
 8001318:	b118      	cbz	r0, 8001322 <HAL_FLASHEx_Erase+0x10a>
          break;
 800131a:	4604      	mov	r4, r0
          *SectorError = sector_index;
 800131c:	f8c7 a000 	str.w	sl, [r7]
          break;
 8001320:	e795      	b.n	800124e <HAL_FLASHEx_Erase+0x36>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 8001322:	f10a 0a01 	add.w	sl, sl, #1
 8001326:	e7d0      	b.n	80012ca <HAL_FLASHEx_Erase+0xb2>
  __HAL_LOCK(&pFlash);
 8001328:	2402      	movs	r4, #2
 800132a:	e792      	b.n	8001252 <HAL_FLASHEx_Erase+0x3a>
 800132c:	240005fc 	.word	0x240005fc
 8001330:	52002000 	.word	0x52002000
 8001334:	ffffe03b 	.word	0xffffe03b

08001338 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001338:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 800133c:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800133e:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 800150c <HAL_GPIO_Init+0x1d4>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001342:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001346:	680a      	ldr	r2, [r1, #0]
 8001348:	fa32 f503 	lsrs.w	r5, r2, r3
 800134c:	d102      	bne.n	8001354 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 800134e:	b003      	add	sp, #12
 8001350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001354:	f04f 0e01 	mov.w	lr, #1
 8001358:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00U)
 800135c:	ea1e 0202 	ands.w	r2, lr, r2
 8001360:	f000 80bd 	beq.w	80014de <HAL_GPIO_Init+0x1a6>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001364:	684e      	ldr	r6, [r1, #4]
 8001366:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800136a:	f04f 0c03 	mov.w	ip, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800136e:	f006 0503 	and.w	r5, r6, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001372:	fa0c fc08 	lsl.w	ip, ip, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001376:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001378:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800137c:	2f01      	cmp	r7, #1
 800137e:	d834      	bhi.n	80013ea <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8001380:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001382:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001386:	68cf      	ldr	r7, [r1, #12]
 8001388:	fa07 f708 	lsl.w	r7, r7, r8
 800138c:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8001390:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001392:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001394:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001398:	f3c6 1700 	ubfx	r7, r6, #4, #1
 800139c:	409f      	lsls	r7, r3
 800139e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80013a2:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80013a4:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013a6:	2d02      	cmp	r5, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013a8:	ea07 0e0c 	and.w	lr, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013ac:	688f      	ldr	r7, [r1, #8]
 80013ae:	fa07 f708 	lsl.w	r7, r7, r8
 80013b2:	ea47 070e 	orr.w	r7, r7, lr
      GPIOx->PUPDR = temp;
 80013b6:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013b8:	d119      	bne.n	80013ee <HAL_GPIO_Init+0xb6>
        temp = GPIOx->AFR[position >> 3U];
 80013ba:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80013be:	f003 0b07 	and.w	fp, r3, #7
 80013c2:	f04f 0e0f 	mov.w	lr, #15
 80013c6:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 80013ca:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 80013ce:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80013d2:	fa0e fe0b 	lsl.w	lr, lr, fp
 80013d6:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80013da:	690f      	ldr	r7, [r1, #16]
 80013dc:	fa07 f70b 	lsl.w	r7, r7, fp
 80013e0:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 80013e4:	f8ca 7020 	str.w	r7, [sl, #32]
 80013e8:	e001      	b.n	80013ee <HAL_GPIO_Init+0xb6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013ea:	2d03      	cmp	r5, #3
 80013ec:	d1da      	bne.n	80013a4 <HAL_GPIO_Init+0x6c>
      temp = GPIOx->MODER;
 80013ee:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013f0:	fa05 f508 	lsl.w	r5, r5, r8
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013f4:	f416 3f40 	tst.w	r6, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80013f8:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013fc:	ea47 0705 	orr.w	r7, r7, r5
      GPIOx->MODER = temp;
 8001400:	6007      	str	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001402:	d06c      	beq.n	80014de <HAL_GPIO_Init+0x1a6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001404:	f8d9 5154 	ldr.w	r5, [r9, #340]	; 0x154
 8001408:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800140c:	f003 0c03 	and.w	ip, r3, #3
 8001410:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001414:	f045 0502 	orr.w	r5, r5, #2
 8001418:	f107 47b0 	add.w	r7, r7, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800141c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001420:	f8c9 5154 	str.w	r5, [r9, #340]	; 0x154
 8001424:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001428:	f8d9 5154 	ldr.w	r5, [r9, #340]	; 0x154
 800142c:	f005 0502 	and.w	r5, r5, #2
 8001430:	9501      	str	r5, [sp, #4]
 8001432:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001434:	fa0e f50c 	lsl.w	r5, lr, ip
        temp = SYSCFG->EXTICR[position >> 2U];
 8001438:	f8d7 8008 	ldr.w	r8, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800143c:	ea28 0e05 	bic.w	lr, r8, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001440:	4d31      	ldr	r5, [pc, #196]	; (8001508 <HAL_GPIO_Init+0x1d0>)
 8001442:	42a8      	cmp	r0, r5
 8001444:	d04d      	beq.n	80014e2 <HAL_GPIO_Init+0x1aa>
 8001446:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800144a:	42a8      	cmp	r0, r5
 800144c:	d04b      	beq.n	80014e6 <HAL_GPIO_Init+0x1ae>
 800144e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001452:	42a8      	cmp	r0, r5
 8001454:	d049      	beq.n	80014ea <HAL_GPIO_Init+0x1b2>
 8001456:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800145a:	42a8      	cmp	r0, r5
 800145c:	d047      	beq.n	80014ee <HAL_GPIO_Init+0x1b6>
 800145e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001462:	42a8      	cmp	r0, r5
 8001464:	d045      	beq.n	80014f2 <HAL_GPIO_Init+0x1ba>
 8001466:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800146a:	42a8      	cmp	r0, r5
 800146c:	d043      	beq.n	80014f6 <HAL_GPIO_Init+0x1be>
 800146e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001472:	42a8      	cmp	r0, r5
 8001474:	d041      	beq.n	80014fa <HAL_GPIO_Init+0x1c2>
 8001476:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800147a:	42a8      	cmp	r0, r5
 800147c:	d03f      	beq.n	80014fe <HAL_GPIO_Init+0x1c6>
 800147e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001482:	42a8      	cmp	r0, r5
 8001484:	d03d      	beq.n	8001502 <HAL_GPIO_Init+0x1ca>
 8001486:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800148a:	42a8      	cmp	r0, r5
 800148c:	bf0c      	ite	eq
 800148e:	2509      	moveq	r5, #9
 8001490:	250a      	movne	r5, #10
 8001492:	fa05 f50c 	lsl.w	r5, r5, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001496:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800149a:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800149e:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 80014a0:	ea6f 0702 	mvn.w	r7, r2
        temp = EXTI->RTSR1;
 80014a4:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 80014a6:	bf0c      	ite	eq
 80014a8:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80014aa:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014ac:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        EXTI->RTSR1 = temp;
 80014b0:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 80014b2:	6865      	ldr	r5, [r4, #4]
        temp &= ~(iocurrent);
 80014b4:	bf0c      	ite	eq
 80014b6:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80014b8:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014ba:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        EXTI->FTSR1 = temp;
 80014be:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
 80014c0:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
        temp &= ~(iocurrent);
 80014c4:	bf0c      	ite	eq
 80014c6:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80014c8:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014ca:	03f6      	lsls	r6, r6, #15
        EXTI_CurrentCPU->EMR1 = temp;
 80014cc:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
 80014d0:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
        temp &= ~(iocurrent);
 80014d4:	bf54      	ite	pl
 80014d6:	403d      	andpl	r5, r7
          temp |= iocurrent;
 80014d8:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
 80014da:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    position++;
 80014de:	3301      	adds	r3, #1
 80014e0:	e731      	b.n	8001346 <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80014e2:	2500      	movs	r5, #0
 80014e4:	e7d5      	b.n	8001492 <HAL_GPIO_Init+0x15a>
 80014e6:	2501      	movs	r5, #1
 80014e8:	e7d3      	b.n	8001492 <HAL_GPIO_Init+0x15a>
 80014ea:	2502      	movs	r5, #2
 80014ec:	e7d1      	b.n	8001492 <HAL_GPIO_Init+0x15a>
 80014ee:	2503      	movs	r5, #3
 80014f0:	e7cf      	b.n	8001492 <HAL_GPIO_Init+0x15a>
 80014f2:	2504      	movs	r5, #4
 80014f4:	e7cd      	b.n	8001492 <HAL_GPIO_Init+0x15a>
 80014f6:	2505      	movs	r5, #5
 80014f8:	e7cb      	b.n	8001492 <HAL_GPIO_Init+0x15a>
 80014fa:	2506      	movs	r5, #6
 80014fc:	e7c9      	b.n	8001492 <HAL_GPIO_Init+0x15a>
 80014fe:	2507      	movs	r5, #7
 8001500:	e7c7      	b.n	8001492 <HAL_GPIO_Init+0x15a>
 8001502:	2508      	movs	r5, #8
 8001504:	e7c5      	b.n	8001492 <HAL_GPIO_Init+0x15a>
 8001506:	bf00      	nop
 8001508:	58020000 	.word	0x58020000
 800150c:	58024400 	.word	0x58024400

08001510 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8001514:	2200      	movs	r2, #0
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001516:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8001644 <HAL_GPIO_DeInit+0x134>
 800151a:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8001648 <HAL_GPIO_DeInit+0x138>
 800151e:	f8df a12c 	ldr.w	sl, [pc, #300]	; 800164c <HAL_GPIO_DeInit+0x13c>
 8001522:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8001650 <HAL_GPIO_DeInit+0x140>
  while ((GPIO_Pin >> position) != 0x00U)
 8001526:	fa31 f302 	lsrs.w	r3, r1, r2
 800152a:	d101      	bne.n	8001530 <HAL_GPIO_DeInit+0x20>
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
    }

    position++;
  }
}
 800152c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = GPIO_Pin & (1UL << position) ;
 8001530:	2301      	movs	r3, #1
 8001532:	fa03 fc02 	lsl.w	ip, r3, r2
    if (iocurrent != 0x00U)
 8001536:	ea1c 0601 	ands.w	r6, ip, r1
 800153a:	d06d      	beq.n	8001618 <HAL_GPIO_DeInit+0x108>
      tmp = SYSCFG->EXTICR[position >> 2U];
 800153c:	f022 0403 	bic.w	r4, r2, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8001540:	f002 0703 	and.w	r7, r2, #3
 8001544:	250f      	movs	r5, #15
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001546:	4b3e      	ldr	r3, [pc, #248]	; (8001640 <HAL_GPIO_DeInit+0x130>)
 8001548:	f104 44b0 	add.w	r4, r4, #1476395008	; 0x58000000
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800154c:	00bf      	lsls	r7, r7, #2
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800154e:	4298      	cmp	r0, r3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8001550:	fa05 f507 	lsl.w	r5, r5, r7
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001554:	f8d4 e408 	ldr.w	lr, [r4, #1032]	; 0x408
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8001558:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800155c:	ea05 0e0e 	and.w	lr, r5, lr
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001560:	d05c      	beq.n	800161c <HAL_GPIO_DeInit+0x10c>
 8001562:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001566:	4298      	cmp	r0, r3
 8001568:	d05a      	beq.n	8001620 <HAL_GPIO_DeInit+0x110>
 800156a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800156e:	4298      	cmp	r0, r3
 8001570:	d058      	beq.n	8001624 <HAL_GPIO_DeInit+0x114>
 8001572:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001576:	4298      	cmp	r0, r3
 8001578:	d056      	beq.n	8001628 <HAL_GPIO_DeInit+0x118>
 800157a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800157e:	4298      	cmp	r0, r3
 8001580:	d054      	beq.n	800162c <HAL_GPIO_DeInit+0x11c>
 8001582:	4540      	cmp	r0, r8
 8001584:	d054      	beq.n	8001630 <HAL_GPIO_DeInit+0x120>
 8001586:	4548      	cmp	r0, r9
 8001588:	d054      	beq.n	8001634 <HAL_GPIO_DeInit+0x124>
 800158a:	4550      	cmp	r0, sl
 800158c:	d054      	beq.n	8001638 <HAL_GPIO_DeInit+0x128>
 800158e:	4558      	cmp	r0, fp
 8001590:	d054      	beq.n	800163c <HAL_GPIO_DeInit+0x12c>
 8001592:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8001596:	4298      	cmp	r0, r3
 8001598:	bf0c      	ite	eq
 800159a:	2309      	moveq	r3, #9
 800159c:	230a      	movne	r3, #10
 800159e:	40bb      	lsls	r3, r7
 80015a0:	4573      	cmp	r3, lr
 80015a2:	d119      	bne.n	80015d8 <HAL_GPIO_DeInit+0xc8>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80015a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015a8:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
 80015ac:	ea27 0706 	bic.w	r7, r7, r6
 80015b0:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80015b4:	f8d3 7084 	ldr.w	r7, [r3, #132]	; 0x84
 80015b8:	ea27 0706 	bic.w	r7, r7, r6
 80015bc:	f8c3 7084 	str.w	r7, [r3, #132]	; 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 80015c0:	685f      	ldr	r7, [r3, #4]
 80015c2:	ea27 0706 	bic.w	r7, r7, r6
 80015c6:	605f      	str	r7, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80015c8:	681f      	ldr	r7, [r3, #0]
 80015ca:	ea27 0606 	bic.w	r6, r7, r6
 80015ce:	601e      	str	r6, [r3, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80015d0:	68a3      	ldr	r3, [r4, #8]
 80015d2:	ea23 0305 	bic.w	r3, r3, r5
 80015d6:	60a3      	str	r3, [r4, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80015d8:	2503      	movs	r5, #3
 80015da:	0053      	lsls	r3, r2, #1
 80015dc:	6804      	ldr	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80015de:	f002 0707 	and.w	r7, r2, #7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80015e2:	fa05 f303 	lsl.w	r3, r5, r3
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80015e6:	260f      	movs	r6, #15
 80015e8:	00bf      	lsls	r7, r7, #2
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80015ea:	431c      	orrs	r4, r3
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80015ec:	40be      	lsls	r6, r7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80015ee:	6004      	str	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80015f0:	fa22 f405 	lsr.w	r4, r2, r5
 80015f4:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 80015f8:	6a25      	ldr	r5, [r4, #32]
 80015fa:	ea25 0606 	bic.w	r6, r5, r6
 80015fe:	6226      	str	r6, [r4, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001600:	68c4      	ldr	r4, [r0, #12]
 8001602:	ea24 0403 	bic.w	r4, r4, r3
 8001606:	60c4      	str	r4, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001608:	6844      	ldr	r4, [r0, #4]
 800160a:	ea24 040c 	bic.w	r4, r4, ip
 800160e:	6044      	str	r4, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001610:	6884      	ldr	r4, [r0, #8]
 8001612:	ea24 0303 	bic.w	r3, r4, r3
 8001616:	6083      	str	r3, [r0, #8]
    position++;
 8001618:	3201      	adds	r2, #1
 800161a:	e784      	b.n	8001526 <HAL_GPIO_DeInit+0x16>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800161c:	2300      	movs	r3, #0
 800161e:	e7be      	b.n	800159e <HAL_GPIO_DeInit+0x8e>
 8001620:	2301      	movs	r3, #1
 8001622:	e7bc      	b.n	800159e <HAL_GPIO_DeInit+0x8e>
 8001624:	2302      	movs	r3, #2
 8001626:	e7ba      	b.n	800159e <HAL_GPIO_DeInit+0x8e>
 8001628:	2303      	movs	r3, #3
 800162a:	e7b8      	b.n	800159e <HAL_GPIO_DeInit+0x8e>
 800162c:	2304      	movs	r3, #4
 800162e:	e7b6      	b.n	800159e <HAL_GPIO_DeInit+0x8e>
 8001630:	2305      	movs	r3, #5
 8001632:	e7b4      	b.n	800159e <HAL_GPIO_DeInit+0x8e>
 8001634:	2306      	movs	r3, #6
 8001636:	e7b2      	b.n	800159e <HAL_GPIO_DeInit+0x8e>
 8001638:	2307      	movs	r3, #7
 800163a:	e7b0      	b.n	800159e <HAL_GPIO_DeInit+0x8e>
 800163c:	2308      	movs	r3, #8
 800163e:	e7ae      	b.n	800159e <HAL_GPIO_DeInit+0x8e>
 8001640:	58020000 	.word	0x58020000
 8001644:	58021400 	.word	0x58021400
 8001648:	58021800 	.word	0x58021800
 800164c:	58021c00 	.word	0x58021c00
 8001650:	58022000 	.word	0x58022000

08001654 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001654:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001656:	4604      	mov	r4, r0
{
 8001658:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 800165a:	b360      	cbz	r0, 80016b6 <HAL_PCD_Init+0x62>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800165c:	f890 34bd 	ldrb.w	r3, [r0, #1213]	; 0x4bd
  USBx = hpcd->Instance;
 8001660:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001662:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001666:	b91b      	cbnz	r3, 8001670 <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001668:	f880 24bc 	strb.w	r2, [r0, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800166c:	f7ff f98e 	bl	800098c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001670:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001672:	466e      	mov	r6, sp
 8001674:	1d27      	adds	r7, r4, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001676:	f884 34bd 	strb.w	r3, [r4, #1213]	; 0x4bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800167a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  __HAL_PCD_DISABLE(hpcd);
 800167c:	4625      	mov	r5, r4
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800167e:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_PCD_DISABLE(hpcd);
 8001682:	f855 0b10 	ldr.w	r0, [r5], #16
    hpcd->Init.dma_enable = 0U;
 8001686:	bf08      	it	eq
 8001688:	6123      	streq	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 800168a:	f001 f9e7 	bl	8002a5c <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800168e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001690:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001692:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001694:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001696:	e895 0003 	ldmia.w	r5, {r0, r1}
 800169a:	4625      	mov	r5, r4
 800169c:	e886 0003 	stmia.w	r6, {r0, r1}
 80016a0:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80016a4:	f855 0b10 	ldr.w	r0, [r5], #16
 80016a8:	f001 f918 	bl	80028dc <USB_CoreInit>
 80016ac:	4606      	mov	r6, r0
 80016ae:	b120      	cbz	r0, 80016ba <HAL_PCD_Init+0x66>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016b0:	2302      	movs	r3, #2
 80016b2:	f884 34bd 	strb.w	r3, [r4, #1213]	; 0x4bd
    return HAL_ERROR;
 80016b6:	2501      	movs	r5, #1
 80016b8:	e052      	b.n	8001760 <HAL_PCD_Init+0x10c>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80016ba:	4601      	mov	r1, r0
 80016bc:	6820      	ldr	r0, [r4, #0]
 80016be:	f001 f9d3 	bl	8002a68 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016c2:	4630      	mov	r0, r6
 80016c4:	f8d4 c004 	ldr.w	ip, [r4, #4]
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80016c8:	2624      	movs	r6, #36	; 0x24
 80016ca:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80016ce:	4601      	mov	r1, r0
 80016d0:	b2c2      	uxtb	r2, r0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016d2:	3001      	adds	r0, #1
 80016d4:	4594      	cmp	ip, r2
 80016d6:	d81b      	bhi.n	8001710 <HAL_PCD_Init+0xbc>
 80016d8:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80016da:	2624      	movs	r6, #36	; 0x24
 80016dc:	4619      	mov	r1, r3
 80016de:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016e0:	3301      	adds	r3, #1
 80016e2:	4584      	cmp	ip, r0
 80016e4:	d822      	bhi.n	800172c <HAL_PCD_Init+0xd8>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016e6:	466e      	mov	r6, sp
 80016e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016ea:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80016ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016ee:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80016f0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80016f4:	e886 0003 	stmia.w	r6, {r0, r1}
 80016f8:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80016fc:	6820      	ldr	r0, [r4, #0]
 80016fe:	f001 fa33 	bl	8002b68 <USB_DevInit>
 8001702:	2301      	movs	r3, #1
 8001704:	4605      	mov	r5, r0
 8001706:	b1f0      	cbz	r0, 8001746 <HAL_PCD_Init+0xf2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001708:	2202      	movs	r2, #2
 800170a:	f884 24bd 	strb.w	r2, [r4, #1213]	; 0x4bd
    return HAL_ERROR;
 800170e:	e7d2      	b.n	80016b6 <HAL_PCD_Init+0x62>
    hpcd->IN_ep[i].is_in = 1U;
 8001710:	fb06 4302 	mla	r3, r6, r2, r4
 8001714:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8001718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 800171c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001720:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    hpcd->IN_ep[i].xfer_len = 0U;
 8001724:	6559      	str	r1, [r3, #84]	; 0x54
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001726:	e9c3 1112 	strd	r1, r1, [r3, #72]	; 0x48
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800172a:	e7d1      	b.n	80016d0 <HAL_PCD_Init+0x7c>
    hpcd->OUT_ep[i].is_in = 0U;
 800172c:	fb06 4200 	mla	r2, r6, r0, r4
 8001730:	f882 127d 	strb.w	r1, [r2, #637]	; 0x27d
    hpcd->OUT_ep[i].num = i;
 8001734:	f882 027c 	strb.w	r0, [r2, #636]	; 0x27c
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001738:	f882 1280 	strb.w	r1, [r2, #640]	; 0x280
    hpcd->OUT_ep[i].xfer_len = 0U;
 800173c:	f8c2 1294 	str.w	r1, [r2, #660]	; 0x294
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001740:	e9c2 11a2 	strd	r1, r1, [r2, #648]	; 0x288
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001744:	e7cb      	b.n	80016de <HAL_PCD_Init+0x8a>
  }

  hpcd->USB_Address = 0U;
 8001746:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800174a:	f884 34bd 	strb.w	r3, [r4, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800174e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001750:	2b01      	cmp	r3, #1
 8001752:	d102      	bne.n	800175a <HAL_PCD_Init+0x106>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001754:	4620      	mov	r0, r4
 8001756:	f000 fd67 	bl	8002228 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800175a:	6820      	ldr	r0, [r4, #0]
 800175c:	f001 fdc6 	bl	80032ec <USB_DevDisconnect>

  return HAL_OK;
}
 8001760:	4628      	mov	r0, r5
 8001762:	b00b      	add	sp, #44	; 0x2c
 8001764:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001766 <HAL_PCD_DeInit>:
  * @brief  DeInitializes the PCD peripheral.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DeInit(PCD_HandleTypeDef *hpcd)
{
 8001766:	b538      	push	{r3, r4, r5, lr}
  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001768:	4604      	mov	r4, r0
 800176a:	b910      	cbnz	r0, 8001772 <HAL_PCD_DeInit+0xc>
  {
    return HAL_ERROR;
 800176c:	2501      	movs	r5, #1
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  hpcd->State = HAL_PCD_STATE_RESET;

  return HAL_OK;
}
 800176e:	4628      	mov	r0, r5
 8001770:	bd38      	pop	{r3, r4, r5, pc}
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001772:	2303      	movs	r3, #3
 8001774:	f880 34bd 	strb.w	r3, [r0, #1213]	; 0x4bd
  if (USB_StopDevice(hpcd->Instance) != HAL_OK)
 8001778:	6800      	ldr	r0, [r0, #0]
 800177a:	f001 fd79 	bl	8003270 <USB_StopDevice>
 800177e:	4605      	mov	r5, r0
 8001780:	2800      	cmp	r0, #0
 8001782:	d1f3      	bne.n	800176c <HAL_PCD_DeInit+0x6>
  HAL_PCD_MspDeInit(hpcd);
 8001784:	4620      	mov	r0, r4
 8001786:	f7ff f9b5 	bl	8000af4 <HAL_PCD_MspDeInit>
  hpcd->State = HAL_PCD_STATE_RESET;
 800178a:	f884 54bd 	strb.w	r5, [r4, #1213]	; 0x4bd
  return HAL_OK;
 800178e:	e7ee      	b.n	800176e <HAL_PCD_DeInit+0x8>

08001790 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001790:	b510      	push	{r4, lr}
 8001792:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001794:	6800      	ldr	r0, [r0, #0]

  __HAL_LOCK(hpcd);
 8001796:	f894 34bc 	ldrb.w	r3, [r4, #1212]	; 0x4bc
 800179a:	2b01      	cmp	r3, #1
 800179c:	d015      	beq.n	80017ca <HAL_PCD_Start+0x3a>
 800179e:	2301      	movs	r3, #1
 80017a0:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80017a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d106      	bne.n	80017b8 <HAL_PCD_Start+0x28>
 80017aa:	69a3      	ldr	r3, [r4, #24]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d003      	beq.n	80017b8 <HAL_PCD_Start+0x28>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80017b0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80017b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017b6:	6383      	str	r3, [r0, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80017b8:	f001 f94a 	bl	8002a50 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80017bc:	6820      	ldr	r0, [r4, #0]
 80017be:	f001 fd87 	bl	80032d0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80017c2:	2000      	movs	r0, #0
 80017c4:	f884 04bc 	strb.w	r0, [r4, #1212]	; 0x4bc

  return HAL_OK;
}
 80017c8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80017ca:	2002      	movs	r0, #2
 80017cc:	e7fc      	b.n	80017c8 <HAL_PCD_Start+0x38>

080017ce <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 80017ce:	b538      	push	{r3, r4, r5, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  __HAL_LOCK(hpcd);
 80017d0:	f890 34bc 	ldrb.w	r3, [r0, #1212]	; 0x4bc
{
 80017d4:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d01b      	beq.n	8001812 <HAL_PCD_Stop+0x44>
 80017da:	2301      	movs	r3, #1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80017dc:	6805      	ldr	r5, [r0, #0]
  __HAL_LOCK(hpcd);
 80017de:	f880 34bc 	strb.w	r3, [r0, #1212]	; 0x4bc
  __HAL_PCD_DISABLE(hpcd);
 80017e2:	4628      	mov	r0, r5
 80017e4:	f001 f93a 	bl	8002a5c <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 80017e8:	6820      	ldr	r0, [r4, #0]
 80017ea:	f001 fd7f 	bl	80032ec <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80017ee:	2110      	movs	r1, #16
 80017f0:	6820      	ldr	r0, [r4, #0]
 80017f2:	f001 f967 	bl	8002ac4 <USB_FlushTxFifo>

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80017f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d106      	bne.n	800180a <HAL_PCD_Stop+0x3c>
 80017fc:	69a3      	ldr	r3, [r4, #24]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d003      	beq.n	800180a <HAL_PCD_Stop+0x3c>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001802:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001804:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001808:	63ab      	str	r3, [r5, #56]	; 0x38
  }

  __HAL_UNLOCK(hpcd);
 800180a:	2000      	movs	r0, #0
 800180c:	f884 04bc 	strb.w	r0, [r4, #1212]	; 0x4bc

  return HAL_OK;
}
 8001810:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8001812:	2002      	movs	r0, #2
 8001814:	e7fc      	b.n	8001810 <HAL_PCD_Stop+0x42>

08001816 <HAL_PCD_DevConnect>:
  * @brief  Connect the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DevConnect(PCD_HandleTypeDef *hpcd)
{
 8001816:	b510      	push	{r4, lr}
 8001818:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800181a:	6800      	ldr	r0, [r0, #0]

  __HAL_LOCK(hpcd);
 800181c:	f894 34bc 	ldrb.w	r3, [r4, #1212]	; 0x4bc
 8001820:	2b01      	cmp	r3, #1
 8001822:	d012      	beq.n	800184a <HAL_PCD_DevConnect+0x34>
 8001824:	2301      	movs	r3, #1
 8001826:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800182a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800182c:	2b01      	cmp	r3, #1
 800182e:	d106      	bne.n	800183e <HAL_PCD_DevConnect+0x28>
 8001830:	69a3      	ldr	r3, [r4, #24]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d003      	beq.n	800183e <HAL_PCD_DevConnect+0x28>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001836:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800183c:	6383      	str	r3, [r0, #56]	; 0x38
  }
  (void)USB_DevConnect(hpcd->Instance);
 800183e:	f001 fd47 	bl	80032d0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001842:	2000      	movs	r0, #0
 8001844:	f884 04bc 	strb.w	r0, [r4, #1212]	; 0x4bc

  return HAL_OK;
}
 8001848:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800184a:	2002      	movs	r0, #2
 800184c:	e7fc      	b.n	8001848 <HAL_PCD_DevConnect+0x32>

0800184e <HAL_PCD_DevDisconnect>:
  * @brief  Disconnect the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DevDisconnect(PCD_HandleTypeDef *hpcd)
{
 800184e:	b538      	push	{r3, r4, r5, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  __HAL_LOCK(hpcd);
 8001850:	f890 34bc 	ldrb.w	r3, [r0, #1212]	; 0x4bc
{
 8001854:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001856:	2b01      	cmp	r3, #1
 8001858:	d014      	beq.n	8001884 <HAL_PCD_DevDisconnect+0x36>
 800185a:	2301      	movs	r3, #1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800185c:	6805      	ldr	r5, [r0, #0]
  __HAL_LOCK(hpcd);
 800185e:	f880 34bc 	strb.w	r3, [r0, #1212]	; 0x4bc
  (void)USB_DevDisconnect(hpcd->Instance);
 8001862:	4628      	mov	r0, r5
 8001864:	f001 fd42 	bl	80032ec <USB_DevDisconnect>

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001868:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800186a:	2b01      	cmp	r3, #1
 800186c:	d106      	bne.n	800187c <HAL_PCD_DevDisconnect+0x2e>
 800186e:	69a3      	ldr	r3, [r4, #24]
 8001870:	2b01      	cmp	r3, #1
 8001872:	d003      	beq.n	800187c <HAL_PCD_DevDisconnect+0x2e>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001874:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001876:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800187a:	63ab      	str	r3, [r5, #56]	; 0x38
  }

  __HAL_UNLOCK(hpcd);
 800187c:	2000      	movs	r0, #0
 800187e:	f884 04bc 	strb.w	r0, [r4, #1212]	; 0x4bc

  return HAL_OK;
}
 8001882:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8001884:	2002      	movs	r0, #2
 8001886:	e7fc      	b.n	8001882 <HAL_PCD_DevDisconnect+0x34>

08001888 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001888:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 800188a:	f890 24bc 	ldrb.w	r2, [r0, #1212]	; 0x4bc
{
 800188e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001890:	2a01      	cmp	r2, #1
 8001892:	d00b      	beq.n	80018ac <HAL_PCD_SetAddress+0x24>
 8001894:	2201      	movs	r2, #1
  hpcd->USB_Address = address;
 8001896:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  __HAL_LOCK(hpcd);
 800189a:	f880 24bc 	strb.w	r2, [r0, #1212]	; 0x4bc
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800189e:	6800      	ldr	r0, [r0, #0]
 80018a0:	f001 fd06 	bl	80032b0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80018a4:	2000      	movs	r0, #0
 80018a6:	f884 04bc 	strb.w	r0, [r4, #1212]	; 0x4bc

  return HAL_OK;
}
 80018aa:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80018ac:	2002      	movs	r0, #2
 80018ae:	e7fc      	b.n	80018aa <HAL_PCD_SetAddress+0x22>

080018b0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80018b0:	b570      	push	{r4, r5, r6, lr}
 80018b2:	f001 060f 	and.w	r6, r1, #15
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80018b6:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 80018ba:	4605      	mov	r5, r0
 80018bc:	f04f 0024 	mov.w	r0, #36	; 0x24
 80018c0:	eb06 04c6 	add.w	r4, r6, r6, lsl #3
 80018c4:	ea4f 0484 	mov.w	r4, r4, lsl #2
  if ((ep_addr & 0x80U) == 0x80U)
 80018c8:	d01f      	beq.n	800190a <HAL_PCD_EP_Open+0x5a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018ca:	f104 013c 	add.w	r1, r4, #60	; 0x3c
    ep->is_in = 1U;
 80018ce:	fb00 5006 	mla	r0, r0, r6, r5
 80018d2:	2401      	movs	r4, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018d4:	4429      	add	r1, r5
    ep->is_in = 1U;
 80018d6:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
  }

  ep->num = ep_addr & EP_ADDR_MSK;
  ep->maxpacket = ep_mps;
 80018da:	60ca      	str	r2, [r1, #12]
  ep->type = ep_type;

  if (ep->is_in != 0U)
 80018dc:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018de:	700e      	strb	r6, [r1, #0]
  ep->type = ep_type;
 80018e0:	710b      	strb	r3, [r1, #4]
  if (ep->is_in != 0U)
 80018e2:	b102      	cbz	r2, 80018e6 <HAL_PCD_EP_Open+0x36>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80018e4:	810e      	strh	r6, [r1, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80018e6:	2b02      	cmp	r3, #2
  {
    ep->data_pid_start = 0U;
 80018e8:	bf04      	itt	eq
 80018ea:	2300      	moveq	r3, #0
 80018ec:	714b      	strbeq	r3, [r1, #5]
  }

  __HAL_LOCK(hpcd);
 80018ee:	f895 34bc 	ldrb.w	r3, [r5, #1212]	; 0x4bc
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d012      	beq.n	800191c <HAL_PCD_EP_Open+0x6c>
 80018f6:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80018f8:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
 80018fa:	f885 34bc 	strb.w	r3, [r5, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80018fe:	f001 f9f4 	bl	8002cea <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001902:	2000      	movs	r0, #0
 8001904:	f885 04bc 	strb.w	r0, [r5, #1212]	; 0x4bc

  return ret;
}
 8001908:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800190a:	f504 711f 	add.w	r1, r4, #636	; 0x27c
    ep->is_in = 0U;
 800190e:	fb00 5006 	mla	r0, r0, r6, r5
 8001912:	2400      	movs	r4, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001914:	4429      	add	r1, r5
    ep->is_in = 0U;
 8001916:	f880 427d 	strb.w	r4, [r0, #637]	; 0x27d
 800191a:	e7de      	b.n	80018da <HAL_PCD_EP_Open+0x2a>
  __HAL_LOCK(hpcd);
 800191c:	2002      	movs	r0, #2
 800191e:	e7f3      	b.n	8001908 <HAL_PCD_EP_Open+0x58>

08001920 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001920:	b510      	push	{r4, lr}
 8001922:	4604      	mov	r4, r0
 8001924:	f001 000f 	and.w	r0, r1, #15
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001928:	f011 0f80 	tst.w	r1, #128	; 0x80
 800192c:	f04f 0224 	mov.w	r2, #36	; 0x24
 8001930:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 8001934:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001938:	d016      	beq.n	8001968 <HAL_PCD_EP_Close+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800193a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
    ep->is_in = 1U;
 800193e:	fb02 4200 	mla	r2, r2, r0, r4
 8001942:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001944:	4421      	add	r1, r4
    ep->is_in = 1U;
 8001946:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800194a:	7008      	strb	r0, [r1, #0]

  __HAL_LOCK(hpcd);
 800194c:	f894 34bc 	ldrb.w	r3, [r4, #1212]	; 0x4bc
 8001950:	2b01      	cmp	r3, #1
 8001952:	d012      	beq.n	800197a <HAL_PCD_EP_Close+0x5a>
 8001954:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001956:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8001958:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800195c:	f001 fa04 	bl	8002d68 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001960:	2000      	movs	r0, #0
 8001962:	f884 04bc 	strb.w	r0, [r4, #1212]	; 0x4bc
  return HAL_OK;
}
 8001966:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001968:	f503 711f 	add.w	r1, r3, #636	; 0x27c
    ep->is_in = 0U;
 800196c:	fb02 4200 	mla	r2, r2, r0, r4
 8001970:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001972:	4421      	add	r1, r4
    ep->is_in = 0U;
 8001974:	f882 327d 	strb.w	r3, [r2, #637]	; 0x27d
 8001978:	e7e7      	b.n	800194a <HAL_PCD_EP_Close+0x2a>
  __HAL_LOCK(hpcd);
 800197a:	2002      	movs	r0, #2
 800197c:	e7f3      	b.n	8001966 <HAL_PCD_EP_Close+0x46>

0800197e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800197e:	b538      	push	{r3, r4, r5, lr}
 8001980:	f001 050f 	and.w	r5, r1, #15
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001984:	2424      	movs	r4, #36	; 0x24
 8001986:	fb04 0105 	mla	r1, r4, r5, r0

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800198a:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800198e:	f501 711f 	add.w	r1, r1, #636	; 0x27c
  ep->xfer_len = len;
 8001992:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  ep->xfer_count = 0U;
 8001996:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 8001998:	f8c4 228c 	str.w	r2, [r4, #652]	; 0x28c
  ep->xfer_count = 0U;
 800199c:	f8c4 329c 	str.w	r3, [r4, #668]	; 0x29c
  ep->is_in = 0U;
 80019a0:	f884 327d 	strb.w	r3, [r4, #637]	; 0x27d
  ep->num = ep_addr & EP_ADDR_MSK;
 80019a4:	f884 527c 	strb.w	r5, [r4, #636]	; 0x27c

  if (hpcd->Init.dma_enable == 1U)
 80019a8:	6903      	ldr	r3, [r0, #16]
    ep->dma_addr = (uint32_t)pBuf;
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80019aa:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 80019ac:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 80019ae:	bf08      	it	eq
 80019b0:	f8c4 2290 	streq.w	r2, [r4, #656]	; 0x290
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80019b4:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80019b6:	b91d      	cbnz	r5, 80019c0 <HAL_PCD_EP_Receive+0x42>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80019b8:	f001 fa2c 	bl	8002e14 <USB_EP0StartXfer>
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
  }

  return HAL_OK;
}
 80019bc:	2000      	movs	r0, #0
 80019be:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80019c0:	f001 faf8 	bl	8002fb4 <USB_EPStartXfer>
 80019c4:	e7fa      	b.n	80019bc <HAL_PCD_EP_Receive+0x3e>

080019c6 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80019c6:	f001 010f 	and.w	r1, r1, #15
 80019ca:	2324      	movs	r3, #36	; 0x24
 80019cc:	fb03 0001 	mla	r0, r3, r1, r0
}
 80019d0:	f8d0 029c 	ldr.w	r0, [r0, #668]	; 0x29c
 80019d4:	4770      	bx	lr

080019d6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80019d6:	b538      	push	{r3, r4, r5, lr}
 80019d8:	f001 050f 	and.w	r5, r1, #15
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019dc:	2424      	movs	r4, #36	; 0x24
 80019de:	fb04 0105 	mla	r1, r4, r5, r0

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80019e2:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019e6:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_len = len;
 80019e8:	6563      	str	r3, [r4, #84]	; 0x54
  ep->xfer_count = 0U;
 80019ea:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 80019ec:	64e2      	str	r2, [r4, #76]	; 0x4c
  ep->xfer_count = 0U;
 80019ee:	65e3      	str	r3, [r4, #92]	; 0x5c
  ep->is_in = 1U;
 80019f0:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 80019f2:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  ep->is_in = 1U;
 80019f6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  if (hpcd->Init.dma_enable == 1U)
 80019fa:	6903      	ldr	r3, [r0, #16]
    ep->dma_addr = (uint32_t)pBuf;
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80019fc:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 80019fe:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 8001a00:	bf08      	it	eq
 8001a02:	6522      	streq	r2, [r4, #80]	; 0x50
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001a04:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a06:	b91d      	cbnz	r5, 8001a10 <HAL_PCD_EP_Transmit+0x3a>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001a08:	f001 fa04 	bl	8002e14 <USB_EP0StartXfer>
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
  }

  return HAL_OK;
}
 8001a0c:	2000      	movs	r0, #0
 8001a0e:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001a10:	f001 fad0 	bl	8002fb4 <USB_EPStartXfer>
 8001a14:	e7fa      	b.n	8001a0c <HAL_PCD_EP_Transmit+0x36>

08001a16 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a16:	b538      	push	{r3, r4, r5, lr}
 8001a18:	f001 050f 	and.w	r5, r1, #15
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001a1c:	6843      	ldr	r3, [r0, #4]
{
 8001a1e:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001a20:	429d      	cmp	r5, r3
 8001a22:	d82c      	bhi.n	8001a7e <HAL_PCD_EP_SetStall+0x68>
  {
    return HAL_ERROR;
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a24:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001a28:	f04f 0024 	mov.w	r0, #36	; 0x24
 8001a2c:	d01e      	beq.n	8001a6c <HAL_PCD_EP_SetStall+0x56>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a2e:	fb00 4105 	mla	r1, r0, r5, r4
    ep->is_in = 1U;
 8001a32:	2301      	movs	r3, #1
 8001a34:	fb00 4205 	mla	r2, r0, r5, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a38:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 8001a3a:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  {
    ep = &hpcd->OUT_ep[ep_addr];
    ep->is_in = 0U;
  }

  ep->is_stall = 1U;
 8001a3e:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a40:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8001a42:	708b      	strb	r3, [r1, #2]

  __HAL_LOCK(hpcd);
 8001a44:	f894 24bc 	ldrb.w	r2, [r4, #1212]	; 0x4bc
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d01a      	beq.n	8001a82 <HAL_PCD_EP_SetStall+0x6c>

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001a4c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8001a4e:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001a52:	f001 fbb9 	bl	80031c8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a56:	b92d      	cbnz	r5, 8001a64 <HAL_PCD_EP_SetStall+0x4e>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001a58:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 8001a5c:	7c21      	ldrb	r1, [r4, #16]
 8001a5e:	6820      	ldr	r0, [r4, #0]
 8001a60:	f001 fc96 	bl	8003390 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001a64:	2000      	movs	r0, #0
 8001a66:	f884 04bc 	strb.w	r0, [r4, #1212]	; 0x4bc

  return HAL_OK;
}
 8001a6a:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 8001a6c:	fb00 4301 	mla	r3, r0, r1, r4
    ep->is_in = 0U;
 8001a70:	461a      	mov	r2, r3
    ep = &hpcd->OUT_ep[ep_addr];
 8001a72:	f503 711f 	add.w	r1, r3, #636	; 0x27c
    ep->is_in = 0U;
 8001a76:	2300      	movs	r3, #0
 8001a78:	f882 327d 	strb.w	r3, [r2, #637]	; 0x27d
 8001a7c:	e7df      	b.n	8001a3e <HAL_PCD_EP_SetStall+0x28>
    return HAL_ERROR;
 8001a7e:	2001      	movs	r0, #1
 8001a80:	e7f3      	b.n	8001a6a <HAL_PCD_EP_SetStall+0x54>
  __HAL_LOCK(hpcd);
 8001a82:	2002      	movs	r0, #2
 8001a84:	e7f1      	b.n	8001a6a <HAL_PCD_EP_SetStall+0x54>

08001a86 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a86:	b538      	push	{r3, r4, r5, lr}
 8001a88:	f001 020f 	and.w	r2, r1, #15
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001a8c:	6843      	ldr	r3, [r0, #4]
{
 8001a8e:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d82a      	bhi.n	8001aea <HAL_PCD_EP_ClrStall+0x64>
  {
    return HAL_ERROR;
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a94:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 8001a98:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001a9c:	f04f 0024 	mov.w	r0, #36	; 0x24
 8001aa0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001aa4:	d018      	beq.n	8001ad8 <HAL_PCD_EP_ClrStall+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001aa6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
    ep->is_in = 1U;
 8001aaa:	fb00 4002 	mla	r0, r0, r2, r4
 8001aae:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ab0:	4421      	add	r1, r4
    ep->is_in = 1U;
 8001ab2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
  }

  ep->is_stall = 0U;
 8001ab6:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ab8:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 8001aba:	708d      	strb	r5, [r1, #2]

  __HAL_LOCK(hpcd);
 8001abc:	f894 34bc 	ldrb.w	r3, [r4, #1212]	; 0x4bc
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d014      	beq.n	8001aee <HAL_PCD_EP_ClrStall+0x68>
 8001ac4:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001ac6:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8001ac8:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001acc:	f001 fba7 	bl	800321e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);

  return HAL_OK;
 8001ad0:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 8001ad2:	f884 54bc 	strb.w	r5, [r4, #1212]	; 0x4bc
}
 8001ad6:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ad8:	f503 711f 	add.w	r1, r3, #636	; 0x27c
    ep->is_in = 0U;
 8001adc:	fb00 4002 	mla	r0, r0, r2, r4
 8001ae0:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ae2:	4421      	add	r1, r4
    ep->is_in = 0U;
 8001ae4:	f880 327d 	strb.w	r3, [r0, #637]	; 0x27d
 8001ae8:	e7e5      	b.n	8001ab6 <HAL_PCD_EP_ClrStall+0x30>
    return HAL_ERROR;
 8001aea:	2001      	movs	r0, #1
 8001aec:	e7f3      	b.n	8001ad6 <HAL_PCD_EP_ClrStall+0x50>
  __HAL_LOCK(hpcd);
 8001aee:	2002      	movs	r0, #2
 8001af0:	e7f1      	b.n	8001ad6 <HAL_PCD_EP_ClrStall+0x50>

08001af2 <HAL_PCD_EP_Abort>:
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001af2:	f001 030f 	and.w	r3, r1, #15
 8001af6:	060a      	lsls	r2, r1, #24
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001af8:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8001afc:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001b00:	bf4c      	ite	mi
 8001b02:	f103 013c 	addmi.w	r1, r3, #60	; 0x3c
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b06:	f503 711f 	addpl.w	r1, r3, #636	; 0x27c
 8001b0a:	4401      	add	r1, r0
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001b0c:	6800      	ldr	r0, [r0, #0]
 8001b0e:	f001 b9fb 	b.w	8002f08 <USB_EPStopXfer>
	...

08001b14 <HAL_PCD_IRQHandler>:
{
 8001b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b18:	6806      	ldr	r6, [r0, #0]
{
 8001b1a:	b089      	sub	sp, #36	; 0x24
 8001b1c:	4604      	mov	r4, r0
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001b1e:	4630      	mov	r0, r6
 8001b20:	f001 fc21 	bl	8003366 <USB_GetMode>
 8001b24:	9003      	str	r0, [sp, #12]
 8001b26:	2800      	cmp	r0, #0
 8001b28:	f040 816f 	bne.w	8001e0a <HAL_PCD_IRQHandler+0x2f6>
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001b2c:	6820      	ldr	r0, [r4, #0]
 8001b2e:	f001 fbeb 	bl	8003308 <USB_ReadInterrupts>
 8001b32:	2800      	cmp	r0, #0
 8001b34:	f000 8169 	beq.w	8001e0a <HAL_PCD_IRQHandler+0x2f6>
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001b38:	f8d6 3808 	ldr.w	r3, [r6, #2056]	; 0x808
 8001b3c:	f506 6500 	add.w	r5, r6, #2048	; 0x800
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001b40:	6820      	ldr	r0, [r4, #0]
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001b42:	f3c3 230d 	ubfx	r3, r3, #8, #14
 8001b46:	f8c4 34fc 	str.w	r3, [r4, #1276]	; 0x4fc
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001b4a:	f001 fbdd 	bl	8003308 <USB_ReadInterrupts>
 8001b4e:	0781      	lsls	r1, r0, #30
 8001b50:	d504      	bpl.n	8001b5c <HAL_PCD_IRQHandler+0x48>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001b52:	6822      	ldr	r2, [r4, #0]
 8001b54:	6953      	ldr	r3, [r2, #20]
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001b5c:	6820      	ldr	r0, [r4, #0]
 8001b5e:	f001 fbd3 	bl	8003308 <USB_ReadInterrupts>
 8001b62:	06c2      	lsls	r2, r0, #27
 8001b64:	d52c      	bpl.n	8001bc0 <HAL_PCD_IRQHandler+0xac>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b66:	6822      	ldr	r2, [r4, #0]
 8001b68:	6993      	ldr	r3, [r2, #24]
 8001b6a:	f023 0310 	bic.w	r3, r3, #16
 8001b6e:	6193      	str	r3, [r2, #24]
      RegVal = USBx->GRXSTSP;
 8001b70:	f8d6 8020 	ldr.w	r8, [r6, #32]
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001b74:	f3c8 4343 	ubfx	r3, r8, #17, #4
      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001b78:	f008 070f 	and.w	r7, r8, #15
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	f040 8147 	bne.w	8001e10 <HAL_PCD_IRQHandler+0x2fc>
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001b82:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001b86:	ea18 0f03 	tst.w	r8, r3
 8001b8a:	d014      	beq.n	8001bb6 <HAL_PCD_IRQHandler+0xa2>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001b8c:	2324      	movs	r3, #36	; 0x24
 8001b8e:	f3c8 190a 	ubfx	r9, r8, #4, #11
 8001b92:	4630      	mov	r0, r6
 8001b94:	fb03 4707 	mla	r7, r3, r7, r4
 8001b98:	464a      	mov	r2, r9
 8001b9a:	f8d7 128c 	ldr.w	r1, [r7, #652]	; 0x28c
 8001b9e:	f001 faf3 	bl	8003188 <USB_ReadPacket>
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ba2:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8001ba6:	444b      	add	r3, r9
 8001ba8:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001bac:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001bb0:	444b      	add	r3, r9
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001bb2:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bb6:	6822      	ldr	r2, [r4, #0]
 8001bb8:	6993      	ldr	r3, [r2, #24]
 8001bba:	f043 0310 	orr.w	r3, r3, #16
 8001bbe:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001bc0:	6820      	ldr	r0, [r4, #0]
 8001bc2:	f001 fba1 	bl	8003308 <USB_ReadInterrupts>
 8001bc6:	0303      	lsls	r3, r0, #12
 8001bc8:	f100 8134 	bmi.w	8001e34 <HAL_PCD_IRQHandler+0x320>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001bcc:	6820      	ldr	r0, [r4, #0]
 8001bce:	f001 fb9b 	bl	8003308 <USB_ReadInterrupts>
 8001bd2:	0347      	lsls	r7, r0, #13
 8001bd4:	d50c      	bpl.n	8001bf0 <HAL_PCD_IRQHandler+0xdc>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001bd6:	4627      	mov	r7, r4
 8001bd8:	f506 6a10 	add.w	sl, r6, #2304	; 0x900
      epnum = 0U;
 8001bdc:	f04f 0900 	mov.w	r9, #0
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001be0:	6820      	ldr	r0, [r4, #0]
 8001be2:	f001 fb9d 	bl	8003320 <USB_ReadDevAllInEpInterrupt>
 8001be6:	9004      	str	r0, [sp, #16]
      while (ep_intr != 0U)
 8001be8:	9b04      	ldr	r3, [sp, #16]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	f040 81ea 	bne.w	8001fc4 <HAL_PCD_IRQHandler+0x4b0>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001bf0:	6820      	ldr	r0, [r4, #0]
 8001bf2:	f001 fb89 	bl	8003308 <USB_ReadInterrupts>
 8001bf6:	2800      	cmp	r0, #0
 8001bf8:	da13      	bge.n	8001c22 <HAL_PCD_IRQHandler+0x10e>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001bfa:	686b      	ldr	r3, [r5, #4]
 8001bfc:	f023 0301 	bic.w	r3, r3, #1
 8001c00:	606b      	str	r3, [r5, #4]
      if (hpcd->LPM_State == LPM_L1)
 8001c02:	f894 34f4 	ldrb.w	r3, [r4, #1268]	; 0x4f4
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	f040 8285 	bne.w	8002116 <HAL_PCD_IRQHandler+0x602>
        hpcd->LPM_State = LPM_L0;
 8001c0c:	2100      	movs	r1, #0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001c0e:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L0;
 8001c10:	f884 14f4 	strb.w	r1, [r4, #1268]	; 0x4f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001c14:	f000 fb1b 	bl	800224e <HAL_PCDEx_LPM_Callback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001c18:	6822      	ldr	r2, [r4, #0]
 8001c1a:	6953      	ldr	r3, [r2, #20]
 8001c1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001c20:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001c22:	6820      	ldr	r0, [r4, #0]
 8001c24:	f001 fb70 	bl	8003308 <USB_ReadInterrupts>
 8001c28:	0500      	lsls	r0, r0, #20
 8001c2a:	d50a      	bpl.n	8001c42 <HAL_PCD_IRQHandler+0x12e>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001c2c:	68ab      	ldr	r3, [r5, #8]
 8001c2e:	07d9      	lsls	r1, r3, #31
 8001c30:	d502      	bpl.n	8001c38 <HAL_PCD_IRQHandler+0x124>
        HAL_PCD_SuspendCallback(hpcd);
 8001c32:	4620      	mov	r0, r4
 8001c34:	f002 fe6c 	bl	8004910 <HAL_PCD_SuspendCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001c38:	6822      	ldr	r2, [r4, #0]
 8001c3a:	6953      	ldr	r3, [r2, #20]
 8001c3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c40:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001c42:	6820      	ldr	r0, [r4, #0]
 8001c44:	f001 fb60 	bl	8003308 <USB_ReadInterrupts>
 8001c48:	0102      	lsls	r2, r0, #4
 8001c4a:	d514      	bpl.n	8001c76 <HAL_PCD_IRQHandler+0x162>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001c4c:	6823      	ldr	r3, [r4, #0]
 8001c4e:	695a      	ldr	r2, [r3, #20]
 8001c50:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001c54:	615a      	str	r2, [r3, #20]
      if (hpcd->LPM_State == LPM_L0)
 8001c56:	f894 24f4 	ldrb.w	r2, [r4, #1268]	; 0x4f4
 8001c5a:	2a00      	cmp	r2, #0
 8001c5c:	f040 825f 	bne.w	800211e <HAL_PCD_IRQHandler+0x60a>
        hpcd->LPM_State = LPM_L1;
 8001c60:	2101      	movs	r1, #1
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001c62:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L1;
 8001c64:	f884 14f4 	strb.w	r1, [r4, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c6a:	f3c3 0383 	ubfx	r3, r3, #2, #4
 8001c6e:	f8c4 34f8 	str.w	r3, [r4, #1272]	; 0x4f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001c72:	f000 faec 	bl	800224e <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001c76:	6820      	ldr	r0, [r4, #0]
 8001c78:	f001 fb46 	bl	8003308 <USB_ReadInterrupts>
 8001c7c:	04c3      	lsls	r3, r0, #19
 8001c7e:	d533      	bpl.n	8001ce8 <HAL_PCD_IRQHandler+0x1d4>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001c80:	686b      	ldr	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001c82:	2110      	movs	r1, #16
 8001c84:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001c86:	f023 0301 	bic.w	r3, r3, #1
 8001c8a:	606b      	str	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001c8c:	f000 ff1a 	bl	8002ac4 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c90:	f506 6310 	add.w	r3, r6, #2304	; 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001c94:	f64f 317f 	movw	r1, #64383	; 0xfb7f
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c98:	6862      	ldr	r2, [r4, #4]
 8001c9a:	9803      	ldr	r0, [sp, #12]
 8001c9c:	4282      	cmp	r2, r0
 8001c9e:	f200 8247 	bhi.w	8002130 <HAL_PCD_IRQHandler+0x61c>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001ca2:	69eb      	ldr	r3, [r5, #28]
 8001ca4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001ca8:	61eb      	str	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001caa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	f000 8259 	beq.w	8002164 <HAL_PCD_IRQHandler+0x650>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001cb2:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 8001cb6:	f043 030b 	orr.w	r3, r3, #11
 8001cba:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001cbe:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001cc0:	f043 030b 	orr.w	r3, r3, #11
 8001cc4:	646b      	str	r3, [r5, #68]	; 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001cc6:	f8d6 3800 	ldr.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001cca:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 8001cce:	7c21      	ldrb	r1, [r4, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001cd0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001cd4:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001cd6:	f8c6 3800 	str.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001cda:	f001 fb59 	bl	8003390 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001cde:	6822      	ldr	r2, [r4, #0]
 8001ce0:	6953      	ldr	r3, [r2, #20]
 8001ce2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ce6:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001ce8:	6820      	ldr	r0, [r4, #0]
 8001cea:	f001 fb0d 	bl	8003308 <USB_ReadInterrupts>
 8001cee:	0487      	lsls	r7, r0, #18
 8001cf0:	d516      	bpl.n	8001d20 <HAL_PCD_IRQHandler+0x20c>
      (void)USB_ActivateSetup(hpcd->Instance);
 8001cf2:	6820      	ldr	r0, [r4, #0]
 8001cf4:	f001 fb3b 	bl	800336e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001cf8:	6820      	ldr	r0, [r4, #0]
 8001cfa:	f000 ffeb 	bl	8002cd4 <USB_GetDevSpeed>
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001cfe:	6827      	ldr	r7, [r4, #0]
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001d00:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d02:	f000 fb4d 	bl	80023a0 <HAL_RCC_GetHCLKFreq>
 8001d06:	7b22      	ldrb	r2, [r4, #12]
 8001d08:	4601      	mov	r1, r0
 8001d0a:	4638      	mov	r0, r7
 8001d0c:	f000 fe30 	bl	8002970 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 8001d10:	4620      	mov	r0, r4
 8001d12:	f002 fde5 	bl	80048e0 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001d16:	6822      	ldr	r2, [r4, #0]
 8001d18:	6953      	ldr	r3, [r2, #20]
 8001d1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d1e:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001d20:	6820      	ldr	r0, [r4, #0]
 8001d22:	f001 faf1 	bl	8003308 <USB_ReadInterrupts>
 8001d26:	0700      	lsls	r0, r0, #28
 8001d28:	d507      	bpl.n	8001d3a <HAL_PCD_IRQHandler+0x226>
      HAL_PCD_SOFCallback(hpcd);
 8001d2a:	4620      	mov	r0, r4
 8001d2c:	f002 fdd3 	bl	80048d6 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001d30:	6822      	ldr	r2, [r4, #0]
 8001d32:	6953      	ldr	r3, [r2, #20]
 8001d34:	f003 0308 	and.w	r3, r3, #8
 8001d38:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001d3a:	6820      	ldr	r0, [r4, #0]
 8001d3c:	f001 fae4 	bl	8003308 <USB_ReadInterrupts>
 8001d40:	0601      	lsls	r1, r0, #24
 8001d42:	f100 821a 	bmi.w	800217a <HAL_PCD_IRQHandler+0x666>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001d46:	6820      	ldr	r0, [r4, #0]
 8001d48:	f001 fade 	bl	8003308 <USB_ReadInterrupts>
 8001d4c:	02c2      	lsls	r2, r0, #11
 8001d4e:	d50c      	bpl.n	8001d6a <HAL_PCD_IRQHandler+0x256>
 8001d50:	46a0      	mov	r8, r4
 8001d52:	f506 6912 	add.w	r9, r6, #2336	; 0x920
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d56:	2701      	movs	r7, #1
 8001d58:	6863      	ldr	r3, [r4, #4]
 8001d5a:	42bb      	cmp	r3, r7
 8001d5c:	f200 8226 	bhi.w	80021ac <HAL_PCD_IRQHandler+0x698>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001d60:	6822      	ldr	r2, [r4, #0]
 8001d62:	6953      	ldr	r3, [r2, #20]
 8001d64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d68:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001d6a:	6820      	ldr	r0, [r4, #0]
 8001d6c:	f001 facc 	bl	8003308 <USB_ReadInterrupts>
 8001d70:	0283      	lsls	r3, r0, #10
 8001d72:	d52d      	bpl.n	8001dd0 <HAL_PCD_IRQHandler+0x2bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d74:	f8d4 e004 	ldr.w	lr, [r4, #4]
 8001d78:	4623      	mov	r3, r4
 8001d7a:	f506 6032 	add.w	r0, r6, #2848	; 0xb20
 8001d7e:	2101      	movs	r1, #1
 8001d80:	458e      	cmp	lr, r1
 8001d82:	d920      	bls.n	8001dc6 <HAL_PCD_IRQHandler+0x2b2>
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d84:	f893 c2a4 	ldrb.w	ip, [r3, #676]	; 0x2a4
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001d88:	6802      	ldr	r2, [r0, #0]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d8a:	f1bc 0f01 	cmp.w	ip, #1
 8001d8e:	f040 8223 	bne.w	80021d8 <HAL_PCD_IRQHandler+0x6c4>
 8001d92:	2a00      	cmp	r2, #0
 8001d94:	f280 8220 	bge.w	80021d8 <HAL_PCD_IRQHandler+0x6c4>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001d98:	f8d4 74fc 	ldr.w	r7, [r4, #1276]	; 0x4fc
 8001d9c:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8001da0:	f007 0701 	and.w	r7, r7, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001da4:	42ba      	cmp	r2, r7
 8001da6:	f040 8217 	bne.w	80021d8 <HAL_PCD_IRQHandler+0x6c4>
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001daa:	f883 c2a3 	strb.w	ip, [r3, #675]	; 0x2a3
          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001dae:	69b2      	ldr	r2, [r6, #24]
 8001db0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001db4:	61b2      	str	r2, [r6, #24]
          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001db6:	6972      	ldr	r2, [r6, #20]
 8001db8:	0617      	lsls	r7, r2, #24
 8001dba:	f100 820d 	bmi.w	80021d8 <HAL_PCD_IRQHandler+0x6c4>
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001dbe:	686b      	ldr	r3, [r5, #4]
 8001dc0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dc4:	606b      	str	r3, [r5, #4]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001dc6:	6822      	ldr	r2, [r4, #0]
 8001dc8:	6953      	ldr	r3, [r2, #20]
 8001dca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dce:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001dd0:	6820      	ldr	r0, [r4, #0]
 8001dd2:	f001 fa99 	bl	8003308 <USB_ReadInterrupts>
 8001dd6:	0041      	lsls	r1, r0, #1
 8001dd8:	d507      	bpl.n	8001dea <HAL_PCD_IRQHandler+0x2d6>
      HAL_PCD_ConnectCallback(hpcd);
 8001dda:	4620      	mov	r0, r4
 8001ddc:	f002 fdc4 	bl	8004968 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001de0:	6822      	ldr	r2, [r4, #0]
 8001de2:	6953      	ldr	r3, [r2, #20]
 8001de4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001de8:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001dea:	6820      	ldr	r0, [r4, #0]
 8001dec:	f001 fa8c 	bl	8003308 <USB_ReadInterrupts>
 8001df0:	0742      	lsls	r2, r0, #29
 8001df2:	d50a      	bpl.n	8001e0a <HAL_PCD_IRQHandler+0x2f6>
      RegVal = hpcd->Instance->GOTGINT;
 8001df4:	6823      	ldr	r3, [r4, #0]
 8001df6:	685d      	ldr	r5, [r3, #4]
      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001df8:	076b      	lsls	r3, r5, #29
 8001dfa:	d502      	bpl.n	8001e02 <HAL_PCD_IRQHandler+0x2ee>
        HAL_PCD_DisconnectCallback(hpcd);
 8001dfc:	4620      	mov	r0, r4
 8001dfe:	f002 fdbe 	bl	800497e <HAL_PCD_DisconnectCallback>
      hpcd->Instance->GOTGINT |= RegVal;
 8001e02:	6822      	ldr	r2, [r4, #0]
 8001e04:	6853      	ldr	r3, [r2, #4]
 8001e06:	432b      	orrs	r3, r5
 8001e08:	6053      	str	r3, [r2, #4]
}
 8001e0a:	b009      	add	sp, #36	; 0x24
 8001e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001e10:	2b06      	cmp	r3, #6
 8001e12:	f47f aed0 	bne.w	8001bb6 <HAL_PCD_IRQHandler+0xa2>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001e16:	2208      	movs	r2, #8
 8001e18:	f204 41c4 	addw	r1, r4, #1220	; 0x4c4
 8001e1c:	4630      	mov	r0, r6
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e1e:	f3c8 180a 	ubfx	r8, r8, #4, #11
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001e22:	f001 f9b1 	bl	8003188 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e26:	2324      	movs	r3, #36	; 0x24
 8001e28:	fb03 4707 	mla	r7, r3, r7, r4
 8001e2c:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001e30:	4443      	add	r3, r8
 8001e32:	e6be      	b.n	8001bb2 <HAL_PCD_IRQHandler+0x9e>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001e34:	f506 6830 	add.w	r8, r6, #2816	; 0xb00
 8001e38:	46a2      	mov	sl, r4
      epnum = 0U;
 8001e3a:	2700      	movs	r7, #0
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001e3c:	6820      	ldr	r0, [r4, #0]
 8001e3e:	f001 fa67 	bl	8003310 <USB_ReadDevAllOutEpInterrupt>
 8001e42:	9004      	str	r0, [sp, #16]
      while (ep_intr != 0U)
 8001e44:	9b04      	ldr	r3, [sp, #16]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f43f aec0 	beq.w	8001bcc <HAL_PCD_IRQHandler+0xb8>
        if ((ep_intr & 0x1U) != 0U)
 8001e4c:	9b04      	ldr	r3, [sp, #16]
 8001e4e:	07d8      	lsls	r0, r3, #31
 8001e50:	d576      	bpl.n	8001f40 <HAL_PCD_IRQHandler+0x42c>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001e52:	fa5f fb87 	uxtb.w	fp, r7
 8001e56:	6820      	ldr	r0, [r4, #0]
 8001e58:	4659      	mov	r1, fp
 8001e5a:	f001 fa69 	bl	8003330 <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001e5e:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001e62:	4681      	mov	r9, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001e64:	d01c      	beq.n	8001ea0 <HAL_PCD_IRQHandler+0x38c>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001e66:	2301      	movs	r3, #1
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e68:	6820      	ldr	r0, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if (hpcd->Init.dma_enable == 1U)
 8001e6a:	6921      	ldr	r1, [r4, #16]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001e6c:	f8c8 3008 	str.w	r3, [r8, #8]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001e70:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
  if (hpcd->Init.dma_enable == 1U)
 8001e74:	2901      	cmp	r1, #1
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001e76:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001e7a:	eb03 1347 	add.w	r3, r3, r7, lsl #5
 8001e7e:	689a      	ldr	r2, [r3, #8]
  if (hpcd->Init.dma_enable == 1U)
 8001e80:	f040 808b 	bne.w	8001f9a <HAL_PCD_IRQHandler+0x486>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001e84:	0711      	lsls	r1, r2, #28
 8001e86:	d507      	bpl.n	8001e98 <HAL_PCD_IRQHandler+0x384>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e88:	49a7      	ldr	r1, [pc, #668]	; (8002128 <HAL_PCD_IRQHandler+0x614>)
 8001e8a:	458c      	cmp	ip, r1
 8001e8c:	d908      	bls.n	8001ea0 <HAL_PCD_IRQHandler+0x38c>
 8001e8e:	0410      	lsls	r0, r2, #16
 8001e90:	d506      	bpl.n	8001ea0 <HAL_PCD_IRQHandler+0x38c>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001e92:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001e96:	e002      	b.n	8001e9e <HAL_PCD_IRQHandler+0x38a>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001e98:	0691      	lsls	r1, r2, #26
 8001e9a:	d55a      	bpl.n	8001f52 <HAL_PCD_IRQHandler+0x43e>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001e9c:	2220      	movs	r2, #32
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001e9e:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001ea0:	f019 0f08 	tst.w	r9, #8
 8001ea4:	d021      	beq.n	8001eea <HAL_PCD_IRQHandler+0x3d6>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001ea6:	2308      	movs	r3, #8
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001ea8:	489f      	ldr	r0, [pc, #636]	; (8002128 <HAL_PCD_IRQHandler+0x614>)
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001eaa:	f8c8 3008 	str.w	r3, [r8, #8]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001eae:	6823      	ldr	r3, [r4, #0]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001eb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001eb6:	4282      	cmp	r2, r0
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001eb8:	eb03 1347 	add.w	r3, r3, r7, lsl #5
 8001ebc:	6899      	ldr	r1, [r3, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001ebe:	d904      	bls.n	8001eca <HAL_PCD_IRQHandler+0x3b6>
 8001ec0:	0409      	lsls	r1, r1, #16
 8001ec2:	d502      	bpl.n	8001eca <HAL_PCD_IRQHandler+0x3b6>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001ec4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ec8:	6099      	str	r1, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001eca:	4620      	mov	r0, r4
 8001ecc:	9205      	str	r2, [sp, #20]
 8001ece:	f002 fceb 	bl	80048a8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8001ed2:	4b95      	ldr	r3, [pc, #596]	; (8002128 <HAL_PCD_IRQHandler+0x614>)
 8001ed4:	9a05      	ldr	r2, [sp, #20]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d907      	bls.n	8001eea <HAL_PCD_IRQHandler+0x3d6>
 8001eda:	6921      	ldr	r1, [r4, #16]
 8001edc:	2901      	cmp	r1, #1
 8001ede:	d104      	bne.n	8001eea <HAL_PCD_IRQHandler+0x3d6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001ee0:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 8001ee4:	6820      	ldr	r0, [r4, #0]
 8001ee6:	f001 fa53 	bl	8003390 <USB_EP0_OutStart>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001eea:	f019 0f10 	tst.w	r9, #16
 8001eee:	d002      	beq.n	8001ef6 <HAL_PCD_IRQHandler+0x3e2>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001ef0:	2310      	movs	r3, #16
 8001ef2:	f8c8 3008 	str.w	r3, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001ef6:	f019 0f02 	tst.w	r9, #2
 8001efa:	d014      	beq.n	8001f26 <HAL_PCD_IRQHandler+0x412>
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001efc:	6973      	ldr	r3, [r6, #20]
 8001efe:	061a      	lsls	r2, r3, #24
 8001f00:	d503      	bpl.n	8001f0a <HAL_PCD_IRQHandler+0x3f6>
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001f02:	686b      	ldr	r3, [r5, #4]
 8001f04:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f08:	606b      	str	r3, [r5, #4]
            if (ep->is_iso_incomplete == 1U)
 8001f0a:	f89a 327f 	ldrb.w	r3, [sl, #639]	; 0x27f
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d106      	bne.n	8001f20 <HAL_PCD_IRQHandler+0x40c>
              ep->is_iso_incomplete = 0U;
 8001f12:	2300      	movs	r3, #0
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001f14:	4659      	mov	r1, fp
 8001f16:	4620      	mov	r0, r4
              ep->is_iso_incomplete = 0U;
 8001f18:	f88a 327f 	strb.w	r3, [sl, #639]	; 0x27f
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001f1c:	f002 fd1c 	bl	8004958 <HAL_PCD_ISOOUTIncompleteCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001f20:	2302      	movs	r3, #2
 8001f22:	f8c8 3008 	str.w	r3, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001f26:	f019 0f20 	tst.w	r9, #32
 8001f2a:	d002      	beq.n	8001f32 <HAL_PCD_IRQHandler+0x41e>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001f2c:	2320      	movs	r3, #32
 8001f2e:	f8c8 3008 	str.w	r3, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001f32:	f419 5f00 	tst.w	r9, #8192	; 0x2000
 8001f36:	d003      	beq.n	8001f40 <HAL_PCD_IRQHandler+0x42c>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001f38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f3c:	f8c8 3008 	str.w	r3, [r8, #8]
        ep_intr >>= 1U;
 8001f40:	9b04      	ldr	r3, [sp, #16]
        epnum++;
 8001f42:	3701      	adds	r7, #1
        ep_intr >>= 1U;
 8001f44:	f108 0820 	add.w	r8, r8, #32
 8001f48:	f10a 0a24 	add.w	sl, sl, #36	; 0x24
 8001f4c:	085b      	lsrs	r3, r3, #1
 8001f4e:	9304      	str	r3, [sp, #16]
 8001f50:	e778      	b.n	8001e44 <HAL_PCD_IRQHandler+0x330>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001f52:	f012 0f28 	tst.w	r2, #40	; 0x28
 8001f56:	d1a3      	bne.n	8001ea0 <HAL_PCD_IRQHandler+0x38c>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f58:	4973      	ldr	r1, [pc, #460]	; (8002128 <HAL_PCD_IRQHandler+0x614>)
 8001f5a:	458c      	cmp	ip, r1
 8001f5c:	d901      	bls.n	8001f62 <HAL_PCD_IRQHandler+0x44e>
 8001f5e:	0412      	lsls	r2, r2, #16
 8001f60:	d497      	bmi.n	8001e92 <HAL_PCD_IRQHandler+0x37e>
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001f62:	691a      	ldr	r2, [r3, #16]
 8001f64:	f8da 3298 	ldr.w	r3, [sl, #664]	; 0x298
 8001f68:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8001f6c:	1a9b      	subs	r3, r3, r2
 8001f6e:	f8ca 329c 	str.w	r3, [sl, #668]	; 0x29c
        if (epnum == 0U)
 8001f72:	b96f      	cbnz	r7, 8001f90 <HAL_PCD_IRQHandler+0x47c>
          if (ep->xfer_len == 0U)
 8001f74:	f8d4 2294 	ldr.w	r2, [r4, #660]	; 0x294
 8001f78:	b92a      	cbnz	r2, 8001f86 <HAL_PCD_IRQHandler+0x472>
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001f7a:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 8001f7e:	2101      	movs	r1, #1
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8001f80:	f001 fa06 	bl	8003390 <USB_EP0_OutStart>
 8001f84:	e004      	b.n	8001f90 <HAL_PCD_IRQHandler+0x47c>
            ep->xfer_buff += ep->xfer_count;
 8001f86:	f8d4 228c 	ldr.w	r2, [r4, #652]	; 0x28c
 8001f8a:	4413      	add	r3, r2
 8001f8c:	f8c4 328c 	str.w	r3, [r4, #652]	; 0x28c
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f90:	4659      	mov	r1, fp
 8001f92:	4620      	mov	r0, r4
 8001f94:	f002 fc8e 	bl	80048b4 <HAL_PCD_DataOutStageCallback>
 8001f98:	e782      	b.n	8001ea0 <HAL_PCD_IRQHandler+0x38c>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001f9a:	4964      	ldr	r1, [pc, #400]	; (800212c <HAL_PCD_IRQHandler+0x618>)
 8001f9c:	458c      	cmp	ip, r1
 8001f9e:	d107      	bne.n	8001fb0 <HAL_PCD_IRQHandler+0x49c>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001fa0:	0411      	lsls	r1, r2, #16
 8001fa2:	f53f af76 	bmi.w	8001e92 <HAL_PCD_IRQHandler+0x37e>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001fa6:	0690      	lsls	r0, r2, #26
 8001fa8:	d5f2      	bpl.n	8001f90 <HAL_PCD_IRQHandler+0x47c>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001faa:	2220      	movs	r2, #32
 8001fac:	609a      	str	r2, [r3, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001fae:	e7ef      	b.n	8001f90 <HAL_PCD_IRQHandler+0x47c>
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001fb0:	2f00      	cmp	r7, #0
 8001fb2:	d1ed      	bne.n	8001f90 <HAL_PCD_IRQHandler+0x47c>
 8001fb4:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d1e9      	bne.n	8001f90 <HAL_PCD_IRQHandler+0x47c>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8001fbc:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 8001fc0:	4639      	mov	r1, r7
 8001fc2:	e7dd      	b.n	8001f80 <HAL_PCD_IRQHandler+0x46c>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001fc4:	9b04      	ldr	r3, [sp, #16]
 8001fc6:	07db      	lsls	r3, r3, #31
 8001fc8:	f140 809c 	bpl.w	8002104 <HAL_PCD_IRQHandler+0x5f0>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001fcc:	fa5f fb89 	uxtb.w	fp, r9
 8001fd0:	6820      	ldr	r0, [r4, #0]
 8001fd2:	4659      	mov	r1, fp
 8001fd4:	f001 f9b5 	bl	8003342 <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001fd8:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001fdc:	4680      	mov	r8, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001fde:	d020      	beq.n	8002022 <HAL_PCD_IRQHandler+0x50e>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001fe0:	2101      	movs	r1, #1
 8001fe2:	f009 020f 	and.w	r2, r9, #15
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001fe6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001fe8:	fa01 f202 	lsl.w	r2, r1, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001fec:	ea23 0302 	bic.w	r3, r3, r2
 8001ff0:	636b      	str	r3, [r5, #52]	; 0x34
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	f8ca 1008 	str.w	r1, [sl, #8]
            if (hpcd->Init.dma_enable == 1U)
 8001ff8:	6921      	ldr	r1, [r4, #16]
 8001ffa:	4299      	cmp	r1, r3
 8001ffc:	d10d      	bne.n	800201a <HAL_PCD_IRQHandler+0x506>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001ffe:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002002:	4413      	add	r3, r2
 8002004:	64fb      	str	r3, [r7, #76]	; 0x4c
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002006:	f1b9 0f00 	cmp.w	r9, #0
 800200a:	d106      	bne.n	800201a <HAL_PCD_IRQHandler+0x506>
 800200c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800200e:	b923      	cbnz	r3, 800201a <HAL_PCD_IRQHandler+0x506>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002010:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 8002014:	6820      	ldr	r0, [r4, #0]
 8002016:	f001 f9bb 	bl	8003390 <USB_EP0_OutStart>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800201a:	4659      	mov	r1, fp
 800201c:	4620      	mov	r0, r4
 800201e:	f002 fc52 	bl	80048c6 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002022:	f018 0f08 	tst.w	r8, #8
 8002026:	d002      	beq.n	800202e <HAL_PCD_IRQHandler+0x51a>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002028:	2308      	movs	r3, #8
 800202a:	f8ca 3008 	str.w	r3, [sl, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800202e:	f018 0f10 	tst.w	r8, #16
 8002032:	d002      	beq.n	800203a <HAL_PCD_IRQHandler+0x526>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002034:	2310      	movs	r3, #16
 8002036:	f8ca 3008 	str.w	r3, [sl, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800203a:	f018 0f40 	tst.w	r8, #64	; 0x40
 800203e:	d002      	beq.n	8002046 <HAL_PCD_IRQHandler+0x532>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002040:	2340      	movs	r3, #64	; 0x40
 8002042:	f8ca 3008 	str.w	r3, [sl, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002046:	f018 0f02 	tst.w	r8, #2
 800204a:	d012      	beq.n	8002072 <HAL_PCD_IRQHandler+0x55e>
            (void)USB_FlushTxFifo(USBx, epnum);
 800204c:	4649      	mov	r1, r9
 800204e:	4630      	mov	r0, r6
 8002050:	f000 fd38 	bl	8002ac4 <USB_FlushTxFifo>
            if (ep->is_iso_incomplete == 1U)
 8002054:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002058:	2b01      	cmp	r3, #1
 800205a:	d107      	bne.n	800206c <HAL_PCD_IRQHandler+0x558>
              ep->is_iso_incomplete = 0U;
 800205c:	f04f 0300 	mov.w	r3, #0
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002060:	4659      	mov	r1, fp
 8002062:	4620      	mov	r0, r4
              ep->is_iso_incomplete = 0U;
 8002064:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002068:	f002 fc7a 	bl	8004960 <HAL_PCD_ISOINIncompleteCallback>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800206c:	2302      	movs	r3, #2
 800206e:	f8ca 3008 	str.w	r3, [sl, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002072:	f018 0f80 	tst.w	r8, #128	; 0x80
 8002076:	d045      	beq.n	8002104 <HAL_PCD_IRQHandler+0x5f0>
  if (ep->xfer_count > ep->xfer_len)
 8002078:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800207a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800207c:	429a      	cmp	r2, r3
 800207e:	d841      	bhi.n	8002104 <HAL_PCD_IRQHandler+0x5f0>
  len = ep->xfer_len - ep->xfer_count;
 8002080:	1a9b      	subs	r3, r3, r2
  len32b = (len + 3U) / 4U;
 8002082:	6cba      	ldr	r2, [r7, #72]	; 0x48
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002084:	6821      	ldr	r1, [r4, #0]
  len32b = (len + 3U) / 4U;
 8002086:	4293      	cmp	r3, r2
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002088:	9105      	str	r1, [sp, #20]
  len32b = (len + 3U) / 4U;
 800208a:	bf28      	it	cs
 800208c:	4613      	movcs	r3, r2
 800208e:	3303      	adds	r3, #3
 8002090:	089b      	lsrs	r3, r3, #2
 8002092:	9306      	str	r3, [sp, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002094:	f501 6310 	add.w	r3, r1, #2304	; 0x900
 8002098:	eb03 1349 	add.w	r3, r3, r9, lsl #5
 800209c:	9307      	str	r3, [sp, #28]
 800209e:	9b07      	ldr	r3, [sp, #28]
 80020a0:	9806      	ldr	r0, [sp, #24]
 80020a2:	6999      	ldr	r1, [r3, #24]
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020a6:	b289      	uxth	r1, r1
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020aa:	4281      	cmp	r1, r0
 80020ac:	d328      	bcc.n	8002100 <HAL_PCD_IRQHandler+0x5ec>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d30c      	bcc.n	80020cc <HAL_PCD_IRQHandler+0x5b8>
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80020b2:	9b05      	ldr	r3, [sp, #20]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80020b4:	f009 010f 	and.w	r1, r9, #15
 80020b8:	2001      	movs	r0, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80020ba:	f8d3 2834 	ldr.w	r2, [r3, #2100]	; 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80020be:	fa00 f101 	lsl.w	r1, r0, r1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80020c2:	ea22 0201 	bic.w	r2, r2, r1
 80020c6:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
 80020ca:	e01b      	b.n	8002104 <HAL_PCD_IRQHandler+0x5f0>
    len = ep->xfer_len - ep->xfer_count;
 80020cc:	eba3 0802 	sub.w	r8, r3, r2
    if (len > ep->maxpacket)
 80020d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80020d2:	465a      	mov	r2, fp
 80020d4:	9805      	ldr	r0, [sp, #20]
 80020d6:	4598      	cmp	r8, r3
 80020d8:	bf28      	it	cs
 80020da:	4698      	movcs	r8, r3
    len32b = (len + 3U) / 4U;
 80020dc:	f108 0303 	add.w	r3, r8, #3
 80020e0:	089b      	lsrs	r3, r3, #2
 80020e2:	9306      	str	r3, [sp, #24]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80020e4:	7c23      	ldrb	r3, [r4, #16]
 80020e6:	9300      	str	r3, [sp, #0]
 80020e8:	fa1f f388 	uxth.w	r3, r8
 80020ec:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80020ee:	f000 ff4d 	bl	8002f8c <USB_WritePacket>
    ep->xfer_buff  += len;
 80020f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020f4:	4443      	add	r3, r8
 80020f6:	64fb      	str	r3, [r7, #76]	; 0x4c
    ep->xfer_count += len;
 80020f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020fa:	4443      	add	r3, r8
 80020fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80020fe:	e7ce      	b.n	800209e <HAL_PCD_IRQHandler+0x58a>
  if (ep->xfer_len <= ep->xfer_count)
 8002100:	429a      	cmp	r2, r3
 8002102:	d2d6      	bcs.n	80020b2 <HAL_PCD_IRQHandler+0x59e>
        ep_intr >>= 1U;
 8002104:	9b04      	ldr	r3, [sp, #16]
        epnum++;
 8002106:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 800210a:	3724      	adds	r7, #36	; 0x24
 800210c:	f10a 0a20 	add.w	sl, sl, #32
 8002110:	085b      	lsrs	r3, r3, #1
 8002112:	9304      	str	r3, [sp, #16]
 8002114:	e568      	b.n	8001be8 <HAL_PCD_IRQHandler+0xd4>
        HAL_PCD_ResumeCallback(hpcd);
 8002116:	4620      	mov	r0, r4
 8002118:	f002 fc14 	bl	8004944 <HAL_PCD_ResumeCallback>
 800211c:	e57c      	b.n	8001c18 <HAL_PCD_IRQHandler+0x104>
        HAL_PCD_SuspendCallback(hpcd);
 800211e:	4620      	mov	r0, r4
 8002120:	f002 fbf6 	bl	8004910 <HAL_PCD_SuspendCallback>
 8002124:	e5a7      	b.n	8001c76 <HAL_PCD_IRQHandler+0x162>
 8002126:	bf00      	nop
 8002128:	4f54300a 	.word	0x4f54300a
 800212c:	4f54310a 	.word	0x4f54310a
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002130:	6099      	str	r1, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002132:	3320      	adds	r3, #32
 8002134:	f853 2c20 	ldr.w	r2, [r3, #-32]
 8002138:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800213c:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002140:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002144:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 8002148:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800214c:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002150:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 8002154:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8002158:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800215c:	9a03      	ldr	r2, [sp, #12]
 800215e:	3201      	adds	r2, #1
 8002160:	9203      	str	r2, [sp, #12]
 8002162:	e599      	b.n	8001c98 <HAL_PCD_IRQHandler+0x184>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002164:	696b      	ldr	r3, [r5, #20]
 8002166:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800216a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800216e:	616b      	str	r3, [r5, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002170:	692b      	ldr	r3, [r5, #16]
 8002172:	f043 030b 	orr.w	r3, r3, #11
 8002176:	612b      	str	r3, [r5, #16]
 8002178:	e5a5      	b.n	8001cc6 <HAL_PCD_IRQHandler+0x1b2>
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800217a:	69b3      	ldr	r3, [r6, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800217c:	2701      	movs	r7, #1
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800217e:	f204 287f 	addw	r8, r4, #639	; 0x27f
 8002182:	f04f 0924 	mov.w	r9, #36	; 0x24
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002186:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800218a:	61b3      	str	r3, [r6, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800218c:	6863      	ldr	r3, [r4, #4]
 800218e:	42bb      	cmp	r3, r7
 8002190:	f67f add9 	bls.w	8001d46 <HAL_PCD_IRQHandler+0x232>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002194:	fb09 f307 	mul.w	r3, r9, r7
 8002198:	f818 3003 	ldrb.w	r3, [r8, r3]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d103      	bne.n	80021a8 <HAL_PCD_IRQHandler+0x694>
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80021a0:	b2f9      	uxtb	r1, r7
 80021a2:	4620      	mov	r0, r4
 80021a4:	f7ff fca5 	bl	8001af2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021a8:	3701      	adds	r7, #1
 80021aa:	e7ef      	b.n	800218c <HAL_PCD_IRQHandler+0x678>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80021ac:	f898 3064 	ldrb.w	r3, [r8, #100]	; 0x64
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80021b0:	f8d9 2000 	ldr.w	r2, [r9]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d109      	bne.n	80021cc <HAL_PCD_IRQHandler+0x6b8>
 80021b8:	2a00      	cmp	r2, #0
 80021ba:	da07      	bge.n	80021cc <HAL_PCD_IRQHandler+0x6b8>
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80021bc:	f067 017f 	orn	r1, r7, #127	; 0x7f
 80021c0:	4620      	mov	r0, r4
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80021c2:	f888 3063 	strb.w	r3, [r8, #99]	; 0x63
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80021c6:	b2c9      	uxtb	r1, r1
 80021c8:	f7ff fc93 	bl	8001af2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021cc:	3701      	adds	r7, #1
 80021ce:	f108 0824 	add.w	r8, r8, #36	; 0x24
 80021d2:	f109 0920 	add.w	r9, r9, #32
 80021d6:	e5bf      	b.n	8001d58 <HAL_PCD_IRQHandler+0x244>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021d8:	3101      	adds	r1, #1
 80021da:	3324      	adds	r3, #36	; 0x24
 80021dc:	3020      	adds	r0, #32
 80021de:	e5cf      	b.n	8001d80 <HAL_PCD_IRQHandler+0x26c>

080021e0 <HAL_PCDEx_SetTxFiFo>:
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80021e0:	6800      	ldr	r0, [r0, #0]

  if (fifo == 0U)
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80021e2:	0412      	lsls	r2, r2, #16
{
 80021e4:	b570      	push	{r4, r5, r6, lr}
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80021e6:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if (fifo == 0U)
 80021e8:	b919      	cbnz	r1, 80021f2 <HAL_PCDEx_SetTxFiFo+0x12>
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80021ea:	4322      	orrs	r2, r4
 80021ec:	6282      	str	r2, [r0, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 80021ee:	2000      	movs	r0, #0
 80021f0:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80021f2:	6a83      	ldr	r3, [r0, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 80021f4:	1e4d      	subs	r5, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80021f6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80021fa:	2300      	movs	r3, #0
 80021fc:	1c5e      	adds	r6, r3, #1
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	429d      	cmp	r5, r3
 8002202:	d805      	bhi.n	8002210 <HAL_PCDEx_SetTxFiFo+0x30>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002204:	313f      	adds	r1, #63	; 0x3f
 8002206:	4322      	orrs	r2, r4
 8002208:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800220c:	6042      	str	r2, [r0, #4]
 800220e:	e7ee      	b.n	80021ee <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002210:	3340      	adds	r3, #64	; 0x40
 8002212:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800221c:	4633      	mov	r3, r6
 800221e:	e7ed      	b.n	80021fc <HAL_PCDEx_SetTxFiFo+0x1c>

08002220 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8002220:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 8002222:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8002224:	6259      	str	r1, [r3, #36]	; 0x24
}
 8002226:	4770      	bx	lr

08002228 <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002228:	6802      	ldr	r2, [r0, #0]

  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 800222a:	2100      	movs	r1, #0
  hpcd->lpm_active = 1U;
 800222c:	2301      	movs	r3, #1
  hpcd->LPM_State = LPM_L0;
 800222e:	f880 14f4 	strb.w	r1, [r0, #1268]	; 0x4f4
  hpcd->lpm_active = 1U;
 8002232:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);

  return HAL_OK;
}
 8002236:	4608      	mov	r0, r1
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002238:	6993      	ldr	r3, [r2, #24]
 800223a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800223e:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002240:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002242:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002246:	f043 0303 	orr.w	r3, r3, #3
 800224a:	6553      	str	r3, [r2, #84]	; 0x54
}
 800224c:	4770      	bx	lr

0800224e <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800224e:	4770      	bx	lr

08002250 <HAL_PWREx_EnableUSBVoltageDetector>:
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002250:	4a02      	ldr	r2, [pc, #8]	; (800225c <HAL_PWREx_EnableUSBVoltageDetector+0xc>)
 8002252:	68d3      	ldr	r3, [r2, #12]
 8002254:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002258:	60d3      	str	r3, [r2, #12]
}
 800225a:	4770      	bx	lr
 800225c:	58024800 	.word	0x58024800

08002260 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002260:	4b48      	ldr	r3, [pc, #288]	; (8002384 <HAL_RCC_GetSysClockFreq+0x124>)
 8002262:	691a      	ldr	r2, [r3, #16]
 8002264:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8002268:	2a10      	cmp	r2, #16
{
 800226a:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800226c:	f000 8086 	beq.w	800237c <HAL_RCC_GetSysClockFreq+0x11c>
 8002270:	2a18      	cmp	r2, #24
 8002272:	d00c      	beq.n	800228e <HAL_RCC_GetSysClockFreq+0x2e>
 8002274:	2a00      	cmp	r2, #0
 8002276:	f040 8083 	bne.w	8002380 <HAL_RCC_GetSysClockFreq+0x120>
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	4842      	ldr	r0, [pc, #264]	; (8002388 <HAL_RCC_GetSysClockFreq+0x128>)
 800227e:	f012 0f20 	tst.w	r2, #32
 8002282:	d003      	beq.n	800228c <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800228a:	40d8      	lsrs	r0, r3
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 800228c:	bd30      	pop	{r4, r5, pc}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800228e:	6a99      	ldr	r1, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002290:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002292:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    if (pllm != 0U)
 8002294:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002298:	f3c5 1005 	ubfx	r0, r5, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800229c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    if (pllm != 0U)
 800229e:	d0f5      	beq.n	800228c <HAL_RCC_GetSysClockFreq+0x2c>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80022a0:	f3c2 02cc 	ubfx	r2, r2, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80022a4:	f004 0401 	and.w	r4, r4, #1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80022a8:	ee07 0a90 	vmov	s15, r0
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80022ac:	f001 0103 	and.w	r1, r1, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80022b0:	4362      	muls	r2, r4
 80022b2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80022b6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80022ba:	2901      	cmp	r1, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80022bc:	ee07 2a90 	vmov	s15, r2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80022c0:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
 80022c4:	d04c      	beq.n	8002360 <HAL_RCC_GetSysClockFreq+0x100>
 80022c6:	2902      	cmp	r1, #2
 80022c8:	d03c      	beq.n	8002344 <HAL_RCC_GetSysClockFreq+0xe4>
 80022ca:	2900      	cmp	r1, #0
 80022cc:	d148      	bne.n	8002360 <HAL_RCC_GetSysClockFreq+0x100>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	0692      	lsls	r2, r2, #26
 80022d2:	d527      	bpl.n	8002324 <HAL_RCC_GetSysClockFreq+0xc4>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80022d4:	6819      	ldr	r1, [r3, #0]
 80022d6:	4a2c      	ldr	r2, [pc, #176]	; (8002388 <HAL_RCC_GetSysClockFreq+0x128>)
 80022d8:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80022de:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80022e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022e4:	ee07 2a10 	vmov	s14, r2
 80022e8:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 80022ec:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 80022f0:	ee06 3a90 	vmov	s13, r3
 80022f4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80022f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022fc:	ee77 7a86 	vadd.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002300:	4b20      	ldr	r3, [pc, #128]	; (8002384 <HAL_RCC_GetSysClockFreq+0x124>)
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002302:	ee67 7a87 	vmul.f32	s15, s15, s14
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002308:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800230c:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800230e:	ee07 3a10 	vmov	s14, r3
 8002312:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8002316:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800231a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800231e:	ee17 0a90 	vmov	r0, s15
 8002322:	e7b3      	b.n	800228c <HAL_RCC_GetSysClockFreq+0x2c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002326:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800232a:	ee07 3a10 	vmov	s14, r3
 800232e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002332:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002336:	ee77 7a86 	vadd.f32	s15, s15, s12
 800233a:	ed9f 6a14 	vldr	s12, [pc, #80]	; 800238c <HAL_RCC_GetSysClockFreq+0x12c>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800233e:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8002342:	e7dd      	b.n	8002300 <HAL_RCC_GetSysClockFreq+0xa0>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800234a:	ee07 3a10 	vmov	s14, r3
 800234e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002352:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002356:	ee77 7a86 	vadd.f32	s15, s15, s12
 800235a:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 8002390 <HAL_RCC_GetSysClockFreq+0x130>
 800235e:	e7ee      	b.n	800233e <HAL_RCC_GetSysClockFreq+0xde>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002366:	ee07 3a10 	vmov	s14, r3
 800236a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800236e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002372:	ee77 7a86 	vadd.f32	s15, s15, s12
 8002376:	ed9f 6a07 	vldr	s12, [pc, #28]	; 8002394 <HAL_RCC_GetSysClockFreq+0x134>
 800237a:	e7e0      	b.n	800233e <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800237c:	4806      	ldr	r0, [pc, #24]	; (8002398 <HAL_RCC_GetSysClockFreq+0x138>)
 800237e:	e785      	b.n	800228c <HAL_RCC_GetSysClockFreq+0x2c>
    sysclockfreq = CSI_VALUE;
 8002380:	4806      	ldr	r0, [pc, #24]	; (800239c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002382:	e783      	b.n	800228c <HAL_RCC_GetSysClockFreq+0x2c>
 8002384:	58024400 	.word	0x58024400
 8002388:	03d09000 	.word	0x03d09000
 800238c:	4c742400 	.word	0x4c742400
 8002390:	4bb71b00 	.word	0x4bb71b00
 8002394:	4a742400 	.word	0x4a742400
 8002398:	016e3600 	.word	0x016e3600
 800239c:	003d0900 	.word	0x003d0900

080023a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023a0:	b510      	push	{r4, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80023a2:	4c0c      	ldr	r4, [pc, #48]	; (80023d4 <HAL_RCC_GetHCLKFreq+0x34>)
 80023a4:	f7ff ff5c 	bl	8002260 <HAL_RCC_GetSysClockFreq>
 80023a8:	490b      	ldr	r1, [pc, #44]	; (80023d8 <HAL_RCC_GetHCLKFreq+0x38>)
 80023aa:	69a3      	ldr	r3, [r4, #24]
 80023ac:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80023b0:	5cca      	ldrb	r2, [r1, r3]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80023b2:	69a3      	ldr	r3, [r4, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80023b4:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80023b8:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80023bc:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80023c0:	5ccb      	ldrb	r3, [r1, r3]
 80023c2:	f003 031f 	and.w	r3, r3, #31
 80023c6:	fa22 f003 	lsr.w	r0, r2, r3
 80023ca:	4b04      	ldr	r3, [pc, #16]	; (80023dc <HAL_RCC_GetHCLKFreq+0x3c>)
 80023cc:	6018      	str	r0, [r3, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80023ce:	4b04      	ldr	r3, [pc, #16]	; (80023e0 <HAL_RCC_GetHCLKFreq+0x40>)
 80023d0:	601a      	str	r2, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 80023d2:	bd10      	pop	{r4, pc}
 80023d4:	58024400 	.word	0x58024400
 80023d8:	08004b70 	.word	0x08004b70
 80023dc:	24000004 	.word	0x24000004
 80023e0:	24000000 	.word	0x24000000

080023e4 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80023e4:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_LL_EXTI_LINE_64_95(EXTI_InitStruct->Line_64_95));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80023e6:	7b05      	ldrb	r5, [r0, #12]
            break;
        }
      }
    }
    /* Configure EXTI Lines in range from 64 to 95 */
    if (EXTI_InitStruct->Line_64_95 != LL_EXTI_LINE_NONE)
 80023e8:	6883      	ldr	r3, [r0, #8]
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 80023ea:	e9d0 1200 	ldrd	r1, r2, [r0]
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80023ee:	2d00      	cmp	r5, #0
 80023f0:	f000 80b3 	beq.w	800255a <LL_EXTI_Init+0x176>
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80023f4:	2900      	cmp	r1, #0
 80023f6:	d155      	bne.n	80024a4 <LL_EXTI_Init+0xc0>
  ErrorStatus status = SUCCESS;
 80023f8:	2500      	movs	r5, #0
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 80023fa:	b33a      	cbz	r2, 800244c <LL_EXTI_Init+0x68>
      if((EXTI_InitStruct->Mode & LL_EXTI_MODE_IT) == LL_EXTI_MODE_IT)
 80023fc:	7b46      	ldrb	r6, [r0, #13]
 80023fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002402:	f016 0f01 	tst.w	r6, #1
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002406:	f8d1 4090 	ldr.w	r4, [r1, #144]	; 0x90
 800240a:	bf14      	ite	ne
 800240c:	4314      	orrne	r4, r2
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800240e:	4394      	biceq	r4, r2
      if((EXTI_InitStruct->Mode & LL_EXTI_MODE_EVENT) == LL_EXTI_MODE_EVENT)
 8002410:	f016 0f02 	tst.w	r6, #2
 8002414:	f8c1 4090 	str.w	r4, [r1, #144]	; 0x90
 8002418:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->EMR2, ExtiLine);
 800241c:	f8d1 4094 	ldr.w	r4, [r1, #148]	; 0x94
 8002420:	bf14      	ite	ne
 8002422:	4314      	orrne	r4, r2
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8002424:	4394      	biceq	r4, r2
 8002426:	f8c1 4094 	str.w	r4, [r1, #148]	; 0x94
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800242a:	7b81      	ldrb	r1, [r0, #14]
 800242c:	b171      	cbz	r1, 800244c <LL_EXTI_Init+0x68>
        switch (EXTI_InitStruct->Trigger)
 800242e:	2902      	cmp	r1, #2
 8002430:	d073      	beq.n	800251a <LL_EXTI_Init+0x136>
 8002432:	2903      	cmp	r1, #3
 8002434:	d07b      	beq.n	800252e <LL_EXTI_Init+0x14a>
 8002436:	2901      	cmp	r1, #1
 8002438:	d17e      	bne.n	8002538 <LL_EXTI_Init+0x154>
  *         @arg @ref LL_EXTI_LINE_51
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800243a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800243e:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8002440:	ea24 0402 	bic.w	r4, r4, r2
 8002444:	624c      	str	r4, [r1, #36]	; 0x24
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8002446:	6a0c      	ldr	r4, [r1, #32]
 8002448:	4322      	orrs	r2, r4
 800244a:	620a      	str	r2, [r1, #32]
    if (EXTI_InitStruct->Line_64_95 != LL_EXTI_LINE_NONE)
 800244c:	b343      	cbz	r3, 80024a0 <LL_EXTI_Init+0xbc>
    {
      if((EXTI_InitStruct->Mode & LL_EXTI_MODE_IT) == LL_EXTI_MODE_IT)
 800244e:	7b44      	ldrb	r4, [r0, #13]
 8002450:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002454:	f014 0f01 	tst.w	r4, #1
  SET_BIT(EXTI->IMR3, ExtiLine);
 8002458:	f8d2 10a0 	ldr.w	r1, [r2, #160]	; 0xa0
 800245c:	bf14      	ite	ne
 800245e:	4319      	orrne	r1, r3
  CLEAR_BIT(EXTI->IMR3, ExtiLine);
 8002460:	4399      	biceq	r1, r3
      {
        /* Disable IT on provided Lines for Cortex-M7*/
        LL_EXTI_DisableIT_64_95(EXTI_InitStruct->Line_64_95);
      }

      if((EXTI_InitStruct->Mode & LL_EXTI_MODE_EVENT) == LL_EXTI_MODE_EVENT)
 8002462:	f014 0f02 	tst.w	r4, #2
 8002466:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
 800246a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
  SET_BIT(EXTI->EMR3, ExtiLine);
 800246e:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
 8002472:	bf14      	ite	ne
 8002474:	4319      	orrne	r1, r3
  CLEAR_BIT(EXTI->EMR3, ExtiLine);
 8002476:	4399      	biceq	r1, r3
 8002478:	f8c2 10a4 	str.w	r1, [r2, #164]	; 0xa4
        /* Disable event on provided Lines for Cortex-M4 */
        LL_C2_EXTI_DisableEvent_64_95(EXTI_InitStruct->Line_64_95);
      }
#endif /* DUAL_CORE */

      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800247c:	7b82      	ldrb	r2, [r0, #14]
 800247e:	b17a      	cbz	r2, 80024a0 <LL_EXTI_Init+0xbc>
      {
        switch (EXTI_InitStruct->Trigger)
 8002480:	2a02      	cmp	r2, #2
 8002482:	d05b      	beq.n	800253c <LL_EXTI_Init+0x158>
 8002484:	2a03      	cmp	r2, #3
 8002486:	d063      	beq.n	8002550 <LL_EXTI_Init+0x16c>
 8002488:	2a01      	cmp	r2, #1
 800248a:	f040 808d 	bne.w	80025a8 <LL_EXTI_Init+0x1c4>
  *         (**) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_64_95(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->FTSR3, ExtiLine);
 800248e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002492:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002494:	ea21 0103 	bic.w	r1, r1, r3
 8002498:	6451      	str	r1, [r2, #68]	; 0x44
  SET_BIT(EXTI->RTSR3, ExtiLine);
 800249a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800249c:	430b      	orrs	r3, r1
 800249e:	6413      	str	r3, [r2, #64]	; 0x40
    LL_C2_EXTI_DisableEvent_64_95(EXTI_InitStruct->Line_64_95);
#endif /* DUAL_CORE */
  }

  return status;
}
 80024a0:	4628      	mov	r0, r5
 80024a2:	bd70      	pop	{r4, r5, r6, pc}
      if((EXTI_InitStruct->Mode & LL_EXTI_MODE_IT) == LL_EXTI_MODE_IT)
 80024a4:	7b46      	ldrb	r6, [r0, #13]
 80024a6:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 80024aa:	f016 0f01 	tst.w	r6, #1
  SET_BIT(EXTI->IMR1, ExtiLine);
 80024ae:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 80024b2:	bf14      	ite	ne
 80024b4:	430d      	orrne	r5, r1
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80024b6:	438d      	biceq	r5, r1
      if((EXTI_InitStruct->Mode & LL_EXTI_MODE_EVENT) == LL_EXTI_MODE_EVENT)
 80024b8:	f016 0f02 	tst.w	r6, #2
 80024bc:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 80024c0:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
  SET_BIT(EXTI->EMR1, ExtiLine);
 80024c4:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 80024c8:	bf14      	ite	ne
 80024ca:	430d      	orrne	r5, r1
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80024cc:	438d      	biceq	r5, r1
 80024ce:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80024d2:	7b84      	ldrb	r4, [r0, #14]
 80024d4:	2c00      	cmp	r4, #0
 80024d6:	d08f      	beq.n	80023f8 <LL_EXTI_Init+0x14>
        switch (EXTI_InitStruct->Trigger)
 80024d8:	2c02      	cmp	r4, #2
 80024da:	d00d      	beq.n	80024f8 <LL_EXTI_Init+0x114>
 80024dc:	2c03      	cmp	r4, #3
 80024de:	d015      	beq.n	800250c <LL_EXTI_Init+0x128>
 80024e0:	2c01      	cmp	r4, #1
 80024e2:	d118      	bne.n	8002516 <LL_EXTI_Init+0x132>
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80024e4:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 80024e8:	6865      	ldr	r5, [r4, #4]
 80024ea:	ea25 0501 	bic.w	r5, r5, r1
 80024ee:	6065      	str	r5, [r4, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80024f0:	6825      	ldr	r5, [r4, #0]
 80024f2:	4329      	orrs	r1, r5
 80024f4:	6021      	str	r1, [r4, #0]
 80024f6:	e77f      	b.n	80023f8 <LL_EXTI_Init+0x14>
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80024f8:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 80024fc:	6825      	ldr	r5, [r4, #0]
 80024fe:	ea25 0501 	bic.w	r5, r5, r1
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002502:	6025      	str	r5, [r4, #0]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8002504:	6865      	ldr	r5, [r4, #4]
 8002506:	4329      	orrs	r1, r5
 8002508:	6061      	str	r1, [r4, #4]
 800250a:	e775      	b.n	80023f8 <LL_EXTI_Init+0x14>
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800250c:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 8002510:	6825      	ldr	r5, [r4, #0]
 8002512:	430d      	orrs	r5, r1
 8002514:	e7f5      	b.n	8002502 <LL_EXTI_Init+0x11e>
 8002516:	2501      	movs	r5, #1
 8002518:	e76f      	b.n	80023fa <LL_EXTI_Init+0x16>
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800251a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800251e:	6a0c      	ldr	r4, [r1, #32]
 8002520:	ea24 0402 	bic.w	r4, r4, r2
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8002524:	620c      	str	r4, [r1, #32]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8002526:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8002528:	4322      	orrs	r2, r4
 800252a:	624a      	str	r2, [r1, #36]	; 0x24
}
 800252c:	e78e      	b.n	800244c <LL_EXTI_Init+0x68>
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800252e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002532:	6a0c      	ldr	r4, [r1, #32]
 8002534:	4314      	orrs	r4, r2
 8002536:	e7f5      	b.n	8002524 <LL_EXTI_Init+0x140>
        switch (EXTI_InitStruct->Trigger)
 8002538:	2501      	movs	r5, #1
 800253a:	e787      	b.n	800244c <LL_EXTI_Init+0x68>
  CLEAR_BIT(EXTI->RTSR3, ExtiLine);
 800253c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002540:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8002542:	ea21 0103 	bic.w	r1, r1, r3
  SET_BIT(EXTI->RTSR3, ExtiLine);
 8002546:	6411      	str	r1, [r2, #64]	; 0x40
  SET_BIT(EXTI->FTSR3, ExtiLine);
 8002548:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800254a:	430b      	orrs	r3, r1
 800254c:	6453      	str	r3, [r2, #68]	; 0x44
}
 800254e:	e7a7      	b.n	80024a0 <LL_EXTI_Init+0xbc>
  SET_BIT(EXTI->RTSR3, ExtiLine);
 8002550:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002554:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8002556:	4319      	orrs	r1, r3
 8002558:	e7f5      	b.n	8002546 <LL_EXTI_Init+0x162>
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800255a:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 800255e:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8002562:	ea20 0001 	bic.w	r0, r0, r1
 8002566:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800256a:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 800256e:	ea20 0002 	bic.w	r0, r0, r2
 8002572:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
  CLEAR_BIT(EXTI->IMR3, ExtiLine);
 8002576:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 800257a:	ea20 0003 	bic.w	r0, r0, r3
 800257e:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8002582:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8002586:	ea20 0101 	bic.w	r1, r0, r1
 800258a:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800258e:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8002592:	ea21 0202 	bic.w	r2, r1, r2
 8002596:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
  CLEAR_BIT(EXTI->EMR3, ExtiLine);
 800259a:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 800259e:	ea22 0303 	bic.w	r3, r2, r3
 80025a2:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
}
 80025a6:	e77b      	b.n	80024a0 <LL_EXTI_Init+0xbc>
        switch (EXTI_InitStruct->Trigger)
 80025a8:	2501      	movs	r5, #1
 80025aa:	e779      	b.n	80024a0 <LL_EXTI_Init+0xbc>

080025ac <LL_AHB4_GRP1_ForceReset>:
  SET_BIT(RCC->AHB4RSTR, Periphs);
 80025ac:	4a03      	ldr	r2, [pc, #12]	; (80025bc <LL_AHB4_GRP1_ForceReset+0x10>)
 80025ae:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80025b2:	4318      	orrs	r0, r3
 80025b4:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
}
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	58024400 	.word	0x58024400

080025c0 <LL_AHB4_GRP1_ReleaseReset>:
  CLEAR_BIT(RCC->AHB4RSTR, Periphs);
 80025c0:	4a03      	ldr	r2, [pc, #12]	; (80025d0 <LL_AHB4_GRP1_ReleaseReset+0x10>)
 80025c2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80025c6:	ea23 0000 	bic.w	r0, r3, r0
 80025ca:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
}
 80025ce:	4770      	bx	lr
 80025d0:	58024400 	.word	0x58024400

080025d4 <LL_GPIO_DeInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are de-initialized
  *          - ERROR:   Wrong GPIO Port
  */
ErrorStatus LL_GPIO_DeInit(GPIO_TypeDef *GPIOx)
{
 80025d4:	b508      	push	{r3, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Force and Release reset on clock of GPIOx Port */
  if (GPIOx == GPIOA)
 80025d6:	4b31      	ldr	r3, [pc, #196]	; (800269c <LL_GPIO_DeInit+0xc8>)
 80025d8:	4298      	cmp	r0, r3
 80025da:	d107      	bne.n	80025ec <LL_GPIO_DeInit+0x18>
  {
    LL_AHB4_GRP1_ForceReset(LL_AHB4_GRP1_PERIPH_GPIOA);
 80025dc:	2001      	movs	r0, #1
 80025de:	f7ff ffe5 	bl	80025ac <LL_AHB4_GRP1_ForceReset>
    LL_AHB4_GRP1_ReleaseReset(LL_AHB4_GRP1_PERIPH_GPIOA);
 80025e2:	2001      	movs	r0, #1
#endif /* GPIOJ */
#if defined(GPIOK)
  else if (GPIOx == GPIOK)
  {
    LL_AHB4_GRP1_ForceReset(LL_AHB4_GRP1_PERIPH_GPIOK);
    LL_AHB4_GRP1_ReleaseReset(LL_AHB4_GRP1_PERIPH_GPIOK);
 80025e4:	f7ff ffec 	bl	80025c0 <LL_AHB4_GRP1_ReleaseReset>
  ErrorStatus status = SUCCESS;
 80025e8:	2000      	movs	r0, #0
  {
    status = ERROR;
  }

  return (status);
}
 80025ea:	bd08      	pop	{r3, pc}
  else if (GPIOx == GPIOB)
 80025ec:	4b2c      	ldr	r3, [pc, #176]	; (80026a0 <LL_GPIO_DeInit+0xcc>)
 80025ee:	4298      	cmp	r0, r3
 80025f0:	d104      	bne.n	80025fc <LL_GPIO_DeInit+0x28>
    LL_AHB4_GRP1_ForceReset(LL_AHB4_GRP1_PERIPH_GPIOB);
 80025f2:	2002      	movs	r0, #2
 80025f4:	f7ff ffda 	bl	80025ac <LL_AHB4_GRP1_ForceReset>
    LL_AHB4_GRP1_ReleaseReset(LL_AHB4_GRP1_PERIPH_GPIOB);
 80025f8:	2002      	movs	r0, #2
 80025fa:	e7f3      	b.n	80025e4 <LL_GPIO_DeInit+0x10>
  else if (GPIOx == GPIOC)
 80025fc:	4b29      	ldr	r3, [pc, #164]	; (80026a4 <LL_GPIO_DeInit+0xd0>)
 80025fe:	4298      	cmp	r0, r3
 8002600:	d104      	bne.n	800260c <LL_GPIO_DeInit+0x38>
    LL_AHB4_GRP1_ForceReset(LL_AHB4_GRP1_PERIPH_GPIOC);
 8002602:	2004      	movs	r0, #4
 8002604:	f7ff ffd2 	bl	80025ac <LL_AHB4_GRP1_ForceReset>
    LL_AHB4_GRP1_ReleaseReset(LL_AHB4_GRP1_PERIPH_GPIOC);
 8002608:	2004      	movs	r0, #4
 800260a:	e7eb      	b.n	80025e4 <LL_GPIO_DeInit+0x10>
  else if (GPIOx == GPIOD)
 800260c:	4b26      	ldr	r3, [pc, #152]	; (80026a8 <LL_GPIO_DeInit+0xd4>)
 800260e:	4298      	cmp	r0, r3
 8002610:	d104      	bne.n	800261c <LL_GPIO_DeInit+0x48>
    LL_AHB4_GRP1_ForceReset(LL_AHB4_GRP1_PERIPH_GPIOD);
 8002612:	2008      	movs	r0, #8
 8002614:	f7ff ffca 	bl	80025ac <LL_AHB4_GRP1_ForceReset>
    LL_AHB4_GRP1_ReleaseReset(LL_AHB4_GRP1_PERIPH_GPIOD);
 8002618:	2008      	movs	r0, #8
 800261a:	e7e3      	b.n	80025e4 <LL_GPIO_DeInit+0x10>
  else if (GPIOx == GPIOE)
 800261c:	4b23      	ldr	r3, [pc, #140]	; (80026ac <LL_GPIO_DeInit+0xd8>)
 800261e:	4298      	cmp	r0, r3
 8002620:	d104      	bne.n	800262c <LL_GPIO_DeInit+0x58>
    LL_AHB4_GRP1_ForceReset(LL_AHB4_GRP1_PERIPH_GPIOE);
 8002622:	2010      	movs	r0, #16
 8002624:	f7ff ffc2 	bl	80025ac <LL_AHB4_GRP1_ForceReset>
    LL_AHB4_GRP1_ReleaseReset(LL_AHB4_GRP1_PERIPH_GPIOE);
 8002628:	2010      	movs	r0, #16
 800262a:	e7db      	b.n	80025e4 <LL_GPIO_DeInit+0x10>
  else if (GPIOx == GPIOF)
 800262c:	4b20      	ldr	r3, [pc, #128]	; (80026b0 <LL_GPIO_DeInit+0xdc>)
 800262e:	4298      	cmp	r0, r3
 8002630:	d104      	bne.n	800263c <LL_GPIO_DeInit+0x68>
    LL_AHB4_GRP1_ForceReset(LL_AHB4_GRP1_PERIPH_GPIOF);
 8002632:	2020      	movs	r0, #32
 8002634:	f7ff ffba 	bl	80025ac <LL_AHB4_GRP1_ForceReset>
    LL_AHB4_GRP1_ReleaseReset(LL_AHB4_GRP1_PERIPH_GPIOF);
 8002638:	2020      	movs	r0, #32
 800263a:	e7d3      	b.n	80025e4 <LL_GPIO_DeInit+0x10>
  else if (GPIOx == GPIOG)
 800263c:	4b1d      	ldr	r3, [pc, #116]	; (80026b4 <LL_GPIO_DeInit+0xe0>)
 800263e:	4298      	cmp	r0, r3
 8002640:	d104      	bne.n	800264c <LL_GPIO_DeInit+0x78>
    LL_AHB4_GRP1_ForceReset(LL_AHB4_GRP1_PERIPH_GPIOG);
 8002642:	2040      	movs	r0, #64	; 0x40
 8002644:	f7ff ffb2 	bl	80025ac <LL_AHB4_GRP1_ForceReset>
    LL_AHB4_GRP1_ReleaseReset(LL_AHB4_GRP1_PERIPH_GPIOG);
 8002648:	2040      	movs	r0, #64	; 0x40
 800264a:	e7cb      	b.n	80025e4 <LL_GPIO_DeInit+0x10>
  else if (GPIOx == GPIOH)
 800264c:	4b1a      	ldr	r3, [pc, #104]	; (80026b8 <LL_GPIO_DeInit+0xe4>)
 800264e:	4298      	cmp	r0, r3
 8002650:	d104      	bne.n	800265c <LL_GPIO_DeInit+0x88>
    LL_AHB4_GRP1_ForceReset(LL_AHB4_GRP1_PERIPH_GPIOH);
 8002652:	2080      	movs	r0, #128	; 0x80
 8002654:	f7ff ffaa 	bl	80025ac <LL_AHB4_GRP1_ForceReset>
    LL_AHB4_GRP1_ReleaseReset(LL_AHB4_GRP1_PERIPH_GPIOH);
 8002658:	2080      	movs	r0, #128	; 0x80
 800265a:	e7c3      	b.n	80025e4 <LL_GPIO_DeInit+0x10>
  else if (GPIOx == GPIOI)
 800265c:	4b17      	ldr	r3, [pc, #92]	; (80026bc <LL_GPIO_DeInit+0xe8>)
 800265e:	4298      	cmp	r0, r3
 8002660:	d106      	bne.n	8002670 <LL_GPIO_DeInit+0x9c>
    LL_AHB4_GRP1_ForceReset(LL_AHB4_GRP1_PERIPH_GPIOI);
 8002662:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002666:	f7ff ffa1 	bl	80025ac <LL_AHB4_GRP1_ForceReset>
    LL_AHB4_GRP1_ReleaseReset(LL_AHB4_GRP1_PERIPH_GPIOI);
 800266a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800266e:	e7b9      	b.n	80025e4 <LL_GPIO_DeInit+0x10>
  else if (GPIOx == GPIOJ)
 8002670:	4b13      	ldr	r3, [pc, #76]	; (80026c0 <LL_GPIO_DeInit+0xec>)
 8002672:	4298      	cmp	r0, r3
 8002674:	d106      	bne.n	8002684 <LL_GPIO_DeInit+0xb0>
    LL_AHB4_GRP1_ForceReset(LL_AHB4_GRP1_PERIPH_GPIOJ);
 8002676:	f44f 7000 	mov.w	r0, #512	; 0x200
 800267a:	f7ff ff97 	bl	80025ac <LL_AHB4_GRP1_ForceReset>
    LL_AHB4_GRP1_ReleaseReset(LL_AHB4_GRP1_PERIPH_GPIOJ);
 800267e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002682:	e7af      	b.n	80025e4 <LL_GPIO_DeInit+0x10>
  else if (GPIOx == GPIOK)
 8002684:	4b0f      	ldr	r3, [pc, #60]	; (80026c4 <LL_GPIO_DeInit+0xf0>)
 8002686:	4298      	cmp	r0, r3
 8002688:	d106      	bne.n	8002698 <LL_GPIO_DeInit+0xc4>
    LL_AHB4_GRP1_ForceReset(LL_AHB4_GRP1_PERIPH_GPIOK);
 800268a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800268e:	f7ff ff8d 	bl	80025ac <LL_AHB4_GRP1_ForceReset>
    LL_AHB4_GRP1_ReleaseReset(LL_AHB4_GRP1_PERIPH_GPIOK);
 8002692:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002696:	e7a5      	b.n	80025e4 <LL_GPIO_DeInit+0x10>
    status = ERROR;
 8002698:	2001      	movs	r0, #1
 800269a:	e7a6      	b.n	80025ea <LL_GPIO_DeInit+0x16>
 800269c:	58020000 	.word	0x58020000
 80026a0:	58020400 	.word	0x58020400
 80026a4:	58020800 	.word	0x58020800
 80026a8:	58020c00 	.word	0x58020c00
 80026ac:	58021000 	.word	0x58021000
 80026b0:	58021400 	.word	0x58021400
 80026b4:	58021800 	.word	0x58021800
 80026b8:	58021c00 	.word	0x58021c00
 80026bc:	58022000 	.word	0x58022000
 80026c0:	58022400 	.word	0x58022400
 80026c4:	58022800 	.word	0x58022800

080026c8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80026c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026cc:	4602      	mov	r2, r0
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80026ce:	680d      	ldr	r5, [r1, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d0:	fa95 f4a5 	rbit	r4, r5

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 80026d4:	f04f 0e01 	mov.w	lr, #1
  return __builtin_clz(value);
 80026d8:	fab4 f484 	clz	r4, r4
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80026dc:	ea6f 0805 	mvn.w	r8, r5
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80026e0:	fa35 f004 	lsrs.w	r0, r5, r4
 80026e4:	d101      	bne.n	80026ea <LL_GPIO_Init+0x22>
    }
    pinpos++;
  }

  return (SUCCESS);
}
 80026e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 80026ea:	fa0e f304 	lsl.w	r3, lr, r4
    if (currentpin != 0x00000000U)
 80026ee:	402b      	ands	r3, r5
 80026f0:	d03f      	beq.n	8002772 <LL_GPIO_Init+0xaa>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80026f2:	f8d1 c004 	ldr.w	ip, [r1, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80026f6:	fb03 f603 	mul.w	r6, r3, r3
 80026fa:	f10c 37ff 	add.w	r7, ip, #4294967295
 80026fe:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8002702:	2f01      	cmp	r7, #1
 8002704:	ea6f 0000 	mvn.w	r0, r0
 8002708:	d810      	bhi.n	800272c <LL_GPIO_Init+0x64>
 800270a:	f8d2 9008 	ldr.w	r9, [r2, #8]
 800270e:	688f      	ldr	r7, [r1, #8]
 8002710:	ea09 0900 	and.w	r9, r9, r0
 8002714:	4377      	muls	r7, r6
 8002716:	ea47 0709 	orr.w	r7, r7, r9
 800271a:	6097      	str	r7, [r2, #8]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800271c:	6857      	ldr	r7, [r2, #4]
 800271e:	ea08 0907 	and.w	r9, r8, r7
 8002722:	68cf      	ldr	r7, [r1, #12]
 8002724:	436f      	muls	r7, r5
 8002726:	ea49 0707 	orr.w	r7, r9, r7
 800272a:	6057      	str	r7, [r2, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800272c:	f8d2 900c 	ldr.w	r9, [r2, #12]
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002730:	f1bc 0f02 	cmp.w	ip, #2
 8002734:	690f      	ldr	r7, [r1, #16]
 8002736:	ea09 0900 	and.w	r9, r9, r0
 800273a:	fb06 f707 	mul.w	r7, r6, r7
 800273e:	ea47 0709 	orr.w	r7, r7, r9
 8002742:	60d7      	str	r7, [r2, #12]
 8002744:	d10f      	bne.n	8002766 <LL_GPIO_Init+0x9e>
        if (currentpin < LL_GPIO_PIN_8)
 8002746:	2bff      	cmp	r3, #255	; 0xff
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002748:	f8d1 9014 	ldr.w	r9, [r1, #20]
        if (currentpin < LL_GPIO_PIN_8)
 800274c:	d813      	bhi.n	8002776 <LL_GPIO_Init+0xae>
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800274e:	fb06 f706 	mul.w	r7, r6, r6
 8002752:	6a13      	ldr	r3, [r2, #32]
 8002754:	ebc7 1a07 	rsb	sl, r7, r7, lsl #4
 8002758:	fb07 f909 	mul.w	r9, r7, r9
 800275c:	ea23 030a 	bic.w	r3, r3, sl
 8002760:	ea43 0309 	orr.w	r3, r3, r9
 8002764:	6213      	str	r3, [r2, #32]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8002766:	6813      	ldr	r3, [r2, #0]
 8002768:	fb06 f60c 	mul.w	r6, r6, ip
 800276c:	4018      	ands	r0, r3
 800276e:	4330      	orrs	r0, r6
 8002770:	6010      	str	r0, [r2, #0]
    pinpos++;
 8002772:	3401      	adds	r4, #1
 8002774:	e7b4      	b.n	80026e0 <LL_GPIO_Init+0x18>
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8002776:	0a1b      	lsrs	r3, r3, #8
 8002778:	6a57      	ldr	r7, [r2, #36]	; 0x24
 800277a:	435b      	muls	r3, r3
 800277c:	435b      	muls	r3, r3
 800277e:	ebc3 1a03 	rsb	sl, r3, r3, lsl #4
 8002782:	fb03 f309 	mul.w	r3, r3, r9
 8002786:	ea27 070a 	bic.w	r7, r7, sl
 800278a:	433b      	orrs	r3, r7
 800278c:	6253      	str	r3, [r2, #36]	; 0x24
}
 800278e:	e7ea      	b.n	8002766 <LL_GPIO_Init+0x9e>

08002790 <LL_RCC_HSI_IsReady>:
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY))?1UL:0UL);
 8002790:	4b02      	ldr	r3, [pc, #8]	; (800279c <LL_RCC_HSI_IsReady+0xc>)
 8002792:	6818      	ldr	r0, [r3, #0]
}
 8002794:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	58024400 	.word	0x58024400

080027a0 <LL_RCC_PLL1_IsReady>:
  return ((READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == (RCC_CR_PLL1RDY))?1UL:0UL);
 80027a0:	4b02      	ldr	r3, [pc, #8]	; (80027ac <LL_RCC_PLL1_IsReady+0xc>)
 80027a2:	6818      	ldr	r0, [r3, #0]
}
 80027a4:	f3c0 6040 	ubfx	r0, r0, #25, #1
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	58024400 	.word	0x58024400

080027b0 <LL_RCC_PLL2_IsReady>:
  * @rmtoll CR           PLL2RDY        LL_RCC_PLL2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_PLL2RDY) == (RCC_CR_PLL2RDY))?1UL:0UL);
 80027b0:	4b02      	ldr	r3, [pc, #8]	; (80027bc <LL_RCC_PLL2_IsReady+0xc>)
 80027b2:	6818      	ldr	r0, [r3, #0]
}
 80027b4:	f3c0 60c0 	ubfx	r0, r0, #27, #1
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	58024400 	.word	0x58024400

080027c0 <LL_RCC_PLL3_IsReady>:
  * @rmtoll CR           PLL3RDY        LL_RCC_PLL3_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_PLL3RDY) == (RCC_CR_PLL3RDY))?1UL:0UL);
 80027c0:	4b02      	ldr	r3, [pc, #8]	; (80027cc <LL_RCC_PLL3_IsReady+0xc>)
 80027c2:	6818      	ldr	r0, [r3, #0]
}
 80027c4:	f3c0 7040 	ubfx	r0, r0, #29, #1
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	58024400 	.word	0x58024400

080027d0 <LL_RCC_DeInit>:
  * @retval None
  */
void LL_RCC_DeInit(void)
{
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80027d0:	4a29      	ldr	r2, [pc, #164]	; (8002878 <LL_RCC_DeInit+0xa8>)
{
 80027d2:	b508      	push	{r3, lr}
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80027d4:	6813      	ldr	r3, [r2, #0]
 80027d6:	f003 030f 	and.w	r3, r3, #15
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d805      	bhi.n	80027ea <LL_RCC_DeInit+0x1a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80027de:	6813      	ldr	r3, [r2, #0]
 80027e0:	f023 030f 	bic.w	r3, r3, #15
 80027e4:	f043 0303 	orr.w	r3, r3, #3
 80027e8:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80027ea:	4a24      	ldr	r2, [pc, #144]	; (800287c <LL_RCC_DeInit+0xac>)
 80027ec:	6813      	ldr	r3, [r2, #0]
 80027ee:	f043 0301 	orr.w	r3, r3, #1
 80027f2:	6013      	str	r3, [r2, #0]

  /* Wait for HSI READY bit */
  while(LL_RCC_HSI_IsReady() == 0U)
 80027f4:	f7ff ffcc 	bl	8002790 <LL_RCC_HSI_IsReady>
 80027f8:	2800      	cmp	r0, #0
 80027fa:	d0fb      	beq.n	80027f4 <LL_RCC_DeInit+0x24>
  {}

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 80027fc:	2300      	movs	r3, #0
 80027fe:	6113      	str	r3, [r2, #16]

  /* Reset CSION , CSIKERON, HSEON, HSI48ON, HSECSSON,HSIDIV, PLL1ON, PLL2ON, PLL3ON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSIKERON| RCC_CR_HSIDIV| RCC_CR_HSIDIVF| RCC_CR_CSION | RCC_CR_CSIKERON |  RCC_CR_HSI48ON  \
 8002800:	4b1f      	ldr	r3, [pc, #124]	; (8002880 <LL_RCC_DeInit+0xb0>)
 8002802:	6811      	ldr	r1, [r2, #0]
 8002804:	400b      	ands	r3, r1
 8002806:	6013      	str	r3, [r2, #0]
  |RCC_CR_CSSHSEON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);

  /* Wait for PLL1 READY bit to be reset */
  while(LL_RCC_PLL1_IsReady() != 0U)
 8002808:	f7ff ffca 	bl	80027a0 <LL_RCC_PLL1_IsReady>
 800280c:	2800      	cmp	r0, #0
 800280e:	d1fb      	bne.n	8002808 <LL_RCC_DeInit+0x38>
  {}

  /* Wait for PLL2 READY bit to be reset */
  while(LL_RCC_PLL2_IsReady() != 0U)
 8002810:	f7ff ffce 	bl	80027b0 <LL_RCC_PLL2_IsReady>
 8002814:	2800      	cmp	r0, #0
 8002816:	d1fb      	bne.n	8002810 <LL_RCC_DeInit+0x40>
  {}

  /* Wait for PLL3 READY bit to be reset */
  while(LL_RCC_PLL3_IsReady() != 0U)
 8002818:	f7ff ffd2 	bl	80027c0 <LL_RCC_PLL3_IsReady>
 800281c:	2800      	cmp	r0, #0
 800281e:	d1fb      	bne.n	8002818 <LL_RCC_DeInit+0x48>

  /* Reset D3CFGR register */
  CLEAR_REG(RCC->D3CFGR);
#else
  /* Reset CDCFGR1 register */
  CLEAR_REG(RCC->CDCFGR1);
 8002820:	4b16      	ldr	r3, [pc, #88]	; (800287c <LL_RCC_DeInit+0xac>)
  CLEAR_REG(RCC->SRDCFGR);

#endif /* RCC_D1CFGR_HPRE */

  /* Reset PLLCKSELR register to default value */
  RCC->PLLCKSELR= RCC_PLLCKSELR_DIVM1_5|RCC_PLLCKSELR_DIVM2_5|RCC_PLLCKSELR_DIVM3_5;
 8002822:	4a18      	ldr	r2, [pc, #96]	; (8002884 <LL_RCC_DeInit+0xb4>)
  CLEAR_REG(RCC->CDCFGR1);
 8002824:	6198      	str	r0, [r3, #24]
  CLEAR_REG(RCC->CDCFGR2);
 8002826:	61d8      	str	r0, [r3, #28]
  CLEAR_REG(RCC->SRDCFGR);
 8002828:	6218      	str	r0, [r3, #32]
  RCC->PLLCKSELR= RCC_PLLCKSELR_DIVM1_5|RCC_PLLCKSELR_DIVM2_5|RCC_PLLCKSELR_DIVM3_5;
 800282a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register to default value */
  LL_RCC_WriteReg(PLLCFGR, 0x01FF0000U);
 800282c:	4a16      	ldr	r2, [pc, #88]	; (8002888 <LL_RCC_DeInit+0xb8>)
 800282e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset PLL1DIVR register to default value */
  LL_RCC_WriteReg(PLL1DIVR, 0x01010280U);
 8002830:	4a16      	ldr	r2, [pc, #88]	; (800288c <LL_RCC_DeInit+0xbc>)
 8002832:	631a      	str	r2, [r3, #48]	; 0x30

  /* Reset PLL1FRACR register */
  CLEAR_REG(RCC->PLL1FRACR);
 8002834:	6358      	str	r0, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register to default value */
  LL_RCC_WriteReg(PLL2DIVR, 0x01010280U);
 8002836:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */
  CLEAR_REG(RCC->PLL2FRACR);
 8002838:	63d8      	str	r0, [r3, #60]	; 0x3c

  /* Reset PLL3DIVR register to default value */
  LL_RCC_WriteReg(PLL3DIVR, 0x01010280U);
 800283a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  CLEAR_REG(RCC->PLL3FRACR);
 800283c:	6458      	str	r0, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002844:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 8002846:	6618      	str	r0, [r3, #96]	; 0x60

  /* Clear all interrupts */
  SET_BIT(RCC->CICR, RCC_CICR_LSIRDYC | RCC_CICR_LSERDYC | RCC_CICR_HSIRDYC | RCC_CICR_HSERDYC
 8002848:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800284a:	ea6f 22d2 	mvn.w	r2, r2, lsr #11
 800284e:	ea6f 22c2 	mvn.w	r2, r2, lsl #11
 8002852:	669a      	str	r2, [r3, #104]	; 0x68
                   | RCC_CICR_CSIRDYC | RCC_CICR_HSI48RDYC | RCC_CICR_PLLRDYC | RCC_CICR_PLL2RDYC
                   | RCC_CICR_PLL3RDYC | RCC_CICR_LSECSSC | RCC_CICR_HSECSSC);

  /* Clear reset source flags */
  SET_BIT(RCC->RSR, RCC_RSR_RMVF);
 8002854:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 8002858:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800285c:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002860:	4a05      	ldr	r2, [pc, #20]	; (8002878 <LL_RCC_DeInit+0xa8>)
 8002862:	6813      	ldr	r3, [r2, #0]
 8002864:	f013 0f0c 	tst.w	r3, #12
 8002868:	d005      	beq.n	8002876 <LL_RCC_DeInit+0xa6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800286a:	6813      	ldr	r3, [r2, #0]
 800286c:	f023 030f 	bic.w	r3, r3, #15
 8002870:	f043 0303 	orr.w	r3, r3, #3
 8002874:	6013      	str	r3, [r2, #0]
  }

}
 8002876:	bd08      	pop	{r3, pc}
 8002878:	52002000 	.word	0x52002000
 800287c:	58024400 	.word	0x58024400
 8002880:	eaf6ed45 	.word	0xeaf6ed45
 8002884:	02020200 	.word	0x02020200
 8002888:	01ff0000 	.word	0x01ff0000
 800288c:	01010280 	.word	0x01010280

08002890 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002890:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8002892:	2300      	movs	r3, #0
  /* Wait for AHB master IDLE state. */
  do
  {
    count++;

    if (count > 200000U)
 8002894:	4a10      	ldr	r2, [pc, #64]	; (80028d8 <USB_CoreReset+0x48>)
  __IO uint32_t count = 0U;
 8002896:	9301      	str	r3, [sp, #4]
    count++;
 8002898:	9b01      	ldr	r3, [sp, #4]
 800289a:	3301      	adds	r3, #1
 800289c:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800289e:	9b01      	ldr	r3, [sp, #4]
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d816      	bhi.n	80028d2 <USB_CoreReset+0x42>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80028a4:	6903      	ldr	r3, [r0, #16]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	daf6      	bge.n	8002898 <USB_CoreReset+0x8>

  /* Core Soft Reset */
  count = 0U;
 80028aa:	2300      	movs	r3, #0

  do
  {
    count++;

    if (count > 200000U)
 80028ac:	4a0a      	ldr	r2, [pc, #40]	; (80028d8 <USB_CoreReset+0x48>)
  count = 0U;
 80028ae:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80028b0:	6903      	ldr	r3, [r0, #16]
 80028b2:	f043 0301 	orr.w	r3, r3, #1
 80028b6:	6103      	str	r3, [r0, #16]
    count++;
 80028b8:	9b01      	ldr	r3, [sp, #4]
 80028ba:	3301      	adds	r3, #1
 80028bc:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 80028be:	9b01      	ldr	r3, [sp, #4]
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d806      	bhi.n	80028d2 <USB_CoreReset+0x42>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80028c4:	6903      	ldr	r3, [r0, #16]
 80028c6:	f013 0301 	ands.w	r3, r3, #1
 80028ca:	d1f5      	bne.n	80028b8 <USB_CoreReset+0x28>

  return HAL_OK;
 80028cc:	4618      	mov	r0, r3
}
 80028ce:	b002      	add	sp, #8
 80028d0:	4770      	bx	lr
      return HAL_TIMEOUT;
 80028d2:	2003      	movs	r0, #3
 80028d4:	e7fb      	b.n	80028ce <USB_CoreReset+0x3e>
 80028d6:	bf00      	nop
 80028d8:	00030d40 	.word	0x00030d40

080028dc <USB_CoreInit>:
{
 80028dc:	b084      	sub	sp, #16
 80028de:	b538      	push	{r3, r4, r5, lr}
 80028e0:	ad05      	add	r5, sp, #20
 80028e2:	4604      	mov	r4, r0
 80028e4:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80028e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d12f      	bne.n	800294e <USB_CoreInit+0x72>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80028ee:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80028f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028f4:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80028f6:	68c3      	ldr	r3, [r0, #12]
 80028f8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80028fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002900:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002902:	68c3      	ldr	r3, [r0, #12]
 8002904:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002908:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 800290a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800290c:	2b01      	cmp	r3, #1
 800290e:	d103      	bne.n	8002918 <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002910:	68c3      	ldr	r3, [r0, #12]
 8002912:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002916:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8002918:	4620      	mov	r0, r4
 800291a:	f7ff ffb9 	bl	8002890 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 800291e:	9b08      	ldr	r3, [sp, #32]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d110      	bne.n	8002946 <USB_CoreInit+0x6a>
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8002924:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002926:	b29b      	uxth	r3, r3
 8002928:	65e3      	str	r3, [r4, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800292a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800292c:	f043 737b 	orr.w	r3, r3, #65798144	; 0x3ec0000
 8002930:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002934:	65e3      	str	r3, [r4, #92]	; 0x5c
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002936:	68a3      	ldr	r3, [r4, #8]
 8002938:	f043 0306 	orr.w	r3, r3, #6
 800293c:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800293e:	68a3      	ldr	r3, [r4, #8]
 8002940:	f043 0320 	orr.w	r3, r3, #32
 8002944:	60a3      	str	r3, [r4, #8]
}
 8002946:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800294a:	b004      	add	sp, #16
 800294c:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800294e:	68c3      	ldr	r3, [r0, #12]
 8002950:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002954:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8002956:	f7ff ff9b 	bl	8002890 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 800295a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800295c:	b923      	cbnz	r3, 8002968 <USB_CoreInit+0x8c>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800295e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002960:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002964:	63a3      	str	r3, [r4, #56]	; 0x38
 8002966:	e7da      	b.n	800291e <USB_CoreInit+0x42>
 8002968:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800296a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800296e:	e7f9      	b.n	8002964 <USB_CoreInit+0x88>

08002970 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8002970:	2a02      	cmp	r2, #2
 8002972:	d14a      	bne.n	8002a0a <USB_SetTurnaroundTime+0x9a>
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002974:	4b27      	ldr	r3, [pc, #156]	; (8002a14 <USB_SetTurnaroundTime+0xa4>)
 8002976:	4a28      	ldr	r2, [pc, #160]	; (8002a18 <USB_SetTurnaroundTime+0xa8>)
 8002978:	440b      	add	r3, r1
 800297a:	4293      	cmp	r3, r2
 800297c:	d939      	bls.n	80029f2 <USB_SetTurnaroundTime+0x82>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800297e:	4b27      	ldr	r3, [pc, #156]	; (8002a1c <USB_SetTurnaroundTime+0xac>)
 8002980:	4a27      	ldr	r2, [pc, #156]	; (8002a20 <USB_SetTurnaroundTime+0xb0>)
 8002982:	440b      	add	r3, r1
 8002984:	4293      	cmp	r3, r2
 8002986:	d936      	bls.n	80029f6 <USB_SetTurnaroundTime+0x86>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002988:	f5a1 0374 	sub.w	r3, r1, #15990784	; 0xf40000
 800298c:	4a25      	ldr	r2, [pc, #148]	; (8002a24 <USB_SetTurnaroundTime+0xb4>)
 800298e:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 8002992:	4293      	cmp	r3, r2
 8002994:	d931      	bls.n	80029fa <USB_SetTurnaroundTime+0x8a>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002996:	f1a1 7383 	sub.w	r3, r1, #17170432	; 0x1060000
 800299a:	4a23      	ldr	r2, [pc, #140]	; (8002a28 <USB_SetTurnaroundTime+0xb8>)
 800299c:	f5a3 43e7 	sub.w	r3, r3, #29568	; 0x7380
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d32c      	bcc.n	80029fe <USB_SetTurnaroundTime+0x8e>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80029a4:	4b21      	ldr	r3, [pc, #132]	; (8002a2c <USB_SetTurnaroundTime+0xbc>)
 80029a6:	4a22      	ldr	r2, [pc, #136]	; (8002a30 <USB_SetTurnaroundTime+0xc0>)
 80029a8:	440b      	add	r3, r1
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d929      	bls.n	8002a02 <USB_SetTurnaroundTime+0x92>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80029ae:	4b21      	ldr	r3, [pc, #132]	; (8002a34 <USB_SetTurnaroundTime+0xc4>)
 80029b0:	4a21      	ldr	r2, [pc, #132]	; (8002a38 <USB_SetTurnaroundTime+0xc8>)
 80029b2:	440b      	add	r3, r1
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d326      	bcc.n	8002a06 <USB_SetTurnaroundTime+0x96>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80029b8:	4b20      	ldr	r3, [pc, #128]	; (8002a3c <USB_SetTurnaroundTime+0xcc>)
 80029ba:	4a21      	ldr	r2, [pc, #132]	; (8002a40 <USB_SetTurnaroundTime+0xd0>)
 80029bc:	440b      	add	r3, r1
 80029be:	4293      	cmp	r3, r2
 80029c0:	d323      	bcc.n	8002a0a <USB_SetTurnaroundTime+0x9a>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80029c2:	f1a1 73b7 	sub.w	r3, r1, #23986176	; 0x16e0000
 80029c6:	4a1f      	ldr	r2, [pc, #124]	; (8002a44 <USB_SetTurnaroundTime+0xd4>)
 80029c8:	f5a3 5358 	sub.w	r3, r3, #13824	; 0x3600
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d31e      	bcc.n	8002a0e <USB_SetTurnaroundTime+0x9e>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80029d0:	4b1d      	ldr	r3, [pc, #116]	; (8002a48 <USB_SetTurnaroundTime+0xd8>)
      UsbTrd = 0x6U;
 80029d2:	4a1e      	ldr	r2, [pc, #120]	; (8002a4c <USB_SetTurnaroundTime+0xdc>)
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80029d4:	440b      	add	r3, r1
      UsbTrd = 0x6U;
 80029d6:	4293      	cmp	r3, r2
 80029d8:	bf34      	ite	cc
 80029da:	2307      	movcc	r3, #7
 80029dc:	2306      	movcs	r3, #6
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80029de:	68c2      	ldr	r2, [r0, #12]
 80029e0:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 80029e4:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80029e6:	68c2      	ldr	r2, [r0, #12]
 80029e8:	ea42 2383 	orr.w	r3, r2, r3, lsl #10
 80029ec:	60c3      	str	r3, [r0, #12]
}
 80029ee:	2000      	movs	r0, #0
 80029f0:	4770      	bx	lr
      UsbTrd = 0xFU;
 80029f2:	230f      	movs	r3, #15
 80029f4:	e7f3      	b.n	80029de <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xEU;
 80029f6:	230e      	movs	r3, #14
 80029f8:	e7f1      	b.n	80029de <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xDU;
 80029fa:	230d      	movs	r3, #13
 80029fc:	e7ef      	b.n	80029de <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xCU;
 80029fe:	230c      	movs	r3, #12
 8002a00:	e7ed      	b.n	80029de <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xBU;
 8002a02:	230b      	movs	r3, #11
 8002a04:	e7eb      	b.n	80029de <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xAU;
 8002a06:	230a      	movs	r3, #10
 8002a08:	e7e9      	b.n	80029de <USB_SetTurnaroundTime+0x6e>
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002a0a:	2309      	movs	r3, #9
 8002a0c:	e7e7      	b.n	80029de <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0x8U;
 8002a0e:	2308      	movs	r3, #8
 8002a10:	e7e5      	b.n	80029de <USB_SetTurnaroundTime+0x6e>
 8002a12:	bf00      	nop
 8002a14:	ff275340 	.word	0xff275340
 8002a18:	000c34ff 	.word	0x000c34ff
 8002a1c:	ff1b1e40 	.word	0xff1b1e40
 8002a20:	000f423f 	.word	0x000f423f
 8002a24:	00124f7f 	.word	0x00124f7f
 8002a28:	0013d620 	.word	0x0013d620
 8002a2c:	fee5b660 	.word	0xfee5b660
 8002a30:	0016e35f 	.word	0x0016e35f
 8002a34:	feced300 	.word	0xfeced300
 8002a38:	001b7740 	.word	0x001b7740
 8002a3c:	feb35bc0 	.word	0xfeb35bc0
 8002a40:	002191c0 	.word	0x002191c0
 8002a44:	00387520 	.word	0x00387520
 8002a48:	fe5954e0 	.word	0xfe5954e0
 8002a4c:	00419ce0 	.word	0x00419ce0

08002a50 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002a50:	6883      	ldr	r3, [r0, #8]
 8002a52:	f043 0301 	orr.w	r3, r3, #1
 8002a56:	6083      	str	r3, [r0, #8]
}
 8002a58:	2000      	movs	r0, #0
 8002a5a:	4770      	bx	lr

08002a5c <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002a5c:	6883      	ldr	r3, [r0, #8]
 8002a5e:	f023 0301 	bic.w	r3, r3, #1
 8002a62:	6083      	str	r3, [r0, #8]
}
 8002a64:	2000      	movs	r0, #0
 8002a66:	4770      	bx	lr

08002a68 <USB_SetCurrentMode>:
{
 8002a68:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002a6a:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8002a6c:	2901      	cmp	r1, #1
{
 8002a6e:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002a70:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8002a74:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8002a76:	d10f      	bne.n	8002a98 <USB_SetCurrentMode+0x30>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002a78:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 8002a7a:	2400      	movs	r4, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002a7c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002a80:	60c3      	str	r3, [r0, #12]
      HAL_Delay(1U);
 8002a82:	2001      	movs	r0, #1
      ms++;
 8002a84:	3401      	adds	r4, #1
      HAL_Delay(1U);
 8002a86:	f7fe fa03 	bl	8000e90 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8002a8a:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002a8c:	07d9      	lsls	r1, r3, #31
 8002a8e:	d414      	bmi.n	8002aba <USB_SetCurrentMode+0x52>
 8002a90:	2c32      	cmp	r4, #50	; 0x32
 8002a92:	d1f6      	bne.n	8002a82 <USB_SetCurrentMode+0x1a>
    return HAL_ERROR;
 8002a94:	2001      	movs	r0, #1
}
 8002a96:	bd38      	pop	{r3, r4, r5, pc}
  else if (mode == USB_DEVICE_MODE)
 8002a98:	2900      	cmp	r1, #0
 8002a9a:	d1fb      	bne.n	8002a94 <USB_SetCurrentMode+0x2c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002a9c:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 8002a9e:	460c      	mov	r4, r1
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002aa0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002aa4:	60c3      	str	r3, [r0, #12]
      HAL_Delay(1U);
 8002aa6:	2001      	movs	r0, #1
      ms++;
 8002aa8:	3401      	adds	r4, #1
      HAL_Delay(1U);
 8002aaa:	f7fe f9f1 	bl	8000e90 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8002aae:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002ab0:	07da      	lsls	r2, r3, #31
 8002ab2:	d502      	bpl.n	8002aba <USB_SetCurrentMode+0x52>
 8002ab4:	2c32      	cmp	r4, #50	; 0x32
 8002ab6:	d1f6      	bne.n	8002aa6 <USB_SetCurrentMode+0x3e>
 8002ab8:	e7ec      	b.n	8002a94 <USB_SetCurrentMode+0x2c>
    return HAL_ERROR;
 8002aba:	f1a4 0332 	sub.w	r3, r4, #50	; 0x32
 8002abe:	4258      	negs	r0, r3
 8002ac0:	4158      	adcs	r0, r3
 8002ac2:	e7e8      	b.n	8002a96 <USB_SetCurrentMode+0x2e>

08002ac4 <USB_FlushTxFifo>:
{
 8002ac4:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8002ac6:	2300      	movs	r3, #0
    if (count > 200000U)
 8002ac8:	4a10      	ldr	r2, [pc, #64]	; (8002b0c <USB_FlushTxFifo+0x48>)
  __IO uint32_t count = 0U;
 8002aca:	9301      	str	r3, [sp, #4]
    count++;
 8002acc:	9b01      	ldr	r3, [sp, #4]
 8002ace:	3301      	adds	r3, #1
 8002ad0:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8002ad2:	9b01      	ldr	r3, [sp, #4]
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d816      	bhi.n	8002b06 <USB_FlushTxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002ad8:	6903      	ldr	r3, [r0, #16]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	daf6      	bge.n	8002acc <USB_FlushTxFifo+0x8>
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002ade:	0189      	lsls	r1, r1, #6
  count = 0U;
 8002ae0:	2300      	movs	r3, #0
    if (count > 200000U)
 8002ae2:	4a0a      	ldr	r2, [pc, #40]	; (8002b0c <USB_FlushTxFifo+0x48>)
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002ae4:	f041 0120 	orr.w	r1, r1, #32
  count = 0U;
 8002ae8:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002aea:	6101      	str	r1, [r0, #16]
    count++;
 8002aec:	9b01      	ldr	r3, [sp, #4]
 8002aee:	3301      	adds	r3, #1
 8002af0:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8002af2:	9b01      	ldr	r3, [sp, #4]
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d806      	bhi.n	8002b06 <USB_FlushTxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002af8:	6903      	ldr	r3, [r0, #16]
 8002afa:	f013 0320 	ands.w	r3, r3, #32
 8002afe:	d1f5      	bne.n	8002aec <USB_FlushTxFifo+0x28>
  return HAL_OK;
 8002b00:	4618      	mov	r0, r3
}
 8002b02:	b002      	add	sp, #8
 8002b04:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002b06:	2003      	movs	r0, #3
 8002b08:	e7fb      	b.n	8002b02 <USB_FlushTxFifo+0x3e>
 8002b0a:	bf00      	nop
 8002b0c:	00030d40 	.word	0x00030d40

08002b10 <USB_FlushRxFifo>:
{
 8002b10:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8002b12:	2300      	movs	r3, #0
    if (count > 200000U)
 8002b14:	4a0f      	ldr	r2, [pc, #60]	; (8002b54 <USB_FlushRxFifo+0x44>)
  __IO uint32_t count = 0U;
 8002b16:	9301      	str	r3, [sp, #4]
    count++;
 8002b18:	9b01      	ldr	r3, [sp, #4]
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8002b1e:	9b01      	ldr	r3, [sp, #4]
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d814      	bhi.n	8002b4e <USB_FlushRxFifo+0x3e>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002b24:	6903      	ldr	r3, [r0, #16]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	daf6      	bge.n	8002b18 <USB_FlushRxFifo+0x8>
  count = 0U;
 8002b2a:	2300      	movs	r3, #0
    if (count > 200000U)
 8002b2c:	4a09      	ldr	r2, [pc, #36]	; (8002b54 <USB_FlushRxFifo+0x44>)
  count = 0U;
 8002b2e:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002b30:	2310      	movs	r3, #16
 8002b32:	6103      	str	r3, [r0, #16]
    count++;
 8002b34:	9b01      	ldr	r3, [sp, #4]
 8002b36:	3301      	adds	r3, #1
 8002b38:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8002b3a:	9b01      	ldr	r3, [sp, #4]
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d806      	bhi.n	8002b4e <USB_FlushRxFifo+0x3e>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002b40:	6903      	ldr	r3, [r0, #16]
 8002b42:	f013 0310 	ands.w	r3, r3, #16
 8002b46:	d1f5      	bne.n	8002b34 <USB_FlushRxFifo+0x24>
  return HAL_OK;
 8002b48:	4618      	mov	r0, r3
}
 8002b4a:	b002      	add	sp, #8
 8002b4c:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002b4e:	2003      	movs	r0, #3
 8002b50:	e7fb      	b.n	8002b4a <USB_FlushRxFifo+0x3a>
 8002b52:	bf00      	nop
 8002b54:	00030d40 	.word	0x00030d40

08002b58 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8002b58:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002b5c:	4319      	orrs	r1, r3
 8002b5e:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8002b62:	2000      	movs	r0, #0
 8002b64:	4770      	bx	lr
	...

08002b68 <USB_DevInit>:
{
 8002b68:	b084      	sub	sp, #16
 8002b6a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b6e:	4604      	mov	r4, r0
 8002b70:	a809      	add	r0, sp, #36	; 0x24
 8002b72:	460e      	mov	r6, r1
 8002b74:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8002b76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8002b7a:	2300      	movs	r3, #0
    USBx->DIEPTXF[i] = 0U;
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	f103 0240 	add.w	r2, r3, #64	; 0x40
  for (i = 0U; i < 15U; i++)
 8002b82:	3301      	adds	r3, #1
    USBx->DIEPTXF[i] = 0U;
 8002b84:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 8002b88:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 8002b8a:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8002b8c:	d1f7      	bne.n	8002b7e <USB_DevInit+0x16>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002b8e:	f504 6700 	add.w	r7, r4, #2048	; 0x800
  if (cfg.vbus_sensing_enable == 0U)
 8002b92:	2d00      	cmp	r5, #0
 8002b94:	d16c      	bne.n	8002c70 <USB_DevInit+0x108>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f043 0302 	orr.w	r3, r3, #2
 8002b9c:	607b      	str	r3, [r7, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8002b9e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002ba0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ba4:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8002ba6:	6823      	ldr	r3, [r4, #0]
 8002ba8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bac:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8002bae:	6823      	ldr	r3, [r4, #0]
 8002bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bb4:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002bbc:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8002bc0:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002bc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d159      	bne.n	8002c7e <USB_DevInit+0x116>
    if (cfg.speed == USBD_HS_SPEED)
 8002bca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002bcc:	2900      	cmp	r1, #0
 8002bce:	d154      	bne.n	8002c7a <USB_DevInit+0x112>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002bd0:	4620      	mov	r0, r4
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002bd2:	f64f 387f 	movw	r8, #64383	; 0xfb7f
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002bd6:	f7ff ffbf 	bl	8002b58 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002bda:	2110      	movs	r1, #16
 8002bdc:	4620      	mov	r0, r4
 8002bde:	f7ff ff71 	bl	8002ac4 <USB_FlushTxFifo>
 8002be2:	4601      	mov	r1, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002be4:	4620      	mov	r0, r4
 8002be6:	f7ff ff93 	bl	8002b10 <USB_FlushRxFifo>
 8002bea:	4308      	orrs	r0, r1
  USBx_DEVICE->DIEPMSK = 0U;
 8002bec:	2300      	movs	r3, #0
 8002bee:	f504 6210 	add.w	r2, r4, #2304	; 0x900
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002bf2:	b2c0      	uxtb	r0, r0
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002bf4:	f04f 4c90 	mov.w	ip, #1207959552	; 0x48000000
      USBx_INEP(i)->DIEPCTL = 0U;
 8002bf8:	4619      	mov	r1, r3
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002bfa:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
    ret = HAL_ERROR;
 8002bfe:	3800      	subs	r0, #0
  USBx_DEVICE->DIEPMSK = 0U;
 8002c00:	613b      	str	r3, [r7, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002c02:	617b      	str	r3, [r7, #20]
    ret = HAL_ERROR;
 8002c04:	bf18      	it	ne
 8002c06:	2001      	movne	r0, #1
  USBx_DEVICE->DAINTMSK = 0U;
 8002c08:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002c0a:	42b3      	cmp	r3, r6
 8002c0c:	d139      	bne.n	8002c82 <USB_DevInit+0x11a>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002c14:	f04f 4c90 	mov.w	ip, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002c18:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002c1c:	4611      	mov	r1, r2
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002c1e:	f64f 387f 	movw	r8, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002c22:	42b2      	cmp	r2, r6
 8002c24:	d140      	bne.n	8002ca8 <USB_DevInit+0x140>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c2c:	613b      	str	r3, [r7, #16]
  USBx->GINTMSK = 0U;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002c32:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8002c36:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 8002c38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002c3a:	b91b      	cbnz	r3, 8002c44 <USB_DevInit+0xdc>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002c3c:	69a3      	ldr	r3, [r4, #24]
 8002c3e:	f043 0310 	orr.w	r3, r3, #16
 8002c42:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002c44:	69a2      	ldr	r2, [r4, #24]
 8002c46:	4b22      	ldr	r3, [pc, #136]	; (8002cd0 <USB_DevInit+0x168>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8002c4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002c4e:	b11b      	cbz	r3, 8002c58 <USB_DevInit+0xf0>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002c50:	69a3      	ldr	r3, [r4, #24]
 8002c52:	f043 0308 	orr.w	r3, r3, #8
 8002c56:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8002c58:	2d01      	cmp	r5, #1
 8002c5a:	d105      	bne.n	8002c68 <USB_DevInit+0x100>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002c5c:	69a3      	ldr	r3, [r4, #24]
 8002c5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c62:	f043 0304 	orr.w	r3, r3, #4
 8002c66:	61a3      	str	r3, [r4, #24]
}
 8002c68:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c6c:	b004      	add	sp, #16
 8002c6e:	4770      	bx	lr
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8002c70:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002c72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c76:	63a3      	str	r3, [r4, #56]	; 0x38
 8002c78:	e79d      	b.n	8002bb6 <USB_DevInit+0x4e>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	e7a8      	b.n	8002bd0 <USB_DevInit+0x68>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002c7e:	2103      	movs	r1, #3
 8002c80:	e7a6      	b.n	8002bd0 <USB_DevInit+0x68>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002c82:	f8d2 9000 	ldr.w	r9, [r2]
 8002c86:	f1b9 0f00 	cmp.w	r9, #0
 8002c8a:	da0b      	bge.n	8002ca4 <USB_DevInit+0x13c>
      if (i == 0U)
 8002c8c:	b93b      	cbnz	r3, 8002c9e <USB_DevInit+0x136>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002c8e:	f8c2 e000 	str.w	lr, [r2]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002c92:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002c94:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002c96:	f8c2 8008 	str.w	r8, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002c9a:	3220      	adds	r2, #32
 8002c9c:	e7b5      	b.n	8002c0a <USB_DevInit+0xa2>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002c9e:	f8c2 c000 	str.w	ip, [r2]
 8002ca2:	e7f6      	b.n	8002c92 <USB_DevInit+0x12a>
      USBx_INEP(i)->DIEPCTL = 0U;
 8002ca4:	6011      	str	r1, [r2, #0]
 8002ca6:	e7f4      	b.n	8002c92 <USB_DevInit+0x12a>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002ca8:	f8d3 9000 	ldr.w	r9, [r3]
 8002cac:	f1b9 0f00 	cmp.w	r9, #0
 8002cb0:	da0b      	bge.n	8002cca <USB_DevInit+0x162>
      if (i == 0U)
 8002cb2:	b93a      	cbnz	r2, 8002cc4 <USB_DevInit+0x15c>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002cb4:	f8c3 e000 	str.w	lr, [r3]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002cb8:	6119      	str	r1, [r3, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002cba:	3201      	adds	r2, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002cbc:	f8c3 8008 	str.w	r8, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002cc0:	3320      	adds	r3, #32
 8002cc2:	e7ae      	b.n	8002c22 <USB_DevInit+0xba>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002cc4:	f8c3 c000 	str.w	ip, [r3]
 8002cc8:	e7f6      	b.n	8002cb8 <USB_DevInit+0x150>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002cca:	6019      	str	r1, [r3, #0]
 8002ccc:	e7f4      	b.n	8002cb8 <USB_DevInit+0x150>
 8002cce:	bf00      	nop
 8002cd0:	803c3800 	.word	0x803c3800

08002cd4 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8002cd4:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8002cd8:	f013 0006 	ands.w	r0, r3, #6
 8002cdc:	d004      	beq.n	8002ce8 <USB_GetDevSpeed+0x14>
    speed = 0xFU;
 8002cde:	f013 0f02 	tst.w	r3, #2
 8002ce2:	bf14      	ite	ne
 8002ce4:	2002      	movne	r0, #2
 8002ce6:	200f      	moveq	r0, #15
}
 8002ce8:	4770      	bx	lr

08002cea <USB_ActivateEndpoint>:
{
 8002cea:	b530      	push	{r4, r5, lr}
  uint32_t epnum = (uint32_t)ep->num;
 8002cec:	780d      	ldrb	r5, [r1, #0]
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8002cee:	2401      	movs	r4, #1
 8002cf0:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 8002cf4:	f005 030f 	and.w	r3, r5, #15
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8002cf8:	eb00 1045 	add.w	r0, r0, r5, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8002cfc:	409c      	lsls	r4, r3
  if (ep->is_in == 1U)
 8002cfe:	784b      	ldrb	r3, [r1, #1]
 8002d00:	2b01      	cmp	r3, #1
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8002d02:	69d3      	ldr	r3, [r2, #28]
  if (ep->is_in == 1U)
 8002d04:	d118      	bne.n	8002d38 <USB_ActivateEndpoint+0x4e>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8002d06:	431c      	orrs	r4, r3
 8002d08:	61d4      	str	r4, [r2, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8002d0a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002d0e:	041a      	lsls	r2, r3, #16
 8002d10:	d410      	bmi.n	8002d34 <USB_ActivateEndpoint+0x4a>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002d12:	68ca      	ldr	r2, [r1, #12]
 8002d14:	f8d0 4900 	ldr.w	r4, [r0, #2304]	; 0x900
 8002d18:	f3c2 030a 	ubfx	r3, r2, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8002d1c:	790a      	ldrb	r2, [r1, #4]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002d1e:	4323      	orrs	r3, r4
 8002d20:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 8002d24:	ea43 5385 	orr.w	r3, r3, r5, lsl #22
 8002d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d30:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8002d34:	2000      	movs	r0, #0
 8002d36:	bd30      	pop	{r4, r5, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8002d38:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8002d3c:	61d4      	str	r4, [r2, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8002d3e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002d42:	041b      	lsls	r3, r3, #16
 8002d44:	d4f6      	bmi.n	8002d34 <USB_ActivateEndpoint+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8002d46:	68cb      	ldr	r3, [r1, #12]
 8002d48:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8002d4c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d50:	4313      	orrs	r3, r2
                                    ((uint32_t)ep->type << 18) |
 8002d52:	790a      	ldrb	r2, [r1, #4]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8002d54:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 8002d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d60:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8002d64:	e7e6      	b.n	8002d34 <USB_ActivateEndpoint+0x4a>
	...

08002d68 <USB_DeactivateEndpoint>:
{
 8002d68:	b510      	push	{r4, lr}
  uint32_t epnum = (uint32_t)ep->num;
 8002d6a:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8002d6c:	7849      	ldrb	r1, [r1, #1]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002d6e:	eb00 1342 	add.w	r3, r0, r2, lsl #5
 8002d72:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  if (ep->is_in == 1U)
 8002d76:	2901      	cmp	r1, #1
 8002d78:	f002 020f 	and.w	r2, r2, #15
 8002d7c:	d122      	bne.n	8002dc4 <USB_DeactivateEndpoint+0x5c>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002d7e:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 8002d82:	2900      	cmp	r1, #0
 8002d84:	da0b      	bge.n	8002d9e <USB_DeactivateEndpoint+0x36>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002d86:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 8002d8a:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 8002d8e:	f8c3 1900 	str.w	r1, [r3, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8002d92:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 8002d96:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8002d9a:	f8c3 1900 	str.w	r1, [r3, #2304]	; 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8002d9e:	2101      	movs	r1, #1
 8002da0:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002da2:	fa01 f202 	lsl.w	r2, r1, r2
 8002da6:	ea24 0402 	bic.w	r4, r4, r2
 8002daa:	63c4      	str	r4, [r0, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8002dac:	69c1      	ldr	r1, [r0, #28]
 8002dae:	ea21 0202 	bic.w	r2, r1, r2
 8002db2:	61c2      	str	r2, [r0, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8002db4:	4a15      	ldr	r2, [pc, #84]	; (8002e0c <USB_DeactivateEndpoint+0xa4>)
 8002db6:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 8002dba:	400a      	ands	r2, r1
 8002dbc:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
}
 8002dc0:	2000      	movs	r0, #0
 8002dc2:	bd10      	pop	{r4, pc}
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002dc4:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 8002dc8:	2900      	cmp	r1, #0
 8002dca:	da0b      	bge.n	8002de4 <USB_DeactivateEndpoint+0x7c>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002dcc:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 8002dd0:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 8002dd4:	f8c3 1b00 	str.w	r1, [r3, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8002dd8:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 8002ddc:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8002de0:	f8c3 1b00 	str.w	r1, [r3, #2816]	; 0xb00
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8002de4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8002de8:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002dea:	fa01 f202 	lsl.w	r2, r1, r2
 8002dee:	ea24 0402 	bic.w	r4, r4, r2
 8002df2:	63c4      	str	r4, [r0, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8002df4:	69c1      	ldr	r1, [r0, #28]
 8002df6:	ea21 0202 	bic.w	r2, r1, r2
 8002dfa:	61c2      	str	r2, [r0, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8002dfc:	4a04      	ldr	r2, [pc, #16]	; (8002e10 <USB_DeactivateEndpoint+0xa8>)
 8002dfe:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 8002e02:	400a      	ands	r2, r1
 8002e04:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8002e08:	e7da      	b.n	8002dc0 <USB_DeactivateEndpoint+0x58>
 8002e0a:	bf00      	nop
 8002e0c:	ec337800 	.word	0xec337800
 8002e10:	eff37800 	.word	0xeff37800

08002e14 <USB_EP0StartXfer>:
  if (ep->is_in == 1U)
 8002e14:	784b      	ldrb	r3, [r1, #1]
 8002e16:	f8df c0ec 	ldr.w	ip, [pc, #236]	; 8002f04 <USB_EP0StartXfer+0xf0>
 8002e1a:	2b01      	cmp	r3, #1
{
 8002e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t epnum = (uint32_t)ep->num;
 8002e1e:	780e      	ldrb	r6, [r1, #0]
    if (ep->xfer_len == 0U)
 8002e20:	698d      	ldr	r5, [r1, #24]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002e22:	eb00 1446 	add.w	r4, r0, r6, lsl #5
 8002e26:	4f36      	ldr	r7, [pc, #216]	; (8002f00 <USB_EP0StartXfer+0xec>)
  if (ep->is_in == 1U)
 8002e28:	d146      	bne.n	8002eb8 <USB_EP0StartXfer+0xa4>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002e2a:	f504 6310 	add.w	r3, r4, #2304	; 0x900
    if (ep->xfer_len == 0U)
 8002e2e:	b9bd      	cbnz	r5, 8002e60 <USB_EP0StartXfer+0x4c>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002e30:	691d      	ldr	r5, [r3, #16]
 8002e32:	402f      	ands	r7, r5
 8002e34:	611f      	str	r7, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8002e36:	691d      	ldr	r5, [r3, #16]
 8002e38:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8002e3c:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002e3e:	691d      	ldr	r5, [r3, #16]
 8002e40:	ea05 050c 	and.w	r5, r5, ip
    if (dma == 1U)
 8002e44:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8002e46:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 8002e48:	d123      	bne.n	8002e92 <USB_EP0StartXfer+0x7e>
      if ((uint32_t)ep->dma_addr != 0U)
 8002e4a:	694a      	ldr	r2, [r1, #20]
 8002e4c:	b102      	cbz	r2, 8002e50 <USB_EP0StartXfer+0x3c>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8002e4e:	615a      	str	r2, [r3, #20]
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002e50:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 8002e54:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8002e58:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
}
 8002e5c:	2000      	movs	r0, #0
 8002e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002e60:	f8d3 e010 	ldr.w	lr, [r3, #16]
 8002e64:	ea0e 0c0c 	and.w	ip, lr, ip
 8002e68:	f8c3 c010 	str.w	ip, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002e6c:	f8d3 c010 	ldr.w	ip, [r3, #16]
 8002e70:	ea0c 0707 	and.w	r7, ip, r7
 8002e74:	611f      	str	r7, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 8002e76:	68cf      	ldr	r7, [r1, #12]
 8002e78:	42af      	cmp	r7, r5
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8002e7a:	691d      	ldr	r5, [r3, #16]
 8002e7c:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
        ep->xfer_len = ep->maxpacket;
 8002e80:	bf38      	it	cc
 8002e82:	618f      	strcc	r7, [r1, #24]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8002e84:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8002e86:	698d      	ldr	r5, [r1, #24]
 8002e88:	691f      	ldr	r7, [r3, #16]
 8002e8a:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8002e8e:	433d      	orrs	r5, r7
 8002e90:	e7d8      	b.n	8002e44 <USB_EP0StartXfer+0x30>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002e92:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 8002e96:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8002e9a:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 8002e9e:	698b      	ldr	r3, [r1, #24]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d0db      	beq.n	8002e5c <USB_EP0StartXfer+0x48>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8002ea4:	f006 060f 	and.w	r6, r6, #15
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8002eae:	40b3      	lsls	r3, r6
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 8002eb6:	e7d1      	b.n	8002e5c <USB_EP0StartXfer+0x48>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8002eb8:	f8d4 0b10 	ldr.w	r0, [r4, #2832]	; 0xb10
 8002ebc:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
 8002ec0:	ea00 000c 	and.w	r0, r0, ip
 8002ec4:	6118      	str	r0, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8002ec6:	6918      	ldr	r0, [r3, #16]
 8002ec8:	4038      	ands	r0, r7
 8002eca:	6118      	str	r0, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 8002ecc:	68c8      	ldr	r0, [r1, #12]
    if (ep->xfer_len > 0U)
 8002ece:	b105      	cbz	r5, 8002ed2 <USB_EP0StartXfer+0xbe>
      ep->xfer_len = ep->maxpacket;
 8002ed0:	6188      	str	r0, [r1, #24]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8002ed2:	691d      	ldr	r5, [r3, #16]
    if (dma == 1U)
 8002ed4:	2a01      	cmp	r2, #1
    ep->xfer_size = ep->maxpacket;
 8002ed6:	61c8      	str	r0, [r1, #28]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8002ed8:	f3c0 0012 	ubfx	r0, r0, #0, #19
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8002edc:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8002ee0:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8002ee2:	691d      	ldr	r5, [r3, #16]
 8002ee4:	ea40 0005 	orr.w	r0, r0, r5
 8002ee8:	6118      	str	r0, [r3, #16]
    if (dma == 1U)
 8002eea:	d102      	bne.n	8002ef2 <USB_EP0StartXfer+0xde>
      if ((uint32_t)ep->xfer_buff != 0U)
 8002eec:	690a      	ldr	r2, [r1, #16]
 8002eee:	b102      	cbz	r2, 8002ef2 <USB_EP0StartXfer+0xde>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8002ef0:	615a      	str	r2, [r3, #20]
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8002ef2:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 8002ef6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8002efa:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
 8002efe:	e7ad      	b.n	8002e5c <USB_EP0StartXfer+0x48>
 8002f00:	e007ffff 	.word	0xe007ffff
 8002f04:	fff80000 	.word	0xfff80000

08002f08 <USB_EPStopXfer>:
  __IO uint32_t count = 0U;
 8002f08:	2300      	movs	r3, #0
{
 8002f0a:	b082      	sub	sp, #8
  if (ep->is_in == 1U)
 8002f0c:	784a      	ldrb	r2, [r1, #1]
  __IO uint32_t count = 0U;
 8002f0e:	9301      	str	r3, [sp, #4]
  if (ep->is_in == 1U)
 8002f10:	2a01      	cmp	r2, #1
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002f12:	780b      	ldrb	r3, [r1, #0]
 8002f14:	ea4f 1343 	mov.w	r3, r3, lsl #5
  if (ep->is_in == 1U)
 8002f18:	d11e      	bne.n	8002f58 <USB_EPStopXfer+0x50>
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002f1a:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 8002f1e:	58c2      	ldr	r2, [r0, r3]
 8002f20:	18c1      	adds	r1, r0, r3
 8002f22:	2a00      	cmp	r2, #0
 8002f24:	db02      	blt.n	8002f2c <USB_EPStopXfer+0x24>
  HAL_StatusTypeDef ret = HAL_OK;
 8002f26:	2000      	movs	r0, #0
}
 8002f28:	b002      	add	sp, #8
 8002f2a:	4770      	bx	lr
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8002f2c:	58c2      	ldr	r2, [r0, r3]
 8002f2e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8002f32:	50c2      	str	r2, [r0, r3]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8002f34:	58c2      	ldr	r2, [r0, r3]
 8002f36:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002f3a:	50c2      	str	r2, [r0, r3]
        if (count > 10000U)
 8002f3c:	f242 7210 	movw	r2, #10000	; 0x2710
        count++;
 8002f40:	9b01      	ldr	r3, [sp, #4]
 8002f42:	3301      	adds	r3, #1
 8002f44:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 8002f46:	9b01      	ldr	r3, [sp, #4]
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d901      	bls.n	8002f50 <USB_EPStopXfer+0x48>
          ret = HAL_ERROR;
 8002f4c:	2001      	movs	r0, #1
 8002f4e:	e7eb      	b.n	8002f28 <USB_EPStopXfer+0x20>
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8002f50:	680b      	ldr	r3, [r1, #0]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	dbf4      	blt.n	8002f40 <USB_EPStopXfer+0x38>
 8002f56:	e7e6      	b.n	8002f26 <USB_EPStopXfer+0x1e>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002f58:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8002f5c:	58c2      	ldr	r2, [r0, r3]
 8002f5e:	18c1      	adds	r1, r0, r3
 8002f60:	2a00      	cmp	r2, #0
 8002f62:	dae0      	bge.n	8002f26 <USB_EPStopXfer+0x1e>
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8002f64:	58c2      	ldr	r2, [r0, r3]
 8002f66:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8002f6a:	50c2      	str	r2, [r0, r3]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8002f6c:	58c2      	ldr	r2, [r0, r3]
 8002f6e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002f72:	50c2      	str	r2, [r0, r3]
        if (count > 10000U)
 8002f74:	f242 7210 	movw	r2, #10000	; 0x2710
        count++;
 8002f78:	9b01      	ldr	r3, [sp, #4]
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 8002f7e:	9b01      	ldr	r3, [sp, #4]
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d8e3      	bhi.n	8002f4c <USB_EPStopXfer+0x44>
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8002f84:	680b      	ldr	r3, [r1, #0]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	dbf6      	blt.n	8002f78 <USB_EPStopXfer+0x70>
 8002f8a:	e7cc      	b.n	8002f26 <USB_EPStopXfer+0x1e>

08002f8c <USB_WritePacket>:
{
 8002f8c:	b510      	push	{r4, lr}
 8002f8e:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 8002f92:	b944      	cbnz	r4, 8002fa6 <USB_WritePacket+0x1a>
    count32b = ((uint32_t)len + 3U) / 4U;
 8002f94:	3303      	adds	r3, #3
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8002f96:	3201      	adds	r2, #1
    count32b = ((uint32_t)len + 3U) / 4U;
 8002f98:	089b      	lsrs	r3, r3, #2
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8002f9a:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 8002f9e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    for (i = 0U; i < count32b; i++)
 8002fa2:	428b      	cmp	r3, r1
 8002fa4:	d101      	bne.n	8002faa <USB_WritePacket+0x1e>
}
 8002fa6:	2000      	movs	r0, #0
 8002fa8:	bd10      	pop	{r4, pc}
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8002faa:	f851 2b04 	ldr.w	r2, [r1], #4
 8002fae:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 8002fb0:	e7f7      	b.n	8002fa2 <USB_WritePacket+0x16>
	...

08002fb4 <USB_EPStartXfer>:
{
 8002fb4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (ep->is_in == 1U)
 8002fb8:	784d      	ldrb	r5, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8002fba:	780f      	ldrb	r7, [r1, #0]
  if (ep->is_in == 1U)
 8002fbc:	2d01      	cmp	r5, #1
    if (ep->xfer_len == 0U)
 8002fbe:	698b      	ldr	r3, [r1, #24]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002fc0:	eb00 1447 	add.w	r4, r0, r7, lsl #5
      if (ep->type == EP_TYPE_ISOC)
 8002fc4:	790e      	ldrb	r6, [r1, #4]
 8002fc6:	f8df c1b4 	ldr.w	ip, [pc, #436]	; 800317c <USB_EPStartXfer+0x1c8>
 8002fca:	f8df e1b4 	ldr.w	lr, [pc, #436]	; 8003180 <USB_EPStartXfer+0x1cc>
  if (ep->is_in == 1U)
 8002fce:	f040 808e 	bne.w	80030ee <USB_EPStartXfer+0x13a>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002fd2:	f504 6510 	add.w	r5, r4, #2304	; 0x900
 8002fd6:	f8d5 8010 	ldr.w	r8, [r5, #16]
    if (ep->xfer_len == 0U)
 8002fda:	bb6b      	cbnz	r3, 8003038 <USB_EPStartXfer+0x84>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002fdc:	ea08 0c0c 	and.w	ip, r8, ip
 8002fe0:	f8c5 c010 	str.w	ip, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8002fe4:	f8d5 c010 	ldr.w	ip, [r5, #16]
 8002fe8:	f44c 2c00 	orr.w	ip, ip, #524288	; 0x80000
 8002fec:	f8c5 c010 	str.w	ip, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002ff0:	f8d5 c010 	ldr.w	ip, [r5, #16]
 8002ff4:	ea0c 0e0e 	and.w	lr, ip, lr
 8002ff8:	f8c5 e010 	str.w	lr, [r5, #16]
    if (dma == 1U)
 8002ffc:	2a01      	cmp	r2, #1
 8002ffe:	d14e      	bne.n	800309e <USB_EPStartXfer+0xea>
      if ((uint32_t)ep->dma_addr != 0U)
 8003000:	694b      	ldr	r3, [r1, #20]
 8003002:	b103      	cbz	r3, 8003006 <USB_EPStartXfer+0x52>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003004:	616b      	str	r3, [r5, #20]
      if (ep->type == EP_TYPE_ISOC)
 8003006:	2e01      	cmp	r6, #1
 8003008:	d10c      	bne.n	8003024 <USB_EPStartXfer+0x70>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800300a:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 800300e:	f413 7f80 	tst.w	r3, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003012:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 8003016:	bf0c      	ite	eq
 8003018:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800301c:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8003020:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003024:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 8003028:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800302c:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
}
 8003030:	2000      	movs	r0, #0
 8003032:	b002      	add	sp, #8
 8003034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003038:	ea08 0e0e 	and.w	lr, r8, lr
      if (ep->type == EP_TYPE_ISOC)
 800303c:	2e01      	cmp	r6, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800303e:	f8c5 e010 	str.w	lr, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003042:	f8d5 e010 	ldr.w	lr, [r5, #16]
 8003046:	ea0e 0c0c 	and.w	ip, lr, ip
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800304a:	f8d1 e00c 	ldr.w	lr, [r1, #12]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800304e:	f8c5 c010 	str.w	ip, [r5, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003052:	eb0e 0c03 	add.w	ip, lr, r3
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003056:	f8d5 8010 	ldr.w	r8, [r5, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800305a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800305e:	fbbc fefe 	udiv	lr, ip, lr
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003062:	f8df c120 	ldr.w	ip, [pc, #288]	; 8003184 <USB_EPStartXfer+0x1d0>
 8003066:	ea0c 4cce 	and.w	ip, ip, lr, lsl #19
 800306a:	ea4c 0c08 	orr.w	ip, ip, r8
 800306e:	f8c5 c010 	str.w	ip, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003072:	f3c3 0c12 	ubfx	ip, r3, #0, #19
 8003076:	f8d5 e010 	ldr.w	lr, [r5, #16]
 800307a:	ea4c 0c0e 	orr.w	ip, ip, lr
 800307e:	f8c5 c010 	str.w	ip, [r5, #16]
      if (ep->type == EP_TYPE_ISOC)
 8003082:	d1bb      	bne.n	8002ffc <USB_EPStartXfer+0x48>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003084:	f8d5 c010 	ldr.w	ip, [r5, #16]
 8003088:	f02c 4cc0 	bic.w	ip, ip, #1610612736	; 0x60000000
 800308c:	f8c5 c010 	str.w	ip, [r5, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003090:	f8d5 c010 	ldr.w	ip, [r5, #16]
 8003094:	f04c 5c00 	orr.w	ip, ip, #536870912	; 0x20000000
 8003098:	f8c5 c010 	str.w	ip, [r5, #16]
 800309c:	e7ae      	b.n	8002ffc <USB_EPStartXfer+0x48>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800309e:	f8d4 5900 	ldr.w	r5, [r4, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 80030a2:	2e01      	cmp	r6, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80030a4:	f045 4504 	orr.w	r5, r5, #2214592512	; 0x84000000
 80030a8:	f8c4 5900 	str.w	r5, [r4, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 80030ac:	d00b      	beq.n	80030c6 <USB_EPStartXfer+0x112>
        if (ep->xfer_len > 0U)
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d0be      	beq.n	8003030 <USB_EPStartXfer+0x7c>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80030b2:	f007 020f 	and.w	r2, r7, #15
 80030b6:	2701      	movs	r7, #1
 80030b8:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 80030bc:	4097      	lsls	r7, r2
 80030be:	431f      	orrs	r7, r3
 80030c0:	f8c0 7834 	str.w	r7, [r0, #2100]	; 0x834
 80030c4:	e7b4      	b.n	8003030 <USB_EPStartXfer+0x7c>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80030c6:	f8d0 5808 	ldr.w	r5, [r0, #2056]	; 0x808
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80030ca:	b29b      	uxth	r3, r3
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80030cc:	f415 7f80 	tst.w	r5, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80030d0:	f8d4 5900 	ldr.w	r5, [r4, #2304]	; 0x900
 80030d4:	bf0c      	ite	eq
 80030d6:	f045 5500 	orreq.w	r5, r5, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80030da:	f045 5580 	orrne.w	r5, r5, #268435456	; 0x10000000
 80030de:	f8c4 5900 	str.w	r5, [r4, #2304]	; 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80030e2:	9200      	str	r2, [sp, #0]
 80030e4:	463a      	mov	r2, r7
 80030e6:	6909      	ldr	r1, [r1, #16]
 80030e8:	f7ff ff50 	bl	8002f8c <USB_WritePacket>
 80030ec:	e7a0      	b.n	8003030 <USB_EPStartXfer+0x7c>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80030ee:	f8d4 5b10 	ldr.w	r5, [r4, #2832]	; 0xb10
 80030f2:	f504 6730 	add.w	r7, r4, #2816	; 0xb00
 80030f6:	ea05 050e 	and.w	r5, r5, lr
 80030fa:	613d      	str	r5, [r7, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80030fc:	693d      	ldr	r5, [r7, #16]
 80030fe:	ea05 050c 	and.w	r5, r5, ip
 8003102:	613d      	str	r5, [r7, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003104:	68cd      	ldr	r5, [r1, #12]
    if (ep->xfer_len == 0U)
 8003106:	bb1b      	cbnz	r3, 8003150 <USB_EPStartXfer+0x19c>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	f3c5 0512 	ubfx	r5, r5, #0, #19
 800310e:	431d      	orrs	r5, r3
 8003110:	613d      	str	r5, [r7, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003118:	613b      	str	r3, [r7, #16]
    if (dma == 1U)
 800311a:	2a01      	cmp	r2, #1
 800311c:	d102      	bne.n	8003124 <USB_EPStartXfer+0x170>
      if ((uint32_t)ep->xfer_buff != 0U)
 800311e:	690b      	ldr	r3, [r1, #16]
 8003120:	b103      	cbz	r3, 8003124 <USB_EPStartXfer+0x170>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003122:	617b      	str	r3, [r7, #20]
    if (ep->type == EP_TYPE_ISOC)
 8003124:	2e01      	cmp	r6, #1
 8003126:	d10c      	bne.n	8003142 <USB_EPStartXfer+0x18e>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003128:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 800312c:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003130:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 8003134:	bf0c      	ite	eq
 8003136:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800313a:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 800313e:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003142:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 8003146:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800314a:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
 800314e:	e76f      	b.n	8003030 <USB_EPStartXfer+0x7c>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003150:	442b      	add	r3, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003152:	f8df c030 	ldr.w	ip, [pc, #48]	; 8003184 <USB_EPStartXfer+0x1d0>
 8003156:	f8d7 e010 	ldr.w	lr, [r7, #16]
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800315a:	3b01      	subs	r3, #1
 800315c:	fbb3 f3f5 	udiv	r3, r3, r5
 8003160:	b29b      	uxth	r3, r3
      ep->xfer_size = ep->maxpacket * pktcnt;
 8003162:	435d      	muls	r5, r3
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003164:	ea0c 43c3 	and.w	r3, ip, r3, lsl #19
 8003168:	ea43 030e 	orr.w	r3, r3, lr
      ep->xfer_size = ep->maxpacket * pktcnt;
 800316c:	61cd      	str	r5, [r1, #28]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800316e:	f3c5 0512 	ubfx	r5, r5, #0, #19
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003172:	613b      	str	r3, [r7, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	431d      	orrs	r5, r3
 8003178:	613d      	str	r5, [r7, #16]
 800317a:	e7ce      	b.n	800311a <USB_EPStartXfer+0x166>
 800317c:	e007ffff 	.word	0xe007ffff
 8003180:	fff80000 	.word	0xfff80000
 8003184:	1ff80000 	.word	0x1ff80000

08003188 <USB_ReadPacket>:
{
 8003188:	4603      	mov	r3, r0
  uint32_t count32b = (uint32_t)len >> 2U;
 800318a:	0890      	lsrs	r0, r2, #2
  uint16_t remaining_bytes = len % 4U;
 800318c:	f002 0203 	and.w	r2, r2, #3
{
 8003190:	b570      	push	{r4, r5, r6, lr}
  for (i = 0U; i < count32b; i++)
 8003192:	2400      	movs	r4, #0
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003194:	f503 5580 	add.w	r5, r3, #4096	; 0x1000
  for (i = 0U; i < count32b; i++)
 8003198:	4284      	cmp	r4, r0
 800319a:	d310      	bcc.n	80031be <USB_ReadPacket+0x36>
 800319c:	eb01 0080 	add.w	r0, r1, r0, lsl #2
  if (remaining_bytes != 0U)
 80031a0:	b162      	cbz	r2, 80031bc <USB_ReadPacket+0x34>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80031a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031a6:	681c      	ldr	r4, [r3, #0]
    i = 0U;
 80031a8:	2300      	movs	r3, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80031aa:	00d9      	lsls	r1, r3, #3
 80031ac:	fa24 f101 	lsr.w	r1, r4, r1
 80031b0:	54c1      	strb	r1, [r0, r3]
      i++;
 80031b2:	3301      	adds	r3, #1
    } while (remaining_bytes != 0U);
 80031b4:	b299      	uxth	r1, r3
 80031b6:	428a      	cmp	r2, r1
 80031b8:	d1f7      	bne.n	80031aa <USB_ReadPacket+0x22>
      pDest++;
 80031ba:	4410      	add	r0, r2
}
 80031bc:	bd70      	pop	{r4, r5, r6, pc}
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80031be:	682e      	ldr	r6, [r5, #0]
 80031c0:	f841 6024 	str.w	r6, [r1, r4, lsl #2]
  for (i = 0U; i < count32b; i++)
 80031c4:	3401      	adds	r4, #1
 80031c6:	e7e7      	b.n	8003198 <USB_ReadPacket+0x10>

080031c8 <USB_EPSetStall>:
  if (ep->is_in == 1U)
 80031c8:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80031ca:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80031cc:	2a01      	cmp	r2, #1
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80031ce:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 80031d2:	d112      	bne.n	80031fa <USB_EPSetStall+0x32>
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80031d4:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 80031d8:	2a00      	cmp	r2, #0
 80031da:	db06      	blt.n	80031ea <USB_EPSetStall+0x22>
 80031dc:	b12b      	cbz	r3, 80031ea <USB_EPSetStall+0x22>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80031de:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80031e2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80031e6:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80031ea:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80031ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80031f2:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 80031f6:	2000      	movs	r0, #0
 80031f8:	4770      	bx	lr
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80031fa:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 80031fe:	2a00      	cmp	r2, #0
 8003200:	db06      	blt.n	8003210 <USB_EPSetStall+0x48>
 8003202:	b12b      	cbz	r3, 8003210 <USB_EPSetStall+0x48>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003204:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8003208:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800320c:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003210:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8003214:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003218:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800321c:	e7eb      	b.n	80031f6 <USB_EPSetStall+0x2e>

0800321e <USB_EPClearStall>:
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800321e:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8003220:	784a      	ldrb	r2, [r1, #1]
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003222:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003226:	790b      	ldrb	r3, [r1, #4]
  if (ep->is_in == 1U)
 8003228:	2a01      	cmp	r2, #1
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800322a:	f1a3 0302 	sub.w	r3, r3, #2
 800322e:	b2db      	uxtb	r3, r3
  if (ep->is_in == 1U)
 8003230:	d10f      	bne.n	8003252 <USB_EPClearStall+0x34>
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003232:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003236:	2b01      	cmp	r3, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003238:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800323c:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003240:	d805      	bhi.n	800324e <USB_EPClearStall+0x30>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003242:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8003246:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800324a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800324e:	2000      	movs	r0, #0
 8003250:	4770      	bx	lr
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003252:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003256:	2b01      	cmp	r3, #1
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003258:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800325c:	f8c0 2b00 	str.w	r2, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003260:	d8f5      	bhi.n	800324e <USB_EPClearStall+0x30>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003262:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8003266:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800326a:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800326e:	e7ee      	b.n	800324e <USB_EPClearStall+0x30>

08003270 <USB_StopDevice>:
{
 8003270:	b510      	push	{r4, lr}
 8003272:	f500 6310 	add.w	r3, r0, #2304	; 0x900
 8003276:	4604      	mov	r4, r0
 8003278:	f500 612e 	add.w	r1, r0, #2784	; 0xae0
    USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800327c:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 8003280:	609a      	str	r2, [r3, #8]
  for (i = 0U; i < 15U; i++)
 8003282:	3320      	adds	r3, #32
    USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003284:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
  for (i = 0U; i < 15U; i++)
 8003288:	428b      	cmp	r3, r1
 800328a:	d1f9      	bne.n	8003280 <USB_StopDevice+0x10>
  USBx_DEVICE->DIEPMSK  = 0U;
 800328c:	2200      	movs	r2, #0
  ret = USB_FlushRxFifo(USBx);
 800328e:	4620      	mov	r0, r4
  USBx_DEVICE->DIEPMSK  = 0U;
 8003290:	f8c4 2810 	str.w	r2, [r4, #2064]	; 0x810
  USBx_DEVICE->DOEPMSK  = 0U;
 8003294:	f8c4 2814 	str.w	r2, [r4, #2068]	; 0x814
  USBx_DEVICE->DAINTMSK = 0U;
 8003298:	f8c4 281c 	str.w	r2, [r4, #2076]	; 0x81c
  ret = USB_FlushRxFifo(USBx);
 800329c:	f7ff fc38 	bl	8002b10 <USB_FlushRxFifo>
  if (ret != HAL_OK)
 80032a0:	b928      	cbnz	r0, 80032ae <USB_StopDevice+0x3e>
  ret = USB_FlushTxFifo(USBx,  0x10U);
 80032a2:	4620      	mov	r0, r4
 80032a4:	2110      	movs	r1, #16
}
 80032a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ret = USB_FlushTxFifo(USBx,  0x10U);
 80032aa:	f7ff bc0b 	b.w	8002ac4 <USB_FlushTxFifo>
}
 80032ae:	bd10      	pop	{r4, pc}

080032b0 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80032b0:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80032b4:	0109      	lsls	r1, r1, #4
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80032b6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80032ba:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80032be:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80032c2:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80032c6:	4319      	orrs	r1, r3
 80032c8:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 80032cc:	2000      	movs	r0, #0
 80032ce:	4770      	bx	lr

080032d0 <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80032d0:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 80032d4:	f023 0303 	bic.w	r3, r3, #3
 80032d8:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80032dc:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80032e0:	f023 0302 	bic.w	r3, r3, #2
 80032e4:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 80032e8:	2000      	movs	r0, #0
 80032ea:	4770      	bx	lr

080032ec <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80032ec:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 80032f0:	f023 0303 	bic.w	r3, r3, #3
 80032f4:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80032f8:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80032fc:	f043 0302 	orr.w	r3, r3, #2
 8003300:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8003304:	2000      	movs	r0, #0
 8003306:	4770      	bx	lr

08003308 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8003308:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800330a:	6980      	ldr	r0, [r0, #24]
}
 800330c:	4010      	ands	r0, r2
 800330e:	4770      	bx	lr

08003310 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8003310:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8003314:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003318:	69c0      	ldr	r0, [r0, #28]
 800331a:	4018      	ands	r0, r3
}
 800331c:	0c00      	lsrs	r0, r0, #16
 800331e:	4770      	bx	lr

08003320 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8003320:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8003324:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003328:	69c0      	ldr	r0, [r0, #28]
 800332a:	4018      	ands	r0, r3
}
 800332c:	b280      	uxth	r0, r0
 800332e:	4770      	bx	lr

08003330 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8003330:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8003334:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8003338:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800333c:	6940      	ldr	r0, [r0, #20]
}
 800333e:	4010      	ands	r0, r2
 8003340:	4770      	bx	lr

08003342 <USB_ReadDevInEPInterrupt>:
{
 8003342:	b510      	push	{r4, lr}
  msk = USBx_DEVICE->DIEPMSK;
 8003344:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8003348:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800334c:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8003350:	f001 010f 	and.w	r1, r1, #15
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8003354:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8003358:	40cb      	lsrs	r3, r1
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800335a:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800335c:	01db      	lsls	r3, r3, #7
 800335e:	b2db      	uxtb	r3, r3
 8003360:	4323      	orrs	r3, r4
}
 8003362:	4018      	ands	r0, r3
 8003364:	bd10      	pop	{r4, pc}

08003366 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8003366:	6940      	ldr	r0, [r0, #20]
}
 8003368:	f000 0001 	and.w	r0, r0, #1
 800336c:	4770      	bx	lr

0800336e <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800336e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8003372:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003376:	f023 0307 	bic.w	r3, r3, #7
 800337a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800337e:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8003382:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003386:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 800338a:	2000      	movs	r0, #0
 800338c:	4770      	bx	lr
	...

08003390 <USB_EP0_OutStart>:
{
 8003390:	b530      	push	{r4, r5, lr}
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003392:	6c05      	ldr	r5, [r0, #64]	; 0x40
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003394:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8003398:	4c0f      	ldr	r4, [pc, #60]	; (80033d8 <USB_EP0_OutStart+0x48>)
 800339a:	42a5      	cmp	r5, r4
 800339c:	d903      	bls.n	80033a6 <USB_EP0_OutStart+0x16>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800339e:	f8d0 4b00 	ldr.w	r4, [r0, #2816]	; 0xb00
 80033a2:	2c00      	cmp	r4, #0
 80033a4:	db16      	blt.n	80033d4 <USB_EP0_OutStart+0x44>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80033a6:	2400      	movs	r4, #0
  if (dma == 1U)
 80033a8:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80033aa:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80033ac:	691c      	ldr	r4, [r3, #16]
 80033ae:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 80033b2:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80033b4:	691c      	ldr	r4, [r3, #16]
 80033b6:	f044 0418 	orr.w	r4, r4, #24
 80033ba:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80033bc:	691c      	ldr	r4, [r3, #16]
 80033be:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 80033c2:	611c      	str	r4, [r3, #16]
  if (dma == 1U)
 80033c4:	d106      	bne.n	80033d4 <USB_EP0_OutStart+0x44>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80033c6:	615a      	str	r2, [r3, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80033c8:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80033cc:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80033d0:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 80033d4:	2000      	movs	r0, #0
 80033d6:	bd30      	pop	{r4, r5, pc}
 80033d8:	4f54300a 	.word	0x4f54300a

080033dc <LL_SetSystemCoreClock>:
  */
#endif /* DUAL_CORE */
void LL_SetSystemCoreClock(uint32_t CPU_Frequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = CPU_Frequency;
 80033dc:	4b01      	ldr	r3, [pc, #4]	; (80033e4 <LL_SetSystemCoreClock+0x8>)
 80033de:	6018      	str	r0, [r3, #0]
}
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	24000000 	.word	0x24000000

080033e8 <CpuIrqDisable>:
** \return    none.
**
****************************************************************************************/
void CpuIrqDisable(void)
{
  __asm volatile ("cpsid i");
 80033e8:	b672      	cpsid	i
} /*** end of CpuIrqDisable ***/
 80033ea:	4770      	bx	lr

080033ec <CpuIrqEnable>:
** \return    none.
**
****************************************************************************************/
void CpuIrqEnable(void)
{
  __asm volatile ("cpsie i");
 80033ec:	b662      	cpsie	i
} /*** end of CpuIrqEnable ***/
 80033ee:	4770      	bx	lr

080033f0 <CpuInit>:
  /* bootloader runs in polling mode so disable the global interrupts. this is done for
   * safety reasons. if the bootloader was started from a running user program, it could 
   * be that the user program did not properly disable the interrupt generation of 
   * peripherals.
   */
  CpuIrqDisable();
 80033f0:	f7ff bffa 	b.w	80033e8 <CpuIrqDisable>

080033f4 <CpuStartUserProgram>:
**            does not return.
** \return    none.
**
****************************************************************************************/
void CpuStartUserProgram(void)
{
 80033f4:	b510      	push	{r4, lr}
  void (*pProgResetHandler)(void);

  /* check if a user program is present by verifying the checksum */
  if (NvmVerifyChecksum() == BLT_FALSE)
 80033f6:	f000 f9bf 	bl	8003778 <NvmVerifyChecksum>
 80033fa:	b1c8      	cbz	r0, 8003430 <CpuStartUserProgram+0x3c>
    /* not a valid user program so it cannot be started */
    return;
  }
#if (BOOT_CPU_USER_PROGRAM_START_HOOK > 0)
  /* invoke callback */
  if (CpuUserProgramStartHook() == BLT_FALSE)
 80033fc:	f7fc ff7a 	bl	80002f4 <CpuUserProgramStartHook>
 8003400:	b1b0      	cbz	r0, 8003430 <CpuStartUserProgram+0x3c>
    return;
  }
#endif
#if (BOOT_COM_ENABLE > 0)
  /* release the communication interface */
  ComFree();
 8003402:	f000 ffe9 	bl	80043d8 <ComFree>
#endif
  /* reset the HAL */
  HAL_DeInit();
 8003406:	f7fd fca1 	bl	8000d4c <HAL_DeInit>
  /* reset the timer */
  TimerReset();
 800340a:	f000 f9c2 	bl	8003792 <TimerReset>
  /* remap user program's vector table */
  SCB->VTOR = CPU_USER_PROGRAM_VECTABLE_OFFSET & (blt_int32u)0x1FFFFF80;
 800340e:	f000 f9b5 	bl	800377c <NvmGetUserProgBaseAddress>
 8003412:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 8003416:	4b07      	ldr	r3, [pc, #28]	; (8003434 <CpuStartUserProgram+0x40>)
 8003418:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
 800341c:	6098      	str	r0, [r3, #8]
  /* set the address where the bootloader needs to jump to. this is the address of
   * the 2nd entry in the user program's vector table. this address points to the
   * user program's reset handler.
   */
  pProgResetHandler = (void(*)(void))(*((blt_addr *)CPU_USER_PROGRAM_STARTADDR_PTR));
 800341e:	f000 f9ad 	bl	800377c <NvmGetUserProgBaseAddress>
 8003422:	6844      	ldr	r4, [r0, #4]
  /* The Cortex-M4 core has interrupts enabled out of reset. the bootloader
   * explicitly disables these for security reasons. Enable them here again, so it does 
   * not have to be done by the user program.
   */
  CpuIrqEnable();
 8003424:	f7ff ffe2 	bl	80033ec <CpuIrqEnable>
  /* start the user program by calling its reset interrupt service routine */
  pProgResetHandler();
 8003428:	4623      	mov	r3, r4
   * for whatever reason, make sure all communication interfaces are initialized so that
   * firmware updates can be started.
   */
  ComDeferredInit();
#endif
} /*** end of CpuStartUserProgram ***/
 800342a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pProgResetHandler();
 800342e:	4718      	bx	r3
} /*** end of CpuStartUserProgram ***/
 8003430:	bd10      	pop	{r4, pc}
 8003432:	bf00      	nop
 8003434:	e000ed00 	.word	0xe000ed00

08003438 <CpuMemCopy>:
** \param     len  length of the data in bytes.
** \return    none.
**
****************************************************************************************/
void CpuMemCopy(blt_addr dest, blt_addr src, blt_int16u len)
{
 8003438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800343a:	4606      	mov	r6, r0
 800343c:	460f      	mov	r7, r1
 800343e:	4615      	mov	r5, r2
  /* set casted pointers */
  from = (blt_int8u *)src;
  to = (blt_int8u *)dest;

  /* copy all bytes from source address to destination address */
  while (len-- > 0)
 8003440:	2400      	movs	r4, #0
 8003442:	42ac      	cmp	r4, r5
 8003444:	d100      	bne.n	8003448 <CpuMemCopy+0x10>
    /* store byte value from source to destination */
    *to++ = *from++;
    /* keep the watchdog happy */
    CopService();
  }
} /*** end of CpuMemCopy ***/
 8003446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    *to++ = *from++;
 8003448:	5d3b      	ldrb	r3, [r7, r4]
 800344a:	5533      	strb	r3, [r6, r4]
    CopService();
 800344c:	3401      	adds	r4, #1
 800344e:	f000 ffec 	bl	800442a <CopService>
 8003452:	e7f6      	b.n	8003442 <CpuMemCopy+0xa>

08003454 <FlashGetSectorIdx>:
** \param     address Address in the flash sector.
** \return    Flash sector index in flashLayout[] or FLASH_INVALID_SECTOR_IDX.
**
****************************************************************************************/
static blt_int8u FlashGetSectorIdx(blt_addr address)
{
 8003454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003456:	4606      	mov	r6, r0
 8003458:	4d09      	ldr	r5, [pc, #36]	; (8003480 <FlashGetSectorIdx+0x2c>)
 800345a:	2400      	movs	r4, #0

  /* search through the sectors to find the right one */
  for (sectorIdx = 0; sectorIdx < FLASH_TOTAL_SECTORS; sectorIdx++)
  {
    /* keep the watchdog happy */
    CopService();
 800345c:	f000 ffe5 	bl	800442a <CopService>
    /* is the address in this sector? */
    if ((address >= flashLayout[sectorIdx].sector_start) && \
 8003460:	682b      	ldr	r3, [r5, #0]
 8003462:	b2e7      	uxtb	r7, r4
 8003464:	42b3      	cmp	r3, r6
 8003466:	d803      	bhi.n	8003470 <FlashGetSectorIdx+0x1c>
        (address < (flashLayout[sectorIdx].sector_start + \
 8003468:	686a      	ldr	r2, [r5, #4]
 800346a:	4413      	add	r3, r2
    if ((address >= flashLayout[sectorIdx].sector_start) && \
 800346c:	42b3      	cmp	r3, r6
 800346e:	d804      	bhi.n	800347a <FlashGetSectorIdx+0x26>
  for (sectorIdx = 0; sectorIdx < FLASH_TOTAL_SECTORS; sectorIdx++)
 8003470:	3401      	adds	r4, #1
 8003472:	350c      	adds	r5, #12
 8003474:	2cf8      	cmp	r4, #248	; 0xf8
 8003476:	d1f1      	bne.n	800345c <FlashGetSectorIdx+0x8>
  blt_int8u result = FLASH_INVALID_SECTOR_IDX;
 8003478:	27ff      	movs	r7, #255	; 0xff
    }
  }

  /* give the result back to the caller */
  return result;
} /*** end of FlashGetSectorIdx ***/
 800347a:	4638      	mov	r0, r7
 800347c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800347e:	bf00      	nop
 8003480:	08004b80 	.word	0x08004b80

08003484 <FlashWriteBlock>:
{
 8003484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003488:	4605      	mov	r5, r0
  if (FlashGetSectorIdx(block->base_addr) == FLASH_INVALID_SECTOR_IDX)
 800348a:	6800      	ldr	r0, [r0, #0]
 800348c:	f7ff ffe2 	bl	8003454 <FlashGetSectorIdx>
 8003490:	28ff      	cmp	r0, #255	; 0xff
 8003492:	d025      	beq.n	80034e0 <FlashWriteBlock+0x5c>
    HAL_FLASH_Unlock();
 8003494:	1d2f      	adds	r7, r5, #4
 8003496:	2600      	movs	r6, #0
 8003498:	f7fd fd64 	bl	8000f64 <HAL_FLASH_Unlock>
      prog_addr = block->base_addr + (word_cnt * word_size);
 800349c:	6829      	ldr	r1, [r5, #0]
 800349e:	eb06 0801 	add.w	r8, r6, r1
      CopService();
 80034a2:	f000 ffc2 	bl	800442a <CopService>
      if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, prog_addr,
 80034a6:	463a      	mov	r2, r7
 80034a8:	2001      	movs	r0, #1
 80034aa:	4641      	mov	r1, r8
 80034ac:	f7fd fdfe 	bl	80010ac <HAL_FLASH_Program>
 80034b0:	4604      	mov	r4, r0
 80034b2:	b978      	cbnz	r0, 80034d4 <FlashWriteBlock+0x50>
 80034b4:	4603      	mov	r3, r0
        if (((blt_int8u *)prog_addr)[byte_idx] != prog_data[byte_idx])
 80034b6:	5dda      	ldrb	r2, [r3, r7]
 80034b8:	f818 1003 	ldrb.w	r1, [r8, r3]
 80034bc:	4291      	cmp	r1, r2
 80034be:	d10a      	bne.n	80034d6 <FlashWriteBlock+0x52>
      for (byte_idx = 0; byte_idx < word_size; byte_idx++)
 80034c0:	3301      	adds	r3, #1
 80034c2:	2b10      	cmp	r3, #16
 80034c4:	d1f7      	bne.n	80034b6 <FlashWriteBlock+0x32>
    for (word_cnt=0; word_cnt<(FLASH_WRITE_BLOCK_SIZE/word_size); word_cnt++)
 80034c6:	3610      	adds	r6, #16
 80034c8:	3710      	adds	r7, #16
 80034ca:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 80034ce:	d1e5      	bne.n	800349c <FlashWriteBlock+0x18>
 80034d0:	2401      	movs	r4, #1
 80034d2:	e000      	b.n	80034d6 <FlashWriteBlock+0x52>
        result = BLT_FALSE;
 80034d4:	2400      	movs	r4, #0
    HAL_FLASH_Lock();
 80034d6:	f7fd fd6b 	bl	8000fb0 <HAL_FLASH_Lock>
} /*** end of FlashWriteBlock ***/
 80034da:	4620      	mov	r0, r4
 80034dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    result = BLT_FALSE;
 80034e0:	2400      	movs	r4, #0
  return result;
 80034e2:	e7fa      	b.n	80034da <FlashWriteBlock+0x56>

080034e4 <FlashSwitchBlock>:
{
 80034e4:	b538      	push	{r3, r4, r5, lr}
  if (block == &bootBlockInfo)
 80034e6:	4b0f      	ldr	r3, [pc, #60]	; (8003524 <FlashSwitchBlock+0x40>)
{
 80034e8:	4604      	mov	r4, r0
 80034ea:	460d      	mov	r5, r1
  if (block == &bootBlockInfo)
 80034ec:	4298      	cmp	r0, r3
 80034ee:	d013      	beq.n	8003518 <FlashSwitchBlock+0x34>
  else if (base_addr == flashLayout[0].sector_start)
 80034f0:	4a0d      	ldr	r2, [pc, #52]	; (8003528 <FlashSwitchBlock+0x44>)
 80034f2:	4291      	cmp	r1, r2
 80034f4:	d012      	beq.n	800351c <FlashSwitchBlock+0x38>
    if (FlashWriteBlock(block) == BLT_FALSE)
 80034f6:	f7ff ffc5 	bl	8003484 <FlashWriteBlock>
 80034fa:	b188      	cbz	r0, 8003520 <FlashSwitchBlock+0x3c>
  if (result != BLT_NULL)
 80034fc:	b154      	cbz	r4, 8003514 <FlashSwitchBlock+0x30>
    if (block->base_addr != address)
 80034fe:	6823      	ldr	r3, [r4, #0]
 8003500:	42ab      	cmp	r3, r5
 8003502:	d007      	beq.n	8003514 <FlashSwitchBlock+0x30>
      block->base_addr = address;
 8003504:	4620      	mov	r0, r4
      CpuMemCopy((blt_addr)block->data, address, FLASH_WRITE_BLOCK_SIZE);
 8003506:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800350a:	4629      	mov	r1, r5
      block->base_addr = address;
 800350c:	f840 5b04 	str.w	r5, [r0], #4
      CpuMemCopy((blt_addr)block->data, address, FLASH_WRITE_BLOCK_SIZE);
 8003510:	f7ff ff92 	bl	8003438 <CpuMemCopy>
} /*** end of FlashSwitchBlock ***/
 8003514:	4620      	mov	r0, r4
 8003516:	bd38      	pop	{r3, r4, r5, pc}
    block = &blockInfo;
 8003518:	4c04      	ldr	r4, [pc, #16]	; (800352c <FlashSwitchBlock+0x48>)
 800351a:	e7f0      	b.n	80034fe <FlashSwitchBlock+0x1a>
    block = &bootBlockInfo;
 800351c:	461c      	mov	r4, r3
 800351e:	e7ee      	b.n	80034fe <FlashSwitchBlock+0x1a>
      result = BLT_NULL;
 8003520:	4604      	mov	r4, r0
 8003522:	e7f7      	b.n	8003514 <FlashSwitchBlock+0x30>
 8003524:	2400261c 	.word	0x2400261c
 8003528:	08010000 	.word	0x08010000
 800352c:	24000618 	.word	0x24000618

08003530 <FlashAddToBlock>:
{
 8003530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003534:	461f      	mov	r7, r3
  if (block->base_addr == FLASH_INVALID_ADDRESS)
 8003536:	6803      	ldr	r3, [r0, #0]
  current_base_addr = (address/FLASH_WRITE_BLOCK_SIZE)*FLASH_WRITE_BLOCK_SIZE;
 8003538:	f421 56ff 	bic.w	r6, r1, #8160	; 0x1fe0
{
 800353c:	4604      	mov	r4, r0
  if (block->base_addr == FLASH_INVALID_ADDRESS)
 800353e:	3301      	adds	r3, #1
{
 8003540:	460d      	mov	r5, r1
 8003542:	4690      	mov	r8, r2
  current_base_addr = (address/FLASH_WRITE_BLOCK_SIZE)*FLASH_WRITE_BLOCK_SIZE;
 8003544:	f026 061f 	bic.w	r6, r6, #31
  if (block->base_addr == FLASH_INVALID_ADDRESS)
 8003548:	d106      	bne.n	8003558 <FlashAddToBlock+0x28>
      CpuMemCopy((blt_addr)block->data, address, FLASH_WRITE_BLOCK_SIZE);
 800354a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800354e:	4631      	mov	r1, r6
      block->base_addr = address;
 8003550:	f840 6b04 	str.w	r6, [r0], #4
      CpuMemCopy((blt_addr)block->data, address, FLASH_WRITE_BLOCK_SIZE);
 8003554:	f7ff ff70 	bl	8003438 <CpuMemCopy>
    if (block->base_addr != current_base_addr)
 8003558:	6823      	ldr	r3, [r4, #0]
 800355a:	42b3      	cmp	r3, r6
 800355c:	d005      	beq.n	800356a <FlashAddToBlock+0x3a>
      block = FlashSwitchBlock(block, current_base_addr);
 800355e:	4620      	mov	r0, r4
 8003560:	4631      	mov	r1, r6
 8003562:	f7ff ffbf 	bl	80034e4 <FlashSwitchBlock>
      if (block == BLT_NULL)
 8003566:	4604      	mov	r4, r0
 8003568:	b1e8      	cbz	r0, 80035a6 <FlashAddToBlock+0x76>
    dst = &(block->data[address - block->base_addr]);
 800356a:	3504      	adds	r5, #4
 800356c:	6821      	ldr	r1, [r4, #0]
        block = FlashSwitchBlock(block, current_base_addr+FLASH_WRITE_BLOCK_SIZE);
 800356e:	f506 5600 	add.w	r6, r6, #8192	; 0x2000
    while (len > 0);
 8003572:	4447      	add	r7, r8
    dst = &(block->data[address - block->base_addr]);
 8003574:	1a6d      	subs	r5, r5, r1
 8003576:	4425      	add	r5, r4
      CopService();
 8003578:	f000 ff57 	bl	800442a <CopService>
      if ((blt_addr)(dst-&(block->data[0])) >= FLASH_WRITE_BLOCK_SIZE)
 800357c:	1d23      	adds	r3, r4, #4
 800357e:	1aeb      	subs	r3, r5, r3
 8003580:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003584:	d306      	bcc.n	8003594 <FlashAddToBlock+0x64>
        block = FlashSwitchBlock(block, current_base_addr+FLASH_WRITE_BLOCK_SIZE);
 8003586:	4620      	mov	r0, r4
 8003588:	4631      	mov	r1, r6
 800358a:	f7ff ffab 	bl	80034e4 <FlashSwitchBlock>
        if (block == BLT_NULL)
 800358e:	4604      	mov	r4, r0
 8003590:	b148      	cbz	r0, 80035a6 <FlashAddToBlock+0x76>
        dst = &(block->data[0]);
 8003592:	1d05      	adds	r5, r0, #4
      *dst = *src;
 8003594:	f818 3b01 	ldrb.w	r3, [r8], #1
    while (len > 0);
 8003598:	45b8      	cmp	r8, r7
      *dst = *src;
 800359a:	f805 3b01 	strb.w	r3, [r5], #1
    while (len > 0);
 800359e:	d1eb      	bne.n	8003578 <FlashAddToBlock+0x48>
 80035a0:	2001      	movs	r0, #1
} /*** end of FlashAddToBlock ***/
 80035a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        result = BLT_FALSE;
 80035a6:	2000      	movs	r0, #0
 80035a8:	e7fb      	b.n	80035a2 <FlashAddToBlock+0x72>
	...

080035ac <FlashInit>:
  blockInfo.base_addr = FLASH_INVALID_ADDRESS;
 80035ac:	f04f 33ff 	mov.w	r3, #4294967295
 80035b0:	4a02      	ldr	r2, [pc, #8]	; (80035bc <FlashInit+0x10>)
 80035b2:	6013      	str	r3, [r2, #0]
  bootBlockInfo.base_addr = FLASH_INVALID_ADDRESS;
 80035b4:	4a02      	ldr	r2, [pc, #8]	; (80035c0 <FlashInit+0x14>)
 80035b6:	6013      	str	r3, [r2, #0]
} /*** end of FlashInit ***/
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	24000618 	.word	0x24000618
 80035c0:	2400261c 	.word	0x2400261c

080035c4 <FlashWrite>:
  if ((len - 1) > (FLASH_END_ADDRESS - addr))
 80035c4:	4b13      	ldr	r3, [pc, #76]	; (8003614 <FlashWrite+0x50>)
{
 80035c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if ((len - 1) > (FLASH_END_ADDRESS - addr))
 80035c8:	1a1b      	subs	r3, r3, r0
{
 80035ca:	460d      	mov	r5, r1
  if ((len - 1) > (FLASH_END_ADDRESS - addr))
 80035cc:	3901      	subs	r1, #1
{
 80035ce:	4604      	mov	r4, r0
  if ((len - 1) > (FLASH_END_ADDRESS - addr))
 80035d0:	4299      	cmp	r1, r3
 80035d2:	d81b      	bhi.n	800360c <FlashWrite+0x48>
 80035d4:	9201      	str	r2, [sp, #4]
    if ((FlashGetSectorIdx(addr) == FLASH_INVALID_SECTOR_IDX) || \
 80035d6:	f7ff ff3d 	bl	8003454 <FlashGetSectorIdx>
 80035da:	28ff      	cmp	r0, #255	; 0xff
 80035dc:	d016      	beq.n	800360c <FlashWrite+0x48>
        (FlashGetSectorIdx(addr+len-1) == FLASH_INVALID_SECTOR_IDX))
 80035de:	1e60      	subs	r0, r4, #1
 80035e0:	4428      	add	r0, r5
 80035e2:	f7ff ff37 	bl	8003454 <FlashGetSectorIdx>
    if ((FlashGetSectorIdx(addr) == FLASH_INVALID_SECTOR_IDX) || \
 80035e6:	28ff      	cmp	r0, #255	; 0xff
 80035e8:	d010      	beq.n	800360c <FlashWrite+0x48>
    base_addr = (addr/FLASH_WRITE_BLOCK_SIZE)*FLASH_WRITE_BLOCK_SIZE;
 80035ea:	f424 53ff 	bic.w	r3, r4, #8160	; 0x1fe0
    if (base_addr == flashLayout[0].sector_start)
 80035ee:	490a      	ldr	r1, [pc, #40]	; (8003618 <FlashWrite+0x54>)
 80035f0:	9a01      	ldr	r2, [sp, #4]
    base_addr = (addr/FLASH_WRITE_BLOCK_SIZE)*FLASH_WRITE_BLOCK_SIZE;
 80035f2:	f023 031f 	bic.w	r3, r3, #31
    if (base_addr == flashLayout[0].sector_start)
 80035f6:	428b      	cmp	r3, r1
      result = FlashAddToBlock(&bootBlockInfo, addr, data, len);
 80035f8:	462b      	mov	r3, r5
 80035fa:	4621      	mov	r1, r4
 80035fc:	bf0c      	ite	eq
 80035fe:	4807      	ldreq	r0, [pc, #28]	; (800361c <FlashWrite+0x58>)
      result = FlashAddToBlock(&blockInfo, addr, data, len);
 8003600:	4807      	ldrne	r0, [pc, #28]	; (8003620 <FlashWrite+0x5c>)
} /*** end of FlashWrite ***/
 8003602:	b003      	add	sp, #12
 8003604:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      result = FlashAddToBlock(&blockInfo, addr, data, len);
 8003608:	f7ff bf92 	b.w	8003530 <FlashAddToBlock>
} /*** end of FlashWrite ***/
 800360c:	2000      	movs	r0, #0
 800360e:	b003      	add	sp, #12
 8003610:	bd30      	pop	{r4, r5, pc}
 8003612:	bf00      	nop
 8003614:	081fffff 	.word	0x081fffff
 8003618:	08010000 	.word	0x08010000
 800361c:	2400261c 	.word	0x2400261c
 8003620:	24000618 	.word	0x24000618

08003624 <FlashErase>:
  if ((len - 1) > (FLASH_END_ADDRESS - addr))
 8003624:	4b23      	ldr	r3, [pc, #140]	; (80036b4 <FlashErase+0x90>)
 8003626:	1e4a      	subs	r2, r1, #1
 8003628:	1a1b      	subs	r3, r3, r0
 800362a:	429a      	cmp	r2, r3
{
 800362c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003630:	4604      	mov	r4, r0
 8003632:	b086      	sub	sp, #24
 8003634:	460e      	mov	r6, r1
  if ((len - 1) > (FLASH_END_ADDRESS - addr))
 8003636:	d904      	bls.n	8003642 <FlashErase+0x1e>
      result = BLT_FALSE;
 8003638:	2400      	movs	r4, #0
} /*** end of FlashErase ***/
 800363a:	4620      	mov	r0, r4
 800363c:	b006      	add	sp, #24
 800363e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    first_sector_idx = FlashGetSectorIdx(addr);
 8003642:	f7ff ff07 	bl	8003454 <FlashGetSectorIdx>
 8003646:	4605      	mov	r5, r0
    last_sector_idx  = FlashGetSectorIdx(addr+len-1);
 8003648:	1e60      	subs	r0, r4, #1
 800364a:	4430      	add	r0, r6
 800364c:	f7ff ff02 	bl	8003454 <FlashGetSectorIdx>
    if ((first_sector_idx == FLASH_INVALID_SECTOR_IDX) ||
 8003650:	2dff      	cmp	r5, #255	; 0xff
    last_sector_idx  = FlashGetSectorIdx(addr+len-1);
 8003652:	4607      	mov	r7, r0
    if ((first_sector_idx == FLASH_INVALID_SECTOR_IDX) ||
 8003654:	d0f0      	beq.n	8003638 <FlashErase+0x14>
 8003656:	28ff      	cmp	r0, #255	; 0xff
 8003658:	d0ee      	beq.n	8003638 <FlashErase+0x14>
  blt_int32u eraseSectorError = 0;
 800365a:	2400      	movs	r4, #0
  if (first_sector_idx > last_sector_idx)
 800365c:	4285      	cmp	r5, r0
  blt_int32u eraseSectorError = 0;
 800365e:	9400      	str	r4, [sp, #0]
  if (first_sector_idx > last_sector_idx)
 8003660:	d8eb      	bhi.n	800363a <FlashErase+0x16>
    if (last_sector_idx > (FLASH_TOTAL_SECTORS-1))
 8003662:	2ff7      	cmp	r7, #247	; 0xf7
 8003664:	d8e9      	bhi.n	800363a <FlashErase+0x16>
    HAL_FLASH_Unlock();
 8003666:	b22e      	sxth	r6, r5
      eraseInitStruct.NbSectors = 1;
 8003668:	f04f 0801 	mov.w	r8, #1
    HAL_FLASH_Unlock();
 800366c:	f7fd fc7a 	bl	8000f64 <HAL_FLASH_Unlock>
    for (sectorIdx = first_sector_idx; sectorIdx <= last_sector_idx; sectorIdx++)
 8003670:	4b11      	ldr	r3, [pc, #68]	; (80036b8 <FlashErase+0x94>)
 8003672:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8003676:	eb03 0686 	add.w	r6, r3, r6, lsl #2
      CopService();
 800367a:	f000 fed6 	bl	800442a <CopService>
      if ( (sectorBaseAddr == FLASH_INVALID_ADDRESS) || (sectorSize == 0) )
 800367e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003682:	3201      	adds	r2, #1
 8003684:	d014      	beq.n	80036b0 <FlashErase+0x8c>
 8003686:	b19b      	cbz	r3, 80036b0 <FlashErase+0x8c>
      eraseInitStruct.Banks = flashLayout[sectorIdx].bank_num;
 8003688:	7a73      	ldrb	r3, [r6, #9]
      if (HAL_FLASHEx_Erase(&eraseInitStruct, (uint32_t *)&eraseSectorError) != HAL_OK)
 800368a:	4669      	mov	r1, sp
 800368c:	a801      	add	r0, sp, #4
      eraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800368e:	9401      	str	r4, [sp, #4]
      eraseInitStruct.Banks = flashLayout[sectorIdx].bank_num;
 8003690:	9302      	str	r3, [sp, #8]
      eraseInitStruct.Sector = flashLayout[sectorIdx].sector_num;
 8003692:	7a33      	ldrb	r3, [r6, #8]
      eraseInitStruct.NbSectors = 1;
 8003694:	e9cd 3803 	strd	r3, r8, [sp, #12]
      if (HAL_FLASHEx_Erase(&eraseInitStruct, (uint32_t *)&eraseSectorError) != HAL_OK)
 8003698:	f7fd fdbe 	bl	8001218 <HAL_FLASHEx_Erase>
 800369c:	b940      	cbnz	r0, 80036b0 <FlashErase+0x8c>
    for (sectorIdx = first_sector_idx; sectorIdx <= last_sector_idx; sectorIdx++)
 800369e:	3501      	adds	r5, #1
 80036a0:	360c      	adds	r6, #12
 80036a2:	b2ed      	uxtb	r5, r5
 80036a4:	42af      	cmp	r7, r5
 80036a6:	d2e8      	bcs.n	800367a <FlashErase+0x56>
 80036a8:	2401      	movs	r4, #1
    HAL_FLASH_Lock();
 80036aa:	f7fd fc81 	bl	8000fb0 <HAL_FLASH_Lock>
 80036ae:	e7c4      	b.n	800363a <FlashErase+0x16>
        result = BLT_FALSE;
 80036b0:	2400      	movs	r4, #0
 80036b2:	e7fa      	b.n	80036aa <FlashErase+0x86>
 80036b4:	081fffff 	.word	0x081fffff
 80036b8:	08004b80 	.word	0x08004b80

080036bc <FlashWriteChecksum>:
{
 80036bc:	b507      	push	{r0, r1, r2, lr}
  if (bootBlockInfo.base_addr != FLASH_INVALID_ADDRESS)
 80036be:	4a0e      	ldr	r2, [pc, #56]	; (80036f8 <FlashWriteChecksum+0x3c>)
 80036c0:	6813      	ldr	r3, [r2, #0]
 80036c2:	3301      	adds	r3, #1
 80036c4:	d016      	beq.n	80036f4 <FlashWriteChecksum+0x38>
      result = FlashWrite(flashLayout[0].sector_start+BOOT_FLASH_VECTOR_TABLE_CS_OFFSET,
 80036c6:	480d      	ldr	r0, [pc, #52]	; (80036fc <FlashWriteChecksum+0x40>)
      signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x04]));
 80036c8:	e9d2 3101 	ldrd	r3, r1, [r2, #4]
 80036cc:	440b      	add	r3, r1
      signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x08]));
 80036ce:	68d1      	ldr	r1, [r2, #12]
 80036d0:	440b      	add	r3, r1
      signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x0C]));
 80036d2:	6911      	ldr	r1, [r2, #16]
 80036d4:	440b      	add	r3, r1
      signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x10]));
 80036d6:	6951      	ldr	r1, [r2, #20]
 80036d8:	440b      	add	r3, r1
      signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x14]));
 80036da:	6991      	ldr	r1, [r2, #24]
      signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x18]));
 80036dc:	69d2      	ldr	r2, [r2, #28]
      signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x14]));
 80036de:	440b      	add	r3, r1
      result = FlashWrite(flashLayout[0].sector_start+BOOT_FLASH_VECTOR_TABLE_CS_OFFSET,
 80036e0:	2104      	movs	r1, #4
      signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x18]));
 80036e2:	4413      	add	r3, r2
      result = FlashWrite(flashLayout[0].sector_start+BOOT_FLASH_VECTOR_TABLE_CS_OFFSET,
 80036e4:	aa01      	add	r2, sp, #4
      signature_checksum += 1; /* two's complement */
 80036e6:	425b      	negs	r3, r3
 80036e8:	9301      	str	r3, [sp, #4]
      result = FlashWrite(flashLayout[0].sector_start+BOOT_FLASH_VECTOR_TABLE_CS_OFFSET,
 80036ea:	f7ff ff6b 	bl	80035c4 <FlashWrite>
} /*** end of FlashWriteChecksum ***/
 80036ee:	b003      	add	sp, #12
 80036f0:	f85d fb04 	ldr.w	pc, [sp], #4
  blt_bool   result = BLT_TRUE;
 80036f4:	2001      	movs	r0, #1
 80036f6:	e7fa      	b.n	80036ee <FlashWriteChecksum+0x32>
 80036f8:	2400261c 	.word	0x2400261c
 80036fc:	080102ac 	.word	0x080102ac

08003700 <FlashVerifyChecksum>:
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start));
 8003700:	4a0a      	ldr	r2, [pc, #40]	; (800372c <FlashVerifyChecksum+0x2c>)
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x04));
 8003702:	e9d2 3100 	ldrd	r3, r1, [r2]
 8003706:	440b      	add	r3, r1
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x08));
 8003708:	6891      	ldr	r1, [r2, #8]
 800370a:	440b      	add	r3, r1
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x0C));
 800370c:	68d1      	ldr	r1, [r2, #12]
 800370e:	440b      	add	r3, r1
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x10));
 8003710:	6911      	ldr	r1, [r2, #16]
 8003712:	440b      	add	r3, r1
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x14));
 8003714:	6951      	ldr	r1, [r2, #20]
 8003716:	440b      	add	r3, r1
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x18));
 8003718:	6991      	ldr	r1, [r2, #24]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+BOOT_FLASH_VECTOR_TABLE_CS_OFFSET));
 800371a:	f8d2 22ac 	ldr.w	r2, [r2, #684]	; 0x2ac
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x18));
 800371e:	440b      	add	r3, r1
  if (signature_checksum != 0)
 8003720:	42d3      	cmn	r3, r2
} /*** end of FlashVerifyChecksum ***/
 8003722:	bf0c      	ite	eq
 8003724:	2001      	moveq	r0, #1
 8003726:	2000      	movne	r0, #0
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	08010000 	.word	0x08010000

08003730 <FlashDone>:
  if (bootBlockInfo.base_addr != FLASH_INVALID_ADDRESS)
 8003730:	480a      	ldr	r0, [pc, #40]	; (800375c <FlashDone+0x2c>)
{
 8003732:	b508      	push	{r3, lr}
  if (bootBlockInfo.base_addr != FLASH_INVALID_ADDRESS)
 8003734:	6803      	ldr	r3, [r0, #0]
 8003736:	3301      	adds	r3, #1
 8003738:	d105      	bne.n	8003746 <FlashDone+0x16>
    if (blockInfo.base_addr != FLASH_INVALID_ADDRESS)
 800373a:	4809      	ldr	r0, [pc, #36]	; (8003760 <FlashDone+0x30>)
 800373c:	6803      	ldr	r3, [r0, #0]
 800373e:	3301      	adds	r3, #1
 8003740:	d106      	bne.n	8003750 <FlashDone+0x20>
 8003742:	2001      	movs	r0, #1
} /*** end of FlashDone ***/
 8003744:	bd08      	pop	{r3, pc}
    if (FlashWriteBlock(&bootBlockInfo) == BLT_FALSE)
 8003746:	f7ff fe9d 	bl	8003484 <FlashWriteBlock>
 800374a:	2800      	cmp	r0, #0
 800374c:	d0fa      	beq.n	8003744 <FlashDone+0x14>
 800374e:	e7f4      	b.n	800373a <FlashDone+0xa>
      if (FlashWriteBlock(&blockInfo) == BLT_FALSE)
 8003750:	f7ff fe98 	bl	8003484 <FlashWriteBlock>
      result = BLT_FALSE;
 8003754:	3800      	subs	r0, #0
 8003756:	bf18      	it	ne
 8003758:	2001      	movne	r0, #1
 800375a:	e7f3      	b.n	8003744 <FlashDone+0x14>
 800375c:	2400261c 	.word	0x2400261c
 8003760:	24000618 	.word	0x24000618

08003764 <FlashGetUserProgBaseAddress>:
} /*** end of FlashGetUserProgBaseAddress ***/
 8003764:	4800      	ldr	r0, [pc, #0]	; (8003768 <FlashGetUserProgBaseAddress+0x4>)
 8003766:	4770      	bx	lr
 8003768:	08010000 	.word	0x08010000

0800376c <NvmInit>:
   */
  NvmInitHook();
#endif

  /* init the internal driver */
  FlashInit();
 800376c:	f7ff bf1e 	b.w	80035ac <FlashInit>

08003770 <NvmWrite>:
    return BLT_FALSE;
  }
#endif

  /* still here so the internal driver should try and perform the program operation */
  return FlashWrite(addr, len, data);
 8003770:	f7ff bf28 	b.w	80035c4 <FlashWrite>

08003774 <NvmErase>:
    return BLT_FALSE;
  }
#endif

  /* still here so the internal driver should try and perform the erase operation */
  return FlashErase(addr, len);
 8003774:	f7ff bf56 	b.w	8003624 <FlashErase>

08003778 <NvmVerifyChecksum>:
#if (BOOT_NVM_CHECKSUM_HOOKS_ENABLE > 0)
  /* check checksum using the application specific method. */
  return NvmVerifyChecksumHook();
#else
  /* check checksum using the interally supported method. */
  return FlashVerifyChecksum();
 8003778:	f7ff bfc2 	b.w	8003700 <FlashVerifyChecksum>

0800377c <NvmGetUserProgBaseAddress>:
** \return    Base address.
**
****************************************************************************************/
blt_addr NvmGetUserProgBaseAddress(void)
{
  return FlashGetUserProgBaseAddress();
 800377c:	f7ff bff2 	b.w	8003764 <FlashGetUserProgBaseAddress>

08003780 <NvmDone>:
**            to determine if a valid user program is present in flash.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmDone(void)
{
 8003780:	b508      	push	{r3, lr}
  {
    return BLT_FALSE;
  }
#else
  /* compute and write checksum, which is programmed by the internal driver. */
  if (FlashWriteChecksum() == BLT_FALSE)
 8003782:	f7ff ff9b 	bl	80036bc <FlashWriteChecksum>
 8003786:	b118      	cbz	r0, 8003790 <NvmDone+0x10>
  }
#endif

  /* finish up internal driver operations */
  return FlashDone();
} /*** end of NvmDone ***/
 8003788:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return FlashDone();
 800378c:	f7ff bfd0 	b.w	8003730 <FlashDone>
} /*** end of NvmDone ***/
 8003790:	bd08      	pop	{r3, pc}

08003792 <TimerReset>:
**
****************************************************************************************/
void TimerReset(void)
{
  /* Set the systick's registers back into the default reset value. */
  SysTick->CTRL = 0;
 8003792:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003796:	2200      	movs	r2, #0
 8003798:	611a      	str	r2, [r3, #16]
  SysTick->LOAD = 0;
 800379a:	615a      	str	r2, [r3, #20]
  SysTick->VAL = 0;
 800379c:	619a      	str	r2, [r3, #24]
} /* end of TimerReset */
 800379e:	4770      	bx	lr

080037a0 <TimerInit>:
{
 80037a0:	b508      	push	{r3, lr}
  TimerReset();
 80037a2:	f7ff fff6 	bl	8003792 <TimerReset>
  SysTick->LOAD = BOOT_CPU_SYSTEM_SPEED_KHZ - 1;
 80037a6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80037aa:	4a04      	ldr	r2, [pc, #16]	; (80037bc <TimerInit+0x1c>)
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
 80037ac:	2105      	movs	r1, #5
  SysTick->LOAD = BOOT_CPU_SYSTEM_SPEED_KHZ - 1;
 80037ae:	615a      	str	r2, [r3, #20]
  SysTick->VAL = 0;
 80037b0:	2200      	movs	r2, #0
 80037b2:	619a      	str	r2, [r3, #24]
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
 80037b4:	6119      	str	r1, [r3, #16]
  millisecond_counter = 0;
 80037b6:	4b02      	ldr	r3, [pc, #8]	; (80037c0 <TimerInit+0x20>)
 80037b8:	601a      	str	r2, [r3, #0]
} /*** end of TimerInit ***/
 80037ba:	bd08      	pop	{r3, pc}
 80037bc:	000445bf 	.word	0x000445bf
 80037c0:	24004620 	.word	0x24004620

080037c4 <TimerUpdate>:
**
****************************************************************************************/
void TimerUpdate(void)
{
  /* Check if the millisecond event occurred. */
  if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0)
 80037c4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	03db      	lsls	r3, r3, #15
  {
    /* Increment the millisecond counter. */
    millisecond_counter++;
 80037cc:	bf41      	itttt	mi
 80037ce:	4a02      	ldrmi	r2, [pc, #8]	; (80037d8 <TimerUpdate+0x14>)
 80037d0:	6813      	ldrmi	r3, [r2, #0]
 80037d2:	3301      	addmi	r3, #1
 80037d4:	6013      	strmi	r3, [r2, #0]
  }
} /*** end of TimerUpdate ***/
 80037d6:	4770      	bx	lr
 80037d8:	24004620 	.word	0x24004620

080037dc <TimerGet>:
** \brief     Obtains the counter value of the millisecond timer.
** \return    Current value of the millisecond timer.
**
****************************************************************************************/
blt_int32u TimerGet(void)
{
 80037dc:	b508      	push	{r3, lr}
  /* Updating timer here allows this function to be called in a loop with timeout
   * detection.
   */
  TimerUpdate();
 80037de:	f7ff fff1 	bl	80037c4 <TimerUpdate>
  /* Read and return the amount of milliseconds that passed since initialization. */
  return millisecond_counter;
} /*** end of TimerGet ***/
 80037e2:	4b01      	ldr	r3, [pc, #4]	; (80037e8 <TimerGet+0xc>)
 80037e4:	6818      	ldr	r0, [r3, #0]
 80037e6:	bd08      	pop	{r3, pc}
 80037e8:	24004620 	.word	0x24004620

080037ec <HAL_GetTick>:
 80037ec:	b508      	push	{r3, lr}
 80037ee:	f7ff ffe9 	bl	80037c4 <TimerUpdate>
 80037f2:	4b01      	ldr	r3, [pc, #4]	; (80037f8 <HAL_GetTick+0xc>)
 80037f4:	6818      	ldr	r0, [r3, #0]
 80037f6:	bd08      	pop	{r3, pc}
 80037f8:	24004620 	.word	0x24004620

080037fc <UsbFifoMgrWrite>:
**
****************************************************************************************/
static blt_bool UsbFifoMgrWrite(blt_int8u handle, blt_int8u data)
{
  /* check the validity of the handle parameter */
  ASSERT_RT(handle < FIFO_MAX_BUFFERS);
 80037fc:	2801      	cmp	r0, #1
{
 80037fe:	b538      	push	{r3, r4, r5, lr}
 8003800:	4604      	mov	r4, r0
 8003802:	460d      	mov	r5, r1
  ASSERT_RT(handle < FIFO_MAX_BUFFERS);
 8003804:	d904      	bls.n	8003810 <UsbFifoMgrWrite+0x14>
 8003806:	f240 11c7 	movw	r1, #455	; 0x1c7
 800380a:	480e      	ldr	r0, [pc, #56]	; (8003844 <UsbFifoMgrWrite+0x48>)
 800380c:	f000 fd59 	bl	80042c2 <AssertFailure>
  /* check if fifo is full */
  if (fifoCtrl[handle].entries == fifoCtrl[handle].length)
 8003810:	2018      	movs	r0, #24
 8003812:	490d      	ldr	r1, [pc, #52]	; (8003848 <UsbFifoMgrWrite+0x4c>)
 8003814:	4344      	muls	r4, r0
 8003816:	190b      	adds	r3, r1, r4
 8003818:	7c58      	ldrb	r0, [r3, #17]
 800381a:	7c1a      	ldrb	r2, [r3, #16]
 800381c:	4290      	cmp	r0, r2
 800381e:	d00e      	beq.n	800383e <UsbFifoMgrWrite+0x42>
  {
    return BLT_FALSE;
  }
  /* copy data to fifo */
  *fifoCtrl[handle].writeptr = data;
 8003820:	68da      	ldr	r2, [r3, #12]
 8003822:	7015      	strb	r5, [r2, #0]
  /* data written so update number of entries */
  fifoCtrl[handle].entries++;
 8003824:	7c5a      	ldrb	r2, [r3, #17]
  /* update write pointer */
  fifoCtrl[handle].writeptr++;
  /* check end of fifo */
  if (fifoCtrl[handle].writeptr > fifoCtrl[handle].endptr)
 8003826:	6858      	ldr	r0, [r3, #4]
  fifoCtrl[handle].entries++;
 8003828:	3201      	adds	r2, #1
 800382a:	745a      	strb	r2, [r3, #17]
  fifoCtrl[handle].writeptr++;
 800382c:	68da      	ldr	r2, [r3, #12]
 800382e:	3201      	adds	r2, #1
  if (fifoCtrl[handle].writeptr > fifoCtrl[handle].endptr)
 8003830:	4282      	cmp	r2, r0
  fifoCtrl[handle].writeptr++;
 8003832:	60da      	str	r2, [r3, #12]
  if (fifoCtrl[handle].writeptr > fifoCtrl[handle].endptr)
 8003834:	d901      	bls.n	800383a <UsbFifoMgrWrite+0x3e>
  {
    /* set write pointer to start of the cyclic fifo */
    fifoCtrl[handle].writeptr = fifoCtrl[handle].startptr;
 8003836:	590a      	ldr	r2, [r1, r4]
 8003838:	60da      	str	r2, [r3, #12]
  }
  /* still here so all is okay */
  return BLT_TRUE;
 800383a:	2001      	movs	r0, #1
 800383c:	e000      	b.n	8003840 <UsbFifoMgrWrite+0x44>
    return BLT_FALSE;
 800383e:	2000      	movs	r0, #0
} /*** end of UsbFifoMgrWrite ***/
 8003840:	bd38      	pop	{r3, r4, r5, pc}
 8003842:	bf00      	nop
 8003844:	08005720 	.word	0x08005720
 8003848:	24004664 	.word	0x24004664

0800384c <UsbFifoMgrRead>:
**
****************************************************************************************/
static blt_bool UsbFifoMgrRead(blt_int8u handle, blt_int8u *data)
{
  /* check the validity of the handle parameter */
  ASSERT_RT(handle < FIFO_MAX_BUFFERS);
 800384c:	2801      	cmp	r0, #1
{
 800384e:	b538      	push	{r3, r4, r5, lr}
 8003850:	4604      	mov	r4, r0
 8003852:	460d      	mov	r5, r1
  ASSERT_RT(handle < FIFO_MAX_BUFFERS);
 8003854:	d904      	bls.n	8003860 <UsbFifoMgrRead+0x14>
 8003856:	f240 11e9 	movw	r1, #489	; 0x1e9
 800385a:	480d      	ldr	r0, [pc, #52]	; (8003890 <UsbFifoMgrRead+0x44>)
 800385c:	f000 fd31 	bl	80042c2 <AssertFailure>
  /* check if fifo is empty */
  if (fifoCtrl[handle].entries == 0)
 8003860:	2018      	movs	r0, #24
 8003862:	490c      	ldr	r1, [pc, #48]	; (8003894 <UsbFifoMgrRead+0x48>)
 8003864:	4344      	muls	r4, r0
 8003866:	190b      	adds	r3, r1, r4
 8003868:	7c58      	ldrb	r0, [r3, #17]
 800386a:	b178      	cbz	r0, 800388c <UsbFifoMgrRead+0x40>
  {
    return BLT_FALSE;
  }
  /* read the data */
  *data = *fifoCtrl[handle].readptr;
 800386c:	689a      	ldr	r2, [r3, #8]
 800386e:	7812      	ldrb	r2, [r2, #0]
 8003870:	702a      	strb	r2, [r5, #0]
  /* data read so update number of entries */
  fifoCtrl[handle].entries--;
 8003872:	7c5a      	ldrb	r2, [r3, #17]
  /* update read pointer */
  fifoCtrl[handle].readptr++;
  /* check end of fifo */
  if (fifoCtrl[handle].readptr > fifoCtrl[handle].endptr)
 8003874:	6858      	ldr	r0, [r3, #4]
  fifoCtrl[handle].entries--;
 8003876:	3a01      	subs	r2, #1
 8003878:	745a      	strb	r2, [r3, #17]
  fifoCtrl[handle].readptr++;
 800387a:	689a      	ldr	r2, [r3, #8]
 800387c:	3201      	adds	r2, #1
  if (fifoCtrl[handle].readptr > fifoCtrl[handle].endptr)
 800387e:	4282      	cmp	r2, r0
  fifoCtrl[handle].readptr++;
 8003880:	609a      	str	r2, [r3, #8]
  {
    /* set read pointer to start of the cyclic fifo */
    fifoCtrl[handle].readptr = fifoCtrl[handle].startptr;
  }
  /* still here so all is good */
  return BLT_TRUE;
 8003882:	f04f 0001 	mov.w	r0, #1
    fifoCtrl[handle].readptr = fifoCtrl[handle].startptr;
 8003886:	bf84      	itt	hi
 8003888:	590a      	ldrhi	r2, [r1, r4]
 800388a:	609a      	strhi	r2, [r3, #8]
} /*** end of UsbFifoMgrRead ***/
 800388c:	bd38      	pop	{r3, r4, r5, pc}
 800388e:	bf00      	nop
 8003890:	08005720 	.word	0x08005720
 8003894:	24004664 	.word	0x24004664

08003898 <UsbInit>:
{
 8003898:	b538      	push	{r3, r4, r5, lr}
    pbc1->fifoctrlptr = pbc2;
 800389a:	4b20      	ldr	r3, [pc, #128]	; (800391c <UsbInit+0x84>)
  pbc->length = length;
 800389c:	2440      	movs	r4, #64	; 0x40
  pbc->readptr = buffer;
 800389e:	4920      	ldr	r1, [pc, #128]	; (8003920 <UsbInit+0x88>)
  pbc1->handle = i;
 80038a0:	2501      	movs	r5, #1
    pbc1->fifoctrlptr = pbc2;
 80038a2:	f103 0218 	add.w	r2, r3, #24
  pbc->length = length;
 80038a6:	821c      	strh	r4, [r3, #16]
  pbc->readptr = buffer;
 80038a8:	1c48      	adds	r0, r1, #1
  pbc->length = length;
 80038aa:	851c      	strh	r4, [r3, #40]	; 0x28
    pbc1->fifoctrlptr = pbc2;
 80038ac:	615a      	str	r2, [r3, #20]
  pbc1->fifoctrlptr = (tFifoCtrl *)0;
 80038ae:	2200      	movs	r2, #0
  pbc->startptr = buffer;
 80038b0:	6018      	str	r0, [r3, #0]
  fifoPipeBulkIN.handle  = UsbFifoMgrCreate(fifoPipeBulkIN.data,  FIFO_PIPE_SIZE);
 80038b2:	700a      	strb	r2, [r1, #0]
  pbc1->fifoctrlptr = (tFifoCtrl *)0;
 80038b4:	62da      	str	r2, [r3, #44]	; 0x2c
    pbc1->handle = i;
 80038b6:	749a      	strb	r2, [r3, #18]
  pbc1->handle = i;
 80038b8:	f883 502a 	strb.w	r5, [r3, #42]	; 0x2a
  pbc->writeptr = buffer;
 80038bc:	e9c3 0002 	strd	r0, r0, [r3, #8]
  pbc->endptr = (blt_int8u *)(buffer + length - 1);
 80038c0:	1908      	adds	r0, r1, r4
  fifoCtrlFree = pbc->fifoctrlptr;
 80038c2:	4918      	ldr	r1, [pc, #96]	; (8003924 <UsbInit+0x8c>)
 80038c4:	600a      	str	r2, [r1, #0]
  pbc->readptr = buffer;
 80038c6:	4a18      	ldr	r2, [pc, #96]	; (8003928 <UsbInit+0x90>)
  pbc->endptr = (blt_int8u *)(buffer + length - 1);
 80038c8:	6058      	str	r0, [r3, #4]
  pbc->readptr = buffer;
 80038ca:	1c51      	adds	r1, r2, #1
  fifoPipeBulkOUT.handle = UsbFifoMgrCreate(fifoPipeBulkOUT.data, FIFO_PIPE_SIZE);
 80038cc:	7015      	strb	r5, [r2, #0]
  pbc->writeptr = buffer;
 80038ce:	e9c3 1108 	strd	r1, r1, [r3, #32]
  pbc->startptr = buffer;
 80038d2:	6199      	str	r1, [r3, #24]
  pbc->endptr = (blt_int8u *)(buffer + length - 1);
 80038d4:	1911      	adds	r1, r2, r4
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_HS);
 80038d6:	4c15      	ldr	r4, [pc, #84]	; (800392c <UsbInit+0x94>)
 80038d8:	462a      	mov	r2, r5
  pbc->endptr = (blt_int8u *)(buffer + length - 1);
 80038da:	61d9      	str	r1, [r3, #28]
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_HS);
 80038dc:	4620      	mov	r0, r4
 80038de:	4914      	ldr	r1, [pc, #80]	; (8003930 <UsbInit+0x98>)
 80038e0:	f000 f91e 	bl	8003b20 <USBD_Init>
  USBD_RegisterClass(&hUsbDeviceFS, &USBD_Bulk);
 80038e4:	4913      	ldr	r1, [pc, #76]	; (8003934 <UsbInit+0x9c>)
 80038e6:	4620      	mov	r0, r4
 80038e8:	f000 f94d 	bl	8003b86 <USBD_RegisterClass>
  UsbConnectHook(BLT_TRUE);
 80038ec:	4628      	mov	r0, r5
 80038ee:	f7fc fd14 	bl	800031a <UsbConnectHook>
  USBD_Start(&hUsbDeviceFS);
 80038f2:	4620      	mov	r0, r4
 80038f4:	f000 f95a 	bl	8003bac <USBD_Start>
  HAL_PWREx_EnableUSBVoltageDetector();
 80038f8:	f7fe fcaa 	bl	8002250 <HAL_PWREx_EnableUSBVoltageDetector>
  HAL_PCD_DevConnect((PCD_HandleTypeDef *)hUsbDeviceFS.pData);
 80038fc:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 8003900:	f7fd ff89 	bl	8001816 <HAL_PCD_DevConnect>
  if (BackDoorGetExtension() < BOOT_COM_USB_BACKDOOR_EXTENSION_MS)
 8003904:	f000 fd0a 	bl	800431c <BackDoorGetExtension>
 8003908:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 800390c:	d205      	bcs.n	800391a <UsbInit+0x82>
    BackDoorSetExtension(BOOT_COM_USB_BACKDOOR_EXTENSION_MS);
 800390e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
} /*** end of UsbInit ***/
 8003912:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    BackDoorSetExtension(BOOT_COM_USB_BACKDOOR_EXTENSION_MS);
 8003916:	f000 bcfb 	b.w	8004310 <BackDoorSetExtension>
} /*** end of UsbInit ***/
 800391a:	bd38      	pop	{r3, r4, r5, pc}
 800391c:	24004664 	.word	0x24004664
 8003920:	24004698 	.word	0x24004698
 8003924:	24004694 	.word	0x24004694
 8003928:	240046d9 	.word	0x240046d9
 800392c:	2400471c 	.word	0x2400471c
 8003930:	24000078 	.word	0x24000078
 8003934:	24000014 	.word	0x24000014

08003938 <UsbFree>:
{
 8003938:	b510      	push	{r4, lr}
  HAL_PCD_DevDisconnect((PCD_HandleTypeDef *)hUsbDeviceFS.pData);
 800393a:	4c06      	ldr	r4, [pc, #24]	; (8003954 <UsbFree+0x1c>)
 800393c:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 8003940:	f7fd ff85 	bl	800184e <HAL_PCD_DevDisconnect>
  USBD_DeInit(&hUsbDeviceFS);
 8003944:	4620      	mov	r0, r4
 8003946:	f000 f903 	bl	8003b50 <USBD_DeInit>
  UsbConnectHook(BLT_FALSE);
 800394a:	2000      	movs	r0, #0
} /*** end of UsbFree ***/
 800394c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  UsbConnectHook(BLT_FALSE);
 8003950:	f7fc bce3 	b.w	800031a <UsbConnectHook>
 8003954:	2400471c 	.word	0x2400471c

08003958 <UsbTransmitPacket>:
  ASSERT_RT(len <= BOOT_COM_USB_TX_MAX_DATA);
 8003958:	293f      	cmp	r1, #63	; 0x3f
{
 800395a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800395c:	4604      	mov	r4, r0
 800395e:	460d      	mov	r5, r1
  ASSERT_RT(len <= BOOT_COM_USB_TX_MAX_DATA);
 8003960:	d903      	bls.n	800396a <UsbTransmitPacket+0x12>
 8003962:	21c0      	movs	r1, #192	; 0xc0
 8003964:	4810      	ldr	r0, [pc, #64]	; (80039a8 <UsbTransmitPacket+0x50>)
 8003966:	f000 fcac 	bl	80042c2 <AssertFailure>
  result = UsbFifoMgrWrite(fifoPipeBulkIN.handle, data);
 800396a:	4e10      	ldr	r6, [pc, #64]	; (80039ac <UsbTransmitPacket+0x54>)
 800396c:	4629      	mov	r1, r5
 800396e:	7830      	ldrb	r0, [r6, #0]
 8003970:	f7ff ff44 	bl	80037fc <UsbFifoMgrWrite>
  ASSERT_RT(result == BLT_TRUE);
 8003974:	2801      	cmp	r0, #1
 8003976:	d003      	beq.n	8003980 <UsbTransmitPacket+0x28>
 8003978:	21c4      	movs	r1, #196	; 0xc4
 800397a:	480b      	ldr	r0, [pc, #44]	; (80039a8 <UsbTransmitPacket+0x50>)
 800397c:	f000 fca1 	bl	80042c2 <AssertFailure>
 8003980:	4425      	add	r5, r4
    ASSERT_RT(result == BLT_TRUE);
 8003982:	4f09      	ldr	r7, [pc, #36]	; (80039a8 <UsbTransmitPacket+0x50>)
  for (data_index = 0; data_index < len; data_index++)
 8003984:	42a5      	cmp	r5, r4
 8003986:	d100      	bne.n	800398a <UsbTransmitPacket+0x32>
} /*** end of UsbTransmitPacket ***/
 8003988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    CopService();
 800398a:	f000 fd4e 	bl	800442a <CopService>
  result = UsbFifoMgrWrite(fifoPipeBulkIN.handle, data);
 800398e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003992:	7830      	ldrb	r0, [r6, #0]
 8003994:	f7ff ff32 	bl	80037fc <UsbFifoMgrWrite>
    ASSERT_RT(result == BLT_TRUE);
 8003998:	2801      	cmp	r0, #1
 800399a:	d0f3      	beq.n	8003984 <UsbTransmitPacket+0x2c>
 800399c:	21cd      	movs	r1, #205	; 0xcd
 800399e:	4638      	mov	r0, r7
 80039a0:	f000 fc8f 	bl	80042c2 <AssertFailure>
  for (data_index = 0; data_index < len; data_index++)
 80039a4:	e7ee      	b.n	8003984 <UsbTransmitPacket+0x2c>
 80039a6:	bf00      	nop
 80039a8:	08005720 	.word	0x08005720
 80039ac:	24004698 	.word	0x24004698

080039b0 <UsbReceivePacket>:
{
 80039b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  HAL_PCD_IRQHandler((PCD_HandleTypeDef *)hUsbDeviceFS.pData);
 80039b4:	4b1e      	ldr	r3, [pc, #120]	; (8003a30 <UsbReceivePacket+0x80>)
{
 80039b6:	4680      	mov	r8, r0
  if (xcpCtoRxInProgress == BLT_FALSE)
 80039b8:	4f1e      	ldr	r7, [pc, #120]	; (8003a34 <UsbReceivePacket+0x84>)
{
 80039ba:	460e      	mov	r6, r1
  HAL_PCD_IRQHandler((PCD_HandleTypeDef *)hUsbDeviceFS.pData);
 80039bc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80039c0:	f7fe f8a8 	bl	8001b14 <HAL_PCD_IRQHandler>
  if (xcpCtoRxInProgress == BLT_FALSE)
 80039c4:	783c      	ldrb	r4, [r7, #0]
 80039c6:	4d1c      	ldr	r5, [pc, #112]	; (8003a38 <UsbReceivePacket+0x88>)
 80039c8:	4b1c      	ldr	r3, [pc, #112]	; (8003a3c <UsbReceivePacket+0x8c>)
 80039ca:	b98c      	cbnz	r4, 80039f0 <UsbReceivePacket+0x40>
  result = UsbFifoMgrRead(fifoPipeBulkOUT.handle, data);
 80039cc:	4629      	mov	r1, r5
 80039ce:	7818      	ldrb	r0, [r3, #0]
 80039d0:	f7ff ff3c 	bl	800384c <UsbFifoMgrRead>
    if (UsbReceiveByte(&xcpCtoReqPacket[0]) == BLT_TRUE)
 80039d4:	2801      	cmp	r0, #1
 80039d6:	d003      	beq.n	80039e0 <UsbReceivePacket+0x30>
  return BLT_FALSE;
 80039d8:	2400      	movs	r4, #0
} /*** end of UsbReceivePacket ***/
 80039da:	4620      	mov	r0, r4
 80039dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if ( (xcpCtoReqPacket[0] > 0) &&
 80039e0:	782b      	ldrb	r3, [r5, #0]
 80039e2:	3b01      	subs	r3, #1
 80039e4:	2b3e      	cmp	r3, #62	; 0x3e
 80039e6:	d8f7      	bhi.n	80039d8 <UsbReceivePacket+0x28>
        xcpCtoRxLength = 0;
 80039e8:	4b15      	ldr	r3, [pc, #84]	; (8003a40 <UsbReceivePacket+0x90>)
        xcpCtoRxInProgress = BLT_TRUE;
 80039ea:	7038      	strb	r0, [r7, #0]
        xcpCtoRxLength = 0;
 80039ec:	701c      	strb	r4, [r3, #0]
 80039ee:	e7f4      	b.n	80039da <UsbReceivePacket+0x2a>
    if (UsbReceiveByte(&xcpCtoReqPacket[xcpCtoRxLength+1]) == BLT_TRUE)
 80039f0:	f8df 904c 	ldr.w	r9, [pc, #76]	; 8003a40 <UsbReceivePacket+0x90>
  result = UsbFifoMgrRead(fifoPipeBulkOUT.handle, data);
 80039f4:	7818      	ldrb	r0, [r3, #0]
    if (UsbReceiveByte(&xcpCtoReqPacket[xcpCtoRxLength+1]) == BLT_TRUE)
 80039f6:	f899 1000 	ldrb.w	r1, [r9]
 80039fa:	3101      	adds	r1, #1
  result = UsbFifoMgrRead(fifoPipeBulkOUT.handle, data);
 80039fc:	4429      	add	r1, r5
 80039fe:	f7ff ff25 	bl	800384c <UsbFifoMgrRead>
    if (UsbReceiveByte(&xcpCtoReqPacket[xcpCtoRxLength+1]) == BLT_TRUE)
 8003a02:	2801      	cmp	r0, #1
  result = UsbFifoMgrRead(fifoPipeBulkOUT.handle, data);
 8003a04:	4604      	mov	r4, r0
    if (UsbReceiveByte(&xcpCtoReqPacket[xcpCtoRxLength+1]) == BLT_TRUE)
 8003a06:	d1e7      	bne.n	80039d8 <UsbReceivePacket+0x28>
      xcpCtoRxLength++;
 8003a08:	f899 3000 	ldrb.w	r3, [r9]
      if (xcpCtoRxLength == xcpCtoReqPacket[0])
 8003a0c:	782a      	ldrb	r2, [r5, #0]
      xcpCtoRxLength++;
 8003a0e:	3301      	adds	r3, #1
 8003a10:	b2db      	uxtb	r3, r3
      if (xcpCtoRxLength == xcpCtoReqPacket[0])
 8003a12:	429a      	cmp	r2, r3
      xcpCtoRxLength++;
 8003a14:	f889 3000 	strb.w	r3, [r9]
      if (xcpCtoRxLength == xcpCtoReqPacket[0])
 8003a18:	d1de      	bne.n	80039d8 <UsbReceivePacket+0x28>
        CpuMemCopy((blt_int32u)data, (blt_int32u)&xcpCtoReqPacket[1], xcpCtoRxLength);
 8003a1a:	1c69      	adds	r1, r5, #1
 8003a1c:	4640      	mov	r0, r8
 8003a1e:	f7ff fd0b 	bl	8003438 <CpuMemCopy>
        xcpCtoRxInProgress = BLT_FALSE;
 8003a22:	2300      	movs	r3, #0
 8003a24:	703b      	strb	r3, [r7, #0]
        *len = xcpCtoRxLength;
 8003a26:	f899 3000 	ldrb.w	r3, [r9]
 8003a2a:	7033      	strb	r3, [r6, #0]
        return BLT_TRUE;
 8003a2c:	e7d5      	b.n	80039da <UsbReceivePacket+0x2a>
 8003a2e:	bf00      	nop
 8003a30:	2400471c 	.word	0x2400471c
 8003a34:	24004a2c 	.word	0x24004a2c
 8003a38:	240049ec 	.word	0x240049ec
 8003a3c:	240046d9 	.word	0x240046d9
 8003a40:	24004a2d 	.word	0x24004a2d

08003a44 <UsbTransmitPipeBulkIN>:
{
 8003a44:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  nr_of_bytes_for_tx_endpoint = UsbFifoMgrScan(fifoPipeBulkIN.handle);
 8003a48:	4f19      	ldr	r7, [pc, #100]	; (8003ab0 <UsbTransmitPipeBulkIN+0x6c>)
 8003a4a:	783c      	ldrb	r4, [r7, #0]
**
****************************************************************************************/
static blt_int8u UsbFifoMgrScan(blt_int8u handle)
{
  /* check the validity of the handle parameter */
  ASSERT_RT(handle < FIFO_MAX_BUFFERS);
 8003a4c:	2c01      	cmp	r4, #1
 8003a4e:	d904      	bls.n	8003a5a <UsbTransmitPipeBulkIN+0x16>
 8003a50:	f240 2109 	movw	r1, #521	; 0x209
 8003a54:	4817      	ldr	r0, [pc, #92]	; (8003ab4 <UsbTransmitPipeBulkIN+0x70>)
 8003a56:	f000 fc34 	bl	80042c2 <AssertFailure>
  /* read and return the number of data entries */
  return fifoCtrl[handle].entries;
 8003a5a:	4b17      	ldr	r3, [pc, #92]	; (8003ab8 <UsbTransmitPipeBulkIN+0x74>)
 8003a5c:	2218      	movs	r2, #24
 8003a5e:	fb02 3304 	mla	r3, r2, r4, r3
 8003a62:	7c5c      	ldrb	r4, [r3, #17]
  if (nr_of_bytes_for_tx_endpoint == 0)
 8003a64:	b30c      	cbz	r4, 8003aaa <UsbTransmitPipeBulkIN+0x66>
  if (nr_of_bytes_for_tx_endpoint > BULK_DATA_MAX_PACKET_SIZE)
 8003a66:	2c40      	cmp	r4, #64	; 0x40
 8003a68:	4e14      	ldr	r6, [pc, #80]	; (8003abc <UsbTransmitPipeBulkIN+0x78>)
  for (byte_counter=0; byte_counter < nr_of_bytes_for_tx_endpoint; byte_counter++)
 8003a6a:	f04f 0500 	mov.w	r5, #0
    ASSERT_RT(result == BLT_TRUE);
 8003a6e:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8003ab4 <UsbTransmitPipeBulkIN+0x70>
 8003a72:	bf28      	it	cs
 8003a74:	2440      	movcs	r4, #64	; 0x40
    result = UsbFifoMgrRead(fifoPipeBulkIN.handle, &byte_value);
 8003a76:	f10d 0107 	add.w	r1, sp, #7
 8003a7a:	7838      	ldrb	r0, [r7, #0]
 8003a7c:	f7ff fee6 	bl	800384c <UsbFifoMgrRead>
    ASSERT_RT(result == BLT_TRUE);
 8003a80:	2801      	cmp	r0, #1
 8003a82:	d004      	beq.n	8003a8e <UsbTransmitPipeBulkIN+0x4a>
 8003a84:	f240 114d 	movw	r1, #333	; 0x14d
 8003a88:	4640      	mov	r0, r8
 8003a8a:	f000 fc1a 	bl	80042c2 <AssertFailure>
  for (byte_counter=0; byte_counter < nr_of_bytes_for_tx_endpoint; byte_counter++)
 8003a8e:	3501      	adds	r5, #1
    USB_Tx_Buffer[byte_counter] = byte_value;
 8003a90:	f89d 3007 	ldrb.w	r3, [sp, #7]
  for (byte_counter=0; byte_counter < nr_of_bytes_for_tx_endpoint; byte_counter++)
 8003a94:	b2ed      	uxtb	r5, r5
    USB_Tx_Buffer[byte_counter] = byte_value;
 8003a96:	f806 3b01 	strb.w	r3, [r6], #1
  for (byte_counter=0; byte_counter < nr_of_bytes_for_tx_endpoint; byte_counter++)
 8003a9a:	42ac      	cmp	r4, r5
 8003a9c:	d1eb      	bne.n	8003a76 <UsbTransmitPipeBulkIN+0x32>
  USBD_LL_Transmit(&hUsbDeviceFS, BULK_IN_EP, &USB_Tx_Buffer[0],
 8003a9e:	4623      	mov	r3, r4
 8003aa0:	4a06      	ldr	r2, [pc, #24]	; (8003abc <UsbTransmitPipeBulkIN+0x78>)
 8003aa2:	2181      	movs	r1, #129	; 0x81
 8003aa4:	4806      	ldr	r0, [pc, #24]	; (8003ac0 <UsbTransmitPipeBulkIN+0x7c>)
 8003aa6:	f001 f818 	bl	8004ada <USBD_LL_Transmit>
} /*** end of UsbTransmitPipeBulkIN ***/
 8003aaa:	b002      	add	sp, #8
 8003aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ab0:	24004698 	.word	0x24004698
 8003ab4:	08005720 	.word	0x08005720
 8003ab8:	24004664 	.word	0x24004664
 8003abc:	24004624 	.word	0x24004624
 8003ac0:	2400471c 	.word	0x2400471c

08003ac4 <UsbReceivePipeBulkOUT>:
{
 8003ac4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ac6:	9001      	str	r0, [sp, #4]
  usbRxBufferPtr = USBD_Bulk_GetRxBufferPtr();
 8003ac8:	f000 fe72 	bl	80047b0 <USBD_Bulk_GetRxBufferPtr>
 8003acc:	4604      	mov	r4, r0
  USB_Rx_Cnt = USBD_LL_GetRxDataSize(&hUsbDeviceFS, epnum);
 8003ace:	9901      	ldr	r1, [sp, #4]
 8003ad0:	4810      	ldr	r0, [pc, #64]	; (8003b14 <UsbReceivePipeBulkOUT+0x50>)
 8003ad2:	f000 ffaa 	bl	8004a2a <USBD_LL_GetRxDataSize>
    result = UsbFifoMgrWrite(fifoPipeBulkOUT.handle, usbRxBufferPtr[byte_counter]);
 8003ad6:	4e10      	ldr	r6, [pc, #64]	; (8003b18 <UsbReceivePipeBulkOUT+0x54>)
 8003ad8:	fa14 f580 	uxtah	r5, r4, r0
    ASSERT_RT(result == BLT_TRUE);
 8003adc:	4f0f      	ldr	r7, [pc, #60]	; (8003b1c <UsbReceivePipeBulkOUT+0x58>)
  for (byte_counter=0; byte_counter<USB_Rx_Cnt; byte_counter++)
 8003ade:	42ac      	cmp	r4, r5
 8003ae0:	d10a      	bne.n	8003af8 <UsbReceivePipeBulkOUT+0x34>
  USBD_LL_PrepareReceive(&hUsbDeviceFS,
 8003ae2:	f000 fe65 	bl	80047b0 <USBD_Bulk_GetRxBufferPtr>
 8003ae6:	2340      	movs	r3, #64	; 0x40
 8003ae8:	4602      	mov	r2, r0
 8003aea:	2101      	movs	r1, #1
 8003aec:	4809      	ldr	r0, [pc, #36]	; (8003b14 <UsbReceivePipeBulkOUT+0x50>)
} /*** end of UsbReceivePipeBulkOUT ***/
 8003aee:	b003      	add	sp, #12
 8003af0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  USBD_LL_PrepareReceive(&hUsbDeviceFS,
 8003af4:	f000 bffa 	b.w	8004aec <USBD_LL_PrepareReceive>
    result = UsbFifoMgrWrite(fifoPipeBulkOUT.handle, usbRxBufferPtr[byte_counter]);
 8003af8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003afc:	7830      	ldrb	r0, [r6, #0]
 8003afe:	f7ff fe7d 	bl	80037fc <UsbFifoMgrWrite>
    ASSERT_RT(result == BLT_TRUE);
 8003b02:	2801      	cmp	r0, #1
 8003b04:	d0eb      	beq.n	8003ade <UsbReceivePipeBulkOUT+0x1a>
 8003b06:	f240 116f 	movw	r1, #367	; 0x16f
 8003b0a:	4638      	mov	r0, r7
 8003b0c:	f000 fbd9 	bl	80042c2 <AssertFailure>
  for (byte_counter=0; byte_counter<USB_Rx_Cnt; byte_counter++)
 8003b10:	e7e5      	b.n	8003ade <UsbReceivePipeBulkOUT+0x1a>
 8003b12:	bf00      	nop
 8003b14:	2400471c 	.word	0x2400471c
 8003b18:	240046d9 	.word	0x240046d9
 8003b1c:	08005720 	.word	0x08005720

08003b20 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8003b20:	b1a0      	cbz	r0, 8003b4c <USBD_Init+0x2c>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8003b22:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8003b26:	b113      	cbz	r3, 8003b2e <USBD_Init+0xe>
  {
    pdev->pClass = NULL;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	f8c0 32b8 	str.w	r3, [r0, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8003b2e:	f8d0 32cc 	ldr.w	r3, [r0, #716]	; 0x2cc
 8003b32:	b113      	cbz	r3, 8003b3a <USBD_Init+0x1a>
  {
    pdev->pConfDesc = NULL;
 8003b34:	2300      	movs	r3, #0
 8003b36:	f8c0 32cc 	str.w	r3, [r0, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8003b3a:	b109      	cbz	r1, 8003b40 <USBD_Init+0x20>
  {
    pdev->pDesc = pdesc;
 8003b3c:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003b40:	2301      	movs	r3, #1
  pdev->id = id;
 8003b42:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003b44:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8003b48:	f000 bf24 	b.w	8004994 <USBD_LL_Init>

  return ret;
}
 8003b4c:	2003      	movs	r0, #3
 8003b4e:	4770      	bx	lr

08003b50 <USBD_DeInit>:
USBD_StatusTypeDef USBD_DeInit(USBD_HandleTypeDef *pdev)
{
  USBD_StatusTypeDef ret;

  /* Set Default State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003b50:	2301      	movs	r3, #1
{
 8003b52:	b510      	push	{r4, lr}
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003b54:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
{
 8003b58:	4604      	mov	r4, r0

  /* Free Class Resources */
  if (pdev->pClass != NULL)
 8003b5a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8003b5e:	b113      	cbz	r3, 8003b66 <USBD_DeInit+0x16>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	7901      	ldrb	r1, [r0, #4]
 8003b64:	4798      	blx	r3
  }

  if (pdev->pConfDesc != NULL)
 8003b66:	f8d4 32cc 	ldr.w	r3, [r4, #716]	; 0x2cc
 8003b6a:	b113      	cbz	r3, 8003b72 <USBD_DeInit+0x22>
  {
    pdev->pConfDesc = NULL;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	f8c4 32cc 	str.w	r3, [r4, #716]	; 0x2cc
  }

  /* Stop the low level driver  */
  ret = USBD_LL_Stop(pdev);
 8003b72:	4620      	mov	r0, r4
 8003b74:	f000 ff78 	bl	8004a68 <USBD_LL_Stop>

  if (ret != USBD_OK)
 8003b78:	b920      	cbnz	r0, 8003b84 <USBD_DeInit+0x34>
  {
    return ret;
  }

  /* Initialize low level driver */
  ret = USBD_LL_DeInit(pdev);
 8003b7a:	4620      	mov	r0, r4

  return ret;
}
 8003b7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ret = USBD_LL_DeInit(pdev);
 8003b80:	f000 bf60 	b.w	8004a44 <USBD_LL_DeInit>
}
 8003b84:	bd10      	pop	{r4, pc}

08003b86 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8003b86:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint16_t len = 0U;
 8003b88:	2400      	movs	r4, #0
{
 8003b8a:	4605      	mov	r5, r0
  uint16_t len = 0U;
 8003b8c:	f8ad 4006 	strh.w	r4, [sp, #6]

  if (pclass == NULL)
 8003b90:	b151      	cbz	r1, 8003ba8 <USBD_RegisterClass+0x22>
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8003b92:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8003b96:	f10d 0006 	add.w	r0, sp, #6
 8003b9a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8003b9c:	4798      	blx	r3
 8003b9e:	f8c5 02cc 	str.w	r0, [r5, #716]	; 0x2cc
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
#endif /* USE_USB_FS */


  return USBD_OK;
 8003ba2:	4620      	mov	r0, r4
}
 8003ba4:	b003      	add	sp, #12
 8003ba6:	bd30      	pop	{r4, r5, pc}
    return USBD_FAIL;
 8003ba8:	2003      	movs	r0, #3
 8003baa:	e7fb      	b.n	8003ba4 <USBD_RegisterClass+0x1e>

08003bac <USBD_Start>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8003bac:	f000 bf53 	b.w	8004a56 <USBD_LL_Start>

08003bb0 <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8003bb0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8003bb4:	b10b      	cbz	r3, 8003bba <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4718      	bx	r3
  }

  return ret;
}
 8003bba:	2003      	movs	r0, #3
 8003bbc:	4770      	bx	lr

08003bbe <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003bbe:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8003bc0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8003bc4:	b10b      	cbz	r3, 8003bca <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	4798      	blx	r3
  }

  return USBD_OK;
}
 8003bca:	2000      	movs	r0, #0
 8003bcc:	bd08      	pop	{r3, pc}

08003bce <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8003bce:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003bd0:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
{
 8003bd4:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003bd6:	4628      	mov	r0, r5
 8003bd8:	f000 fb0e 	bl	80041f8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8003bdc:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8003bde:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_state = USBD_EP0_SETUP;
 8003be2:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 8003be6:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 8003bea:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 8003bee:	f001 031f 	and.w	r3, r1, #31
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d008      	beq.n	8003c08 <USBD_LL_SetupStage+0x3a>
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d00c      	beq.n	8003c14 <USBD_LL_SetupStage+0x46>
 8003bfa:	b98b      	cbnz	r3, 8003c20 <USBD_LL_SetupStage+0x52>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8003bfc:	4629      	mov	r1, r5
 8003bfe:	4620      	mov	r0, r4
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return ret;
}
 8003c00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8003c04:	f000 b8fa 	b.w	8003dfc <USBD_StdDevReq>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8003c08:	4629      	mov	r1, r5
 8003c0a:	4620      	mov	r0, r4
}
 8003c0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8003c10:	f000 ba36 	b.w	8004080 <USBD_StdItfReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8003c14:	4629      	mov	r1, r5
 8003c16:	4620      	mov	r0, r4
}
 8003c18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8003c1c:	f000 ba56 	b.w	80040cc <USBD_StdEPReq>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8003c20:	4620      	mov	r0, r4
 8003c22:	f001 0180 	and.w	r1, r1, #128	; 0x80
}
 8003c26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8003c2a:	f000 bf3b 	b.w	8004aa4 <USBD_LL_StallEP>

08003c2e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8003c2e:	b570      	push	{r4, r5, r6, lr}
 8003c30:	4604      	mov	r4, r0
 8003c32:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8003c34:	460d      	mov	r5, r1
 8003c36:	b9f9      	cbnz	r1, 8003c78 <USBD_LL_DataOutStage+0x4a>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8003c38:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8003c3c:	2b03      	cmp	r3, #3
 8003c3e:	d10c      	bne.n	8003c5a <USBD_LL_DataOutStage+0x2c>
    {
      if (pep->rem_length > pep->maxpacket)
 8003c40:	e9d0 3257 	ldrd	r3, r2, [r0, #348]	; 0x15c
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d90a      	bls.n	8003c5e <USBD_LL_DataOutStage+0x30>
      {
        pep->rem_length -= pep->maxpacket;
 8003c48:	1a9b      	subs	r3, r3, r2

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8003c4a:	4631      	mov	r1, r6
 8003c4c:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 8003c4e:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8003c52:	bf28      	it	cs
 8003c54:	461a      	movcs	r2, r3
 8003c56:	f000 fb16 	bl	8004286 <USBD_CtlContinueRx>
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 8003c5a:	4628      	mov	r0, r5
 8003c5c:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8003c5e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	b123      	cbz	r3, 8003c70 <USBD_LL_DataOutStage+0x42>
 8003c66:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8003c6a:	2a03      	cmp	r2, #3
 8003c6c:	d100      	bne.n	8003c70 <USBD_LL_DataOutStage+0x42>
          pdev->pClass->EP0_RxReady(pdev);
 8003c6e:	4798      	blx	r3
        (void)USBD_CtlSendStatus(pdev);
 8003c70:	4620      	mov	r0, r4
 8003c72:	f000 fb10 	bl	8004296 <USBD_CtlSendStatus>
 8003c76:	e7f0      	b.n	8003c5a <USBD_LL_DataOutStage+0x2c>
  else if ((pdev->pClass->DataOut != NULL) &&
 8003c78:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	b133      	cbz	r3, 8003c8e <USBD_LL_DataOutStage+0x60>
 8003c80:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8003c84:	2a03      	cmp	r2, #3
 8003c86:	d102      	bne.n	8003c8e <USBD_LL_DataOutStage+0x60>
}
 8003c88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8003c8c:	4718      	bx	r3
    return USBD_FAIL;
 8003c8e:	2503      	movs	r5, #3
 8003c90:	e7e3      	b.n	8003c5a <USBD_LL_DataOutStage+0x2c>

08003c92 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8003c92:	b570      	push	{r4, r5, r6, lr}
 8003c94:	4604      	mov	r4, r0
 8003c96:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8003c98:	460d      	mov	r5, r1
 8003c9a:	bbd9      	cbnz	r1, 8003d14 <USBD_LL_DataInStage+0x82>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8003c9c:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d10e      	bne.n	8003cc2 <USBD_LL_DataInStage+0x30>
    {
      if (pep->rem_length > pep->maxpacket)
 8003ca4:	e9d0 3207 	ldrd	r3, r2, [r0, #28]
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d913      	bls.n	8003cd4 <USBD_LL_DataInStage+0x42>
      {
        pep->rem_length -= pep->maxpacket;
 8003cac:	1a9a      	subs	r2, r3, r2

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8003cae:	4631      	mov	r1, r6
        pep->rem_length -= pep->maxpacket;
 8003cb0:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8003cb2:	f000 fae0 	bl	8004276 <USBD_CtlContinueSendData>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003cb6:	462b      	mov	r3, r5
 8003cb8:	462a      	mov	r2, r5
 8003cba:	4629      	mov	r1, r5
 8003cbc:	4620      	mov	r0, r4
 8003cbe:	f000 ff15 	bl	8004aec <USBD_LL_PrepareReceive>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8003cc2:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d102      	bne.n	8003cd0 <USBD_LL_DataInStage+0x3e>
    {
      (void)USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 8003cd0:	4628      	mov	r0, r5
 8003cd2:	bd70      	pop	{r4, r5, r6, pc}
        if ((pep->maxpacket == pep->rem_length) &&
 8003cd4:	d10c      	bne.n	8003cf0 <USBD_LL_DataInStage+0x5e>
            (pep->total_length >= pep->maxpacket) &&
 8003cd6:	6982      	ldr	r2, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d809      	bhi.n	8003cf0 <USBD_LL_DataInStage+0x5e>
            (pep->total_length >= pep->maxpacket) &&
 8003cdc:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d205      	bcs.n	8003cf0 <USBD_LL_DataInStage+0x5e>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8003ce4:	460a      	mov	r2, r1
 8003ce6:	f000 fac6 	bl	8004276 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8003cea:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 8003cee:	e7e2      	b.n	8003cb6 <USBD_LL_DataInStage+0x24>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8003cf0:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	b12b      	cbz	r3, 8003d04 <USBD_LL_DataInStage+0x72>
 8003cf8:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8003cfc:	2a03      	cmp	r2, #3
 8003cfe:	d101      	bne.n	8003d04 <USBD_LL_DataInStage+0x72>
            pdev->pClass->EP0_TxSent(pdev);
 8003d00:	4620      	mov	r0, r4
 8003d02:	4798      	blx	r3
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8003d04:	2180      	movs	r1, #128	; 0x80
 8003d06:	4620      	mov	r0, r4
 8003d08:	f000 fecc 	bl	8004aa4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8003d0c:	4620      	mov	r0, r4
 8003d0e:	f000 facd 	bl	80042ac <USBD_CtlReceiveStatus>
 8003d12:	e7d6      	b.n	8003cc2 <USBD_LL_DataInStage+0x30>
  else if ((pdev->pClass->DataIn != NULL) &&
 8003d14:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	b133      	cbz	r3, 8003d2a <USBD_LL_DataInStage+0x98>
 8003d1c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8003d20:	2a03      	cmp	r2, #3
 8003d22:	d102      	bne.n	8003d2a <USBD_LL_DataInStage+0x98>
}
 8003d24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8003d28:	4718      	bx	r3
    return USBD_FAIL;
 8003d2a:	2503      	movs	r5, #3
 8003d2c:	e7d0      	b.n	8003cd0 <USBD_LL_DataInStage+0x3e>

08003d2e <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003d2e:	2301      	movs	r3, #1
  pdev->ep0_state = USBD_EP0_IDLE;
 8003d30:	2100      	movs	r1, #0
{
 8003d32:	b570      	push	{r4, r5, r6, lr}
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003d34:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
{
 8003d38:	4604      	mov	r4, r0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData != NULL)
 8003d3a:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
  pdev->ep0_state = USBD_EP0_IDLE;
 8003d3e:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 8003d42:	6041      	str	r1, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 8003d44:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  if (pdev->pClassData != NULL)
 8003d48:	b11b      	cbz	r3, 8003d52 <USBD_LL_Reset+0x24>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8003d4a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003d52:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003d54:	2540      	movs	r5, #64	; 0x40
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8003d56:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003d58:	2340      	movs	r3, #64	; 0x40
 8003d5a:	4611      	mov	r1, r2
 8003d5c:	4620      	mov	r0, r4
 8003d5e:	f000 fe8c 	bl	8004a7a <USBD_LL_OpenEP>

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003d62:	462b      	mov	r3, r5
 8003d64:	2200      	movs	r2, #0
 8003d66:	2180      	movs	r1, #128	; 0x80
 8003d68:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8003d6a:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003d6e:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003d72:	f000 fe82 	bl	8004a7a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  return USBD_OK;
}
 8003d76:	2000      	movs	r0, #0
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8003d78:	84a6      	strh	r6, [r4, #36]	; 0x24
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8003d7a:	6225      	str	r5, [r4, #32]
}
 8003d7c:	bd70      	pop	{r4, r5, r6, pc}

08003d7e <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8003d7e:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8003d80:	2000      	movs	r0, #0
 8003d82:	4770      	bx	lr

08003d84 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 8003d84:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003d88:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8003d8c:	2304      	movs	r3, #4
 8003d8e:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8003d92:	2000      	movs	r0, #0
 8003d94:	4770      	bx	lr

08003d96 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8003d96:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003d9a:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8003d9c:	bf04      	itt	eq
 8003d9e:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 8003da2:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8003da6:	2000      	movs	r0, #0
 8003da8:	4770      	bx	lr

08003daa <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8003daa:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003dac:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8003db0:	2a03      	cmp	r2, #3
 8003db2:	d104      	bne.n	8003dbe <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 8003db4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8003db8:	69db      	ldr	r3, [r3, #28]
 8003dba:	b103      	cbz	r3, 8003dbe <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8003dbc:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 8003dbe:	2000      	movs	r0, #0
 8003dc0:	bd08      	pop	{r3, pc}

08003dc2 <USBD_LL_IsoINIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 8003dc2:	2000      	movs	r0, #0
 8003dc4:	4770      	bx	lr

08003dc6 <USBD_LL_IsoOUTIncomplete>:
 8003dc6:	2000      	movs	r0, #0
 8003dc8:	4770      	bx	lr

08003dca <USBD_LL_DevConnected>:
 8003dca:	2000      	movs	r0, #0
 8003dcc:	4770      	bx	lr

08003dce <USBD_LL_DevDisconnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003dce:	2201      	movs	r2, #1
{
 8003dd0:	b508      	push	{r3, lr}
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003dd2:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8003dd6:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 8003dda:	b112      	cbz	r2, 8003de2 <USBD_LL_DevDisconnected+0x14>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8003ddc:	6852      	ldr	r2, [r2, #4]
 8003dde:	7901      	ldrb	r1, [r0, #4]
 8003de0:	4790      	blx	r2
  }

  return USBD_OK;
}
 8003de2:	2000      	movs	r0, #0
 8003de4:	bd08      	pop	{r3, pc}

08003de6 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
 8003de6:	b510      	push	{r4, lr}
 8003de8:	4604      	mov	r4, r0
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8003dea:	2180      	movs	r1, #128	; 0x80
 8003dec:	f000 fe5a 	bl	8004aa4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8003df0:	2100      	movs	r1, #0
 8003df2:	4620      	mov	r0, r4
}
 8003df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 8003df8:	f000 be54 	b.w	8004aa4 <USBD_LL_StallEP>

08003dfc <USBD_StdDevReq>:
{
 8003dfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003dfe:	780d      	ldrb	r5, [r1, #0]
 8003e00:	4604      	mov	r4, r0
 8003e02:	460e      	mov	r6, r1
 8003e04:	f005 0560 	and.w	r5, r5, #96	; 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003e08:	2d20      	cmp	r5, #32
 8003e0a:	d014      	beq.n	8003e36 <USBD_StdDevReq+0x3a>
 8003e0c:	2d40      	cmp	r5, #64	; 0x40
 8003e0e:	d012      	beq.n	8003e36 <USBD_StdDevReq+0x3a>
 8003e10:	2d00      	cmp	r5, #0
 8003e12:	f040 80fe 	bne.w	8004012 <USBD_StdDevReq+0x216>
    switch (req->bRequest)
 8003e16:	784f      	ldrb	r7, [r1, #1]
 8003e18:	2f09      	cmp	r7, #9
 8003e1a:	f200 80fa 	bhi.w	8004012 <USBD_StdDevReq+0x216>
 8003e1e:	e8df f017 	tbh	[pc, r7, lsl #1]
 8003e22:	00ff      	.short	0x00ff
 8003e24:	00f80121 	.word	0x00f80121
 8003e28:	00f80117 	.word	0x00f80117
 8003e2c:	00130082 	.word	0x00130082
 8003e30:	00e800f8 	.word	0x00e800f8
 8003e34:	009e      	.short	0x009e
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8003e36:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8003e3a:	4631      	mov	r1, r6
 8003e3c:	4620      	mov	r0, r4
 8003e3e:	689b      	ldr	r3, [r3, #8]
}
 8003e40:	b003      	add	sp, #12
 8003e42:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8003e46:	4718      	bx	r3
  uint16_t len = 0U;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8003e4e:	884b      	ldrh	r3, [r1, #2]
 8003e50:	0a1a      	lsrs	r2, r3, #8
 8003e52:	3a01      	subs	r2, #1
 8003e54:	2a06      	cmp	r2, #6
 8003e56:	d837      	bhi.n	8003ec8 <USBD_StdDevReq+0xcc>
 8003e58:	e8df f002 	tbb	[pc, r2]
 8003e5c:	36291c04 	.word	0x36291c04
 8003e60:	5036      	.short	0x5036
 8003e62:	5a          	.byte	0x5a
 8003e63:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8003e64:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003e68:	681b      	ldr	r3, [r3, #0]
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8003e6a:	f10d 0106 	add.w	r1, sp, #6
 8003e6e:	7c20      	ldrb	r0, [r4, #16]
 8003e70:	4798      	blx	r3
    if (req->wLength != 0U)
 8003e72:	88f2      	ldrh	r2, [r6, #6]
 8003e74:	2a00      	cmp	r2, #0
 8003e76:	f000 80f1 	beq.w	800405c <USBD_StdDevReq+0x260>
      if (len != 0U)
 8003e7a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8003e7e:	b31b      	cbz	r3, 8003ec8 <USBD_StdDevReq+0xcc>
        len = MIN(len, req->wLength);
 8003e80:	429a      	cmp	r2, r3
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8003e82:	4601      	mov	r1, r0
        len = MIN(len, req->wLength);
 8003e84:	bf28      	it	cs
 8003e86:	461a      	movcs	r2, r3
 8003e88:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8003e8c:	4620      	mov	r0, r4
 8003e8e:	f000 f9e5 	bl	800425c <USBD_CtlSendData>
      break;
 8003e92:	e01c      	b.n	8003ece <USBD_StdDevReq+0xd2>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003e94:	7c02      	ldrb	r2, [r0, #16]
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8003e96:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003e9a:	b932      	cbnz	r2, 8003eaa <USBD_StdDevReq+0xae>
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8003e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8003e9e:	f10d 0006 	add.w	r0, sp, #6
 8003ea2:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8003ea4:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003ea6:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8003ea8:	e7e3      	b.n	8003e72 <USBD_StdDevReq+0x76>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8003eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eac:	e7f7      	b.n	8003e9e <USBD_StdDevReq+0xa2>
    switch ((uint8_t)(req->wValue))
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	2b05      	cmp	r3, #5
 8003eb2:	d809      	bhi.n	8003ec8 <USBD_StdDevReq+0xcc>
 8003eb4:	e8df f003 	tbb	[pc, r3]
 8003eb8:	16120e03 	.word	0x16120e03
 8003ebc:	1e1a      	.short	0x1e1a
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8003ebe:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003ec2:	685b      	ldr	r3, [r3, #4]
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d1d0      	bne.n	8003e6a <USBD_StdDevReq+0x6e>
      USBD_CtlError(pdev, req);
 8003ec8:	4620      	mov	r0, r4
        USBD_CtlError(pdev, req);
 8003eca:	f7ff ff8c 	bl	8003de6 <USBD_CtlError.constprop.0>
}
 8003ece:	4628      	mov	r0, r5
 8003ed0:	b003      	add	sp, #12
 8003ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8003ed4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	e7f3      	b.n	8003ec4 <USBD_StdDevReq+0xc8>
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8003edc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	e7ef      	b.n	8003ec4 <USBD_StdDevReq+0xc8>
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8003ee4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	e7eb      	b.n	8003ec4 <USBD_StdDevReq+0xc8>
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8003eec:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003ef0:	695b      	ldr	r3, [r3, #20]
 8003ef2:	e7e7      	b.n	8003ec4 <USBD_StdDevReq+0xc8>
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8003ef4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003ef8:	699b      	ldr	r3, [r3, #24]
 8003efa:	e7e3      	b.n	8003ec4 <USBD_StdDevReq+0xc8>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003efc:	7c03      	ldrb	r3, [r0, #16]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1e2      	bne.n	8003ec8 <USBD_StdDevReq+0xcc>
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8003f02:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8003f06:	f10d 0006 	add.w	r0, sp, #6
 8003f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f0c:	4798      	blx	r3
  if (err != 0U)
 8003f0e:	e7b0      	b.n	8003e72 <USBD_StdDevReq+0x76>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003f10:	7c03      	ldrb	r3, [r0, #16]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1d8      	bne.n	8003ec8 <USBD_StdDevReq+0xcc>
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8003f16:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8003f1a:	f10d 0006 	add.w	r0, sp, #6
 8003f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f20:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003f22:	2307      	movs	r3, #7
 8003f24:	e7bf      	b.n	8003ea6 <USBD_StdDevReq+0xaa>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8003f26:	888b      	ldrh	r3, [r1, #4]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1cd      	bne.n	8003ec8 <USBD_StdDevReq+0xcc>
 8003f2c:	88cb      	ldrh	r3, [r1, #6]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1ca      	bne.n	8003ec8 <USBD_StdDevReq+0xcc>
 8003f32:	884e      	ldrh	r6, [r1, #2]
 8003f34:	2e7f      	cmp	r6, #127	; 0x7f
 8003f36:	d8c7      	bhi.n	8003ec8 <USBD_StdDevReq+0xcc>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003f38:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003f3c:	2b03      	cmp	r3, #3
 8003f3e:	d0c3      	beq.n	8003ec8 <USBD_StdDevReq+0xcc>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8003f40:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 8003f42:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8003f46:	f000 fdbf 	bl	8004ac8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8003f4a:	4620      	mov	r0, r4
 8003f4c:	f000 f9a3 	bl	8004296 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8003f50:	b11e      	cbz	r6, 8003f5a <USBD_StdDevReq+0x15e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8003f52:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8003f54:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8003f58:	e7b9      	b.n	8003ece <USBD_StdDevReq+0xd2>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e7fa      	b.n	8003f54 <USBD_StdDevReq+0x158>
  cfgidx = (uint8_t)(req->wValue);
 8003f5e:	788e      	ldrb	r6, [r1, #2]
 8003f60:	4f46      	ldr	r7, [pc, #280]	; (800407c <USBD_StdDevReq+0x280>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8003f62:	2e01      	cmp	r6, #1
  cfgidx = (uint8_t)(req->wValue);
 8003f64:	703e      	strb	r6, [r7, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8003f66:	d903      	bls.n	8003f70 <USBD_StdDevReq+0x174>
    USBD_CtlError(pdev, req);
 8003f68:	f7ff ff3d 	bl	8003de6 <USBD_CtlError.constprop.0>
    ret = USBD_FAIL;
 8003f6c:	2503      	movs	r5, #3
    break;
 8003f6e:	e7ae      	b.n	8003ece <USBD_StdDevReq+0xd2>
  switch (pdev->dev_state)
 8003f70:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d008      	beq.n	8003f8a <USBD_StdDevReq+0x18e>
 8003f78:	2b03      	cmp	r3, #3
 8003f7a:	d014      	beq.n	8003fa6 <USBD_StdDevReq+0x1aa>
    USBD_CtlError(pdev, req);
 8003f7c:	f7ff ff33 	bl	8003de6 <USBD_CtlError.constprop.0>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8003f80:	7839      	ldrb	r1, [r7, #0]
 8003f82:	4620      	mov	r0, r4
 8003f84:	f7ff fe1b 	bl	8003bbe <USBD_ClrClassConfig>
 8003f88:	e7f0      	b.n	8003f6c <USBD_StdDevReq+0x170>
    if (cfgidx != 0U)
 8003f8a:	2e00      	cmp	r6, #0
 8003f8c:	d066      	beq.n	800405c <USBD_StdDevReq+0x260>
      pdev->dev_config = cfgidx;
 8003f8e:	2101      	movs	r1, #1
 8003f90:	6041      	str	r1, [r0, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8003f92:	f7ff fe0d 	bl	8003bb0 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 8003f96:	4605      	mov	r5, r0
 8003f98:	4620      	mov	r0, r4
 8003f9a:	2d00      	cmp	r5, #0
 8003f9c:	d195      	bne.n	8003eca <USBD_StdDevReq+0xce>
        (void)USBD_CtlSendStatus(pdev);
 8003f9e:	f000 f97a 	bl	8004296 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e7d6      	b.n	8003f54 <USBD_StdDevReq+0x158>
    if (cfgidx == 0U)
 8003fa6:	b95e      	cbnz	r6, 8003fc0 <USBD_StdDevReq+0x1c4>
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8003fa8:	2302      	movs	r3, #2
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8003faa:	4631      	mov	r1, r6
      pdev->dev_config = cfgidx;
 8003fac:	6046      	str	r6, [r0, #4]
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8003fae:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8003fb2:	f7ff fe04 	bl	8003bbe <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8003fb6:	4620      	mov	r0, r4
 8003fb8:	f000 f96d 	bl	8004296 <USBD_CtlSendStatus>
 8003fbc:	4635      	mov	r5, r6
 8003fbe:	e786      	b.n	8003ece <USBD_StdDevReq+0xd2>
    else if (cfgidx != pdev->dev_config)
 8003fc0:	6841      	ldr	r1, [r0, #4]
 8003fc2:	2901      	cmp	r1, #1
 8003fc4:	d04a      	beq.n	800405c <USBD_StdDevReq+0x260>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8003fc6:	b2c9      	uxtb	r1, r1
 8003fc8:	f7ff fdf9 	bl	8003bbe <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8003fcc:	7839      	ldrb	r1, [r7, #0]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8003fce:	4620      	mov	r0, r4
      pdev->dev_config = cfgidx;
 8003fd0:	6061      	str	r1, [r4, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8003fd2:	f7ff fded 	bl	8003bb0 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 8003fd6:	4606      	mov	r6, r0
 8003fd8:	2800      	cmp	r0, #0
 8003fda:	d03f      	beq.n	800405c <USBD_StdDevReq+0x260>
        USBD_CtlError(pdev, req);
 8003fdc:	4620      	mov	r0, r4
 8003fde:	f7ff ff02 	bl	8003de6 <USBD_CtlError.constprop.0>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8003fe2:	7921      	ldrb	r1, [r4, #4]
 8003fe4:	4620      	mov	r0, r4
 8003fe6:	f7ff fdea 	bl	8003bbe <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8003fea:	2302      	movs	r3, #2
 8003fec:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8003ff0:	e7e4      	b.n	8003fbc <USBD_StdDevReq+0x1c0>
  if (req->wLength != 1U)
 8003ff2:	88ca      	ldrh	r2, [r1, #6]
 8003ff4:	2a01      	cmp	r2, #1
 8003ff6:	f47f af67 	bne.w	8003ec8 <USBD_StdDevReq+0xcc>
    switch (pdev->dev_state)
 8003ffa:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d805      	bhi.n	800400e <USBD_StdDevReq+0x212>
 8004002:	b133      	cbz	r3, 8004012 <USBD_StdDevReq+0x216>
      pdev->dev_default_config = 0U;
 8004004:	4601      	mov	r1, r0
 8004006:	2300      	movs	r3, #0
 8004008:	f841 3f08 	str.w	r3, [r1, #8]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800400c:	e73e      	b.n	8003e8c <USBD_StdDevReq+0x90>
    switch (pdev->dev_state)
 800400e:	2b03      	cmp	r3, #3
 8004010:	d004      	beq.n	800401c <USBD_StdDevReq+0x220>
      USBD_CtlError(pdev, req);
 8004012:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 8004014:	2500      	movs	r5, #0
 8004016:	f7ff fee6 	bl	8003de6 <USBD_CtlError.constprop.0>
      break;
 800401a:	e758      	b.n	8003ece <USBD_StdDevReq+0xd2>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800401c:	1d01      	adds	r1, r0, #4
 800401e:	e735      	b.n	8003e8c <USBD_StdDevReq+0x90>
  switch (pdev->dev_state)
 8004020:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004024:	3b01      	subs	r3, #1
 8004026:	2b02      	cmp	r3, #2
 8004028:	d8f3      	bhi.n	8004012 <USBD_StdDevReq+0x216>
    if (req->wLength != 0x2U)
 800402a:	88cb      	ldrh	r3, [r1, #6]
 800402c:	2b02      	cmp	r3, #2
 800402e:	f47f af4b 	bne.w	8003ec8 <USBD_StdDevReq+0xcc>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8004032:	2301      	movs	r3, #1
 8004034:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup != 0U)
 8004036:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 800403a:	b10b      	cbz	r3, 8004040 <USBD_StdDevReq+0x244>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800403c:	2303      	movs	r3, #3
 800403e:	60c3      	str	r3, [r0, #12]
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8004040:	2202      	movs	r2, #2
 8004042:	f104 010c 	add.w	r1, r4, #12
 8004046:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 8004048:	463d      	mov	r5, r7
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800404a:	f000 f907 	bl	800425c <USBD_CtlSendData>
    break;
 800404e:	e73e      	b.n	8003ece <USBD_StdDevReq+0xd2>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004050:	884b      	ldrh	r3, [r1, #2]
 8004052:	2b01      	cmp	r3, #1
 8004054:	f47f af3b 	bne.w	8003ece <USBD_StdDevReq+0xd2>
        pdev->dev_remote_wakeup = 0U;
 8004058:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800405c:	4620      	mov	r0, r4
 800405e:	f000 f91a 	bl	8004296 <USBD_CtlSendStatus>
 8004062:	e734      	b.n	8003ece <USBD_StdDevReq+0xd2>
  switch (pdev->dev_state)
 8004064:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004068:	3b01      	subs	r3, #1
 800406a:	2b02      	cmp	r3, #2
 800406c:	d8d1      	bhi.n	8004012 <USBD_StdDevReq+0x216>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800406e:	884b      	ldrh	r3, [r1, #2]
 8004070:	2b01      	cmp	r3, #1
 8004072:	f47f af2c 	bne.w	8003ece <USBD_StdDevReq+0xd2>
        pdev->dev_remote_wakeup = 0U;
 8004076:	2300      	movs	r3, #0
 8004078:	e7ee      	b.n	8004058 <USBD_StdDevReq+0x25c>
 800407a:	bf00      	nop
 800407c:	24004a2e 	.word	0x24004a2e

08004080 <USBD_StdItfReq>:
{
 8004080:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004082:	780b      	ldrb	r3, [r1, #0]
{
 8004084:	4604      	mov	r4, r0
 8004086:	460e      	mov	r6, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004088:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800408c:	2a40      	cmp	r2, #64	; 0x40
 800408e:	d001      	beq.n	8004094 <USBD_StdItfReq+0x14>
 8004090:	065b      	lsls	r3, r3, #25
 8004092:	d416      	bmi.n	80040c2 <USBD_StdItfReq+0x42>
    switch (pdev->dev_state)
 8004094:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8004098:	3b01      	subs	r3, #1
 800409a:	2b02      	cmp	r3, #2
 800409c:	d811      	bhi.n	80040c2 <USBD_StdItfReq+0x42>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800409e:	7933      	ldrb	r3, [r6, #4]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d80e      	bhi.n	80040c2 <USBD_StdItfReq+0x42>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80040a4:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 80040a8:	4631      	mov	r1, r6
 80040aa:	4620      	mov	r0, r4
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 80040b0:	88f3      	ldrh	r3, [r6, #6]
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80040b2:	4605      	mov	r5, r0
        if ((req->wLength == 0U) && (ret == USBD_OK))
 80040b4:	b91b      	cbnz	r3, 80040be <USBD_StdItfReq+0x3e>
 80040b6:	b910      	cbnz	r0, 80040be <USBD_StdItfReq+0x3e>
          (void)USBD_CtlSendStatus(pdev);
 80040b8:	4620      	mov	r0, r4
 80040ba:	f000 f8ec 	bl	8004296 <USBD_CtlSendStatus>
}
 80040be:	4628      	mov	r0, r5
 80040c0:	bd70      	pop	{r4, r5, r6, pc}
      USBD_CtlError(pdev, req);
 80040c2:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 80040c4:	2500      	movs	r5, #0
      USBD_CtlError(pdev, req);
 80040c6:	f7ff fe8e 	bl	8003de6 <USBD_CtlError.constprop.0>
      break;
 80040ca:	e7f8      	b.n	80040be <USBD_StdItfReq+0x3e>

080040cc <USBD_StdEPReq>:
{
 80040cc:	b570      	push	{r4, r5, r6, lr}
 80040ce:	780b      	ldrb	r3, [r1, #0]
 80040d0:	4604      	mov	r4, r0
 80040d2:	460d      	mov	r5, r1
 80040d4:	f003 0360 	and.w	r3, r3, #96	; 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80040d8:	2b20      	cmp	r3, #32
 80040da:	d029      	beq.n	8004130 <USBD_StdEPReq+0x64>
 80040dc:	2b40      	cmp	r3, #64	; 0x40
 80040de:	d027      	beq.n	8004130 <USBD_StdEPReq+0x64>
 80040e0:	bba3      	cbnz	r3, 800414c <USBD_StdEPReq+0x80>
    switch (req->bRequest)
 80040e2:	786b      	ldrb	r3, [r5, #1]
  ep_addr = LOBYTE(req->wIndex);
 80040e4:	888a      	ldrh	r2, [r1, #4]
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	7909      	ldrb	r1, [r1, #4]
    switch (req->bRequest)
 80040ea:	d040      	beq.n	800416e <USBD_StdEPReq+0xa2>
 80040ec:	2b03      	cmp	r3, #3
 80040ee:	d027      	beq.n	8004140 <USBD_StdEPReq+0x74>
 80040f0:	bb63      	cbnz	r3, 800414c <USBD_StdEPReq+0x80>
      switch (pdev->dev_state)
 80040f2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d059      	beq.n	80041ae <USBD_StdEPReq+0xe2>
 80040fa:	2b03      	cmp	r3, #3
 80040fc:	d126      	bne.n	800414c <USBD_StdEPReq+0x80>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80040fe:	f001 030f 	and.w	r3, r1, #15
        if ((ep_addr & 0x80U) == 0x80U)
 8004102:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004106:	f04f 0214 	mov.w	r2, #20
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800410a:	fb02 0303 	mla	r3, r2, r3, r0
        if ((ep_addr & 0x80U) == 0x80U)
 800410e:	d05f      	beq.n	80041d0 <USBD_StdEPReq+0x104>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004110:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004112:	b1db      	cbz	r3, 800414c <USBD_StdEPReq+0x80>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004114:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8004118:	3501      	adds	r5, #1
 800411a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800411e:	eb00 0585 	add.w	r5, r0, r5, lsl #2
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004122:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 8004126:	d15f      	bne.n	80041e8 <USBD_StdEPReq+0x11c>
            pep->status = 0x0001U;
 8004128:	602b      	str	r3, [r5, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800412a:	2202      	movs	r2, #2
 800412c:	4629      	mov	r1, r5
 800412e:	e04b      	b.n	80041c8 <USBD_StdEPReq+0xfc>
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004130:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8004134:	4629      	mov	r1, r5
 8004136:	4620      	mov	r0, r4
 8004138:	689b      	ldr	r3, [r3, #8]
}
 800413a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800413e:	4718      	bx	r3
      switch (pdev->dev_state)
 8004140:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004144:	2b02      	cmp	r3, #2
 8004146:	d029      	beq.n	800419c <USBD_StdEPReq+0xd0>
 8004148:	2b03      	cmp	r3, #3
 800414a:	d003      	beq.n	8004154 <USBD_StdEPReq+0x88>
        USBD_CtlError(pdev, req);
 800414c:	4620      	mov	r0, r4
 800414e:	f7ff fe4a 	bl	8003de6 <USBD_CtlError.constprop.0>
        break;
 8004152:	e00a      	b.n	800416a <USBD_StdEPReq+0x9e>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8004154:	886b      	ldrh	r3, [r5, #2]
 8004156:	b92b      	cbnz	r3, 8004164 <USBD_StdEPReq+0x98>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004158:	064a      	lsls	r2, r1, #25
 800415a:	d003      	beq.n	8004164 <USBD_StdEPReq+0x98>
 800415c:	88eb      	ldrh	r3, [r5, #6]
 800415e:	b90b      	cbnz	r3, 8004164 <USBD_StdEPReq+0x98>
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8004160:	f000 fca0 	bl	8004aa4 <USBD_LL_StallEP>
        (void)USBD_CtlSendStatus(pdev);
 8004164:	4620      	mov	r0, r4
 8004166:	f000 f896 	bl	8004296 <USBD_CtlSendStatus>
}
 800416a:	2000      	movs	r0, #0
 800416c:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 800416e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004172:	2b02      	cmp	r3, #2
 8004174:	d012      	beq.n	800419c <USBD_StdEPReq+0xd0>
 8004176:	2b03      	cmp	r3, #3
 8004178:	d1e8      	bne.n	800414c <USBD_StdEPReq+0x80>
        if (req->wValue == USB_FEATURE_EP_HALT)
 800417a:	886b      	ldrh	r3, [r5, #2]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d1f4      	bne.n	800416a <USBD_StdEPReq+0x9e>
          if ((ep_addr & 0x7FU) != 0x00U)
 8004180:	064e      	lsls	r6, r1, #25
 8004182:	d001      	beq.n	8004188 <USBD_StdEPReq+0xbc>
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8004184:	f000 fc97 	bl	8004ab6 <USBD_LL_ClearStallEP>
          (void)USBD_CtlSendStatus(pdev);
 8004188:	4620      	mov	r0, r4
 800418a:	f000 f884 	bl	8004296 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800418e:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8004192:	4629      	mov	r1, r5
 8004194:	4620      	mov	r0, r4
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	4798      	blx	r3
 800419a:	e7e6      	b.n	800416a <USBD_StdEPReq+0x9e>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800419c:	064b      	lsls	r3, r1, #25
 800419e:	d0d5      	beq.n	800414c <USBD_StdEPReq+0x80>
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80041a0:	f000 fc80 	bl	8004aa4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80041a4:	2180      	movs	r1, #128	; 0x80
 80041a6:	4620      	mov	r0, r4
 80041a8:	f000 fc7c 	bl	8004aa4 <USBD_LL_StallEP>
 80041ac:	e7dd      	b.n	800416a <USBD_StdEPReq+0x9e>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80041ae:	0649      	lsls	r1, r1, #25
 80041b0:	d1cc      	bne.n	800414c <USBD_StdEPReq+0x80>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80041b2:	0613      	lsls	r3, r2, #24
        pep->status = 0x0000U;
 80041b4:	f04f 0300 	mov.w	r3, #0
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80041b8:	f04f 0202 	mov.w	r2, #2
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80041bc:	bf4c      	ite	mi
 80041be:	f100 0114 	addmi.w	r1, r0, #20
 80041c2:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
        pep->status = 0x0000U;
 80041c6:	600b      	str	r3, [r1, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80041c8:	4620      	mov	r0, r4
 80041ca:	f000 f847 	bl	800425c <USBD_CtlSendData>
          break;
 80041ce:	e7cc      	b.n	800416a <USBD_StdEPReq+0x9e>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80041d0:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d0b9      	beq.n	800414c <USBD_StdEPReq+0x80>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80041d8:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 80041dc:	2314      	movs	r3, #20
 80041de:	fb03 0505 	mla	r5, r3, r5, r0
 80041e2:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 80041e6:	e79c      	b.n	8004122 <USBD_StdEPReq+0x56>
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80041e8:	4620      	mov	r0, r4
 80041ea:	f000 fc0b 	bl	8004a04 <USBD_LL_IsStallEP>
 80041ee:	b108      	cbz	r0, 80041f4 <USBD_StdEPReq+0x128>
            pep->status = 0x0001U;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e799      	b.n	8004128 <USBD_StdEPReq+0x5c>
            pep->status = 0x0000U;
 80041f4:	6028      	str	r0, [r5, #0]
 80041f6:	e798      	b.n	800412a <USBD_StdEPReq+0x5e>

080041f8 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 80041f8:	780b      	ldrb	r3, [r1, #0]
 80041fa:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 80041fc:	784b      	ldrb	r3, [r1, #1]
 80041fe:	7043      	strb	r3, [r0, #1]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 8004200:	884b      	ldrh	r3, [r1, #2]
  req->wValue = SWAPBYTE(pbuff);
 8004202:	8043      	strh	r3, [r0, #2]
 8004204:	888b      	ldrh	r3, [r1, #4]
  req->wIndex = SWAPBYTE(pbuff);
 8004206:	8083      	strh	r3, [r0, #4]
 8004208:	88cb      	ldrh	r3, [r1, #6]
  req->wLength = SWAPBYTE(pbuff);
 800420a:	80c3      	strh	r3, [r0, #6]
}
 800420c:	4770      	bx	lr

0800420e <USBD_CtlError>:
{
 800420e:	b510      	push	{r4, lr}
 8004210:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8004212:	2180      	movs	r1, #128	; 0x80
 8004214:	f000 fc46 	bl	8004aa4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8004218:	2100      	movs	r1, #0
 800421a:	4620      	mov	r0, r4
}
 800421c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 8004220:	f000 bc40 	b.w	8004aa4 <USBD_LL_StallEP>

08004224 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8004224:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 8004226:	b188      	cbz	r0, 800424c <USBD_GetString+0x28>
 8004228:	2400      	movs	r4, #0
 800422a:	3801      	subs	r0, #1
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 800422c:	4623      	mov	r3, r4
 800422e:	3401      	adds	r4, #1
 8004230:	5d05      	ldrb	r5, [r0, r4]
 8004232:	2d00      	cmp	r5, #0
 8004234:	d1fa      	bne.n	800422c <USBD_GetString+0x8>
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8004236:	b2db      	uxtb	r3, r3
 8004238:	3301      	adds	r3, #1
 800423a:	005b      	lsls	r3, r3, #1
 800423c:	8013      	strh	r3, [r2, #0]
  unicode[idx] = *(uint8_t *)len;
 800423e:	700b      	strb	r3, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8004240:	2303      	movs	r3, #3
 8004242:	704b      	strb	r3, [r1, #1]
  idx++;
 8004244:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 8004246:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800424a:	b902      	cbnz	r2, 800424e <USBD_GetString+0x2a>
}
 800424c:	bd30      	pop	{r4, r5, pc}
    unicode[idx] = *pdesc;
 800424e:	54ca      	strb	r2, [r1, r3]
    idx++;
 8004250:	1c5a      	adds	r2, r3, #1
    idx++;
 8004252:	3302      	adds	r3, #2
    unicode[idx] = 0U;
 8004254:	b2d2      	uxtb	r2, r2
    idx++;
 8004256:	b2db      	uxtb	r3, r3
    unicode[idx] = 0U;
 8004258:	548d      	strb	r5, [r1, r2]
    idx++;
 800425a:	e7f4      	b.n	8004246 <USBD_GetString+0x22>

0800425c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800425c:	b510      	push	{r4, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800425e:	2402      	movs	r4, #2
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length = len;

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004260:	4613      	mov	r3, r2
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004262:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  pdev->ep_in[0].rem_length = len;
 8004266:	e9c0 2206 	strd	r2, r2, [r0, #24]
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800426a:	460a      	mov	r2, r1
 800426c:	2100      	movs	r1, #0
 800426e:	f000 fc34 	bl	8004ada <USBD_LL_Transmit>

  return USBD_OK;
}
 8004272:	2000      	movs	r0, #0
 8004274:	bd10      	pop	{r4, pc}

08004276 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8004276:	b508      	push	{r3, lr}
 8004278:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800427a:	460a      	mov	r2, r1
 800427c:	2100      	movs	r1, #0
 800427e:	f000 fc2c 	bl	8004ada <USBD_LL_Transmit>

  return USBD_OK;
}
 8004282:	2000      	movs	r0, #0
 8004284:	bd08      	pop	{r3, pc}

08004286 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8004286:	b508      	push	{r3, lr}
 8004288:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800428a:	460a      	mov	r2, r1
 800428c:	2100      	movs	r1, #0
 800428e:	f000 fc2d 	bl	8004aec <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004292:	2000      	movs	r0, #0
 8004294:	bd08      	pop	{r3, pc}

08004296 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8004296:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004298:	2304      	movs	r3, #4
 800429a:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800429e:	2300      	movs	r3, #0
 80042a0:	461a      	mov	r2, r3
 80042a2:	4619      	mov	r1, r3
 80042a4:	f000 fc19 	bl	8004ada <USBD_LL_Transmit>

  return USBD_OK;
}
 80042a8:	2000      	movs	r0, #0
 80042aa:	bd08      	pop	{r3, pc}

080042ac <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80042ac:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80042ae:	2305      	movs	r3, #5
 80042b0:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80042b4:	2300      	movs	r3, #0
 80042b6:	461a      	mov	r2, r3
 80042b8:	4619      	mov	r1, r3
 80042ba:	f000 fc17 	bl	8004aec <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80042be:	2000      	movs	r0, #0
 80042c0:	bd08      	pop	{r3, pc}

080042c2 <AssertFailure>:
** \param     line   Linenumber in the source file where the assertion occurred.
** \return    none
**
****************************************************************************************/
void AssertFailure(blt_char *file, blt_int32u line)
{
 80042c2:	b508      	push	{r3, lr}
  /* hang the software so that it requires a hard reset */
  for (;;)
  {
    /* keep servicing the watchdog so that this one does not cause a reset */
    CopService();
 80042c4:	f000 f8b1 	bl	800442a <CopService>
  for (;;)
 80042c8:	e7fc      	b.n	80042c4 <AssertFailure+0x2>
	...

080042cc <BackDoorCheck>:
**            controls the opening/closing of the backdoor.
** \return    none
**
****************************************************************************************/
void BackDoorCheck(void)
{
 80042cc:	b510      	push	{r4, lr}
#if (BOOT_BACKDOOR_HOOKS_ENABLE == 0)
#if (BOOT_COM_ENABLE > 0)
  /* check if a connection with the host was already established. in this case the
   * backdoor stays open anyway, so no need to check if it needs to be closed.
   */
  if (ComIsConnected() == BLT_TRUE)
 80042ce:	f000 f8a3 	bl	8004418 <ComIsConnected>
 80042d2:	2801      	cmp	r0, #1
 80042d4:	d014      	beq.n	8004300 <BackDoorCheck+0x34>
    return;
  }
#endif

  /* when the backdoor is still open, check if it's time to close it */
  if (backdoorOpen == BLT_TRUE)
 80042d6:	4c0b      	ldr	r4, [pc, #44]	; (8004304 <BackDoorCheck+0x38>)
 80042d8:	7823      	ldrb	r3, [r4, #0]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d110      	bne.n	8004300 <BackDoorCheck+0x34>
  {
    /* check if the backdoor entry time window elapsed */
    if (TimerGet() >= (BOOT_BACKDOOR_ENTRY_TIMEOUT_MS + backdoorExtensionTime + backdoorOpenTime))
 80042de:	f7ff fa7d 	bl	80037dc <TimerGet>
 80042e2:	4b09      	ldr	r3, [pc, #36]	; (8004308 <BackDoorCheck+0x3c>)
 80042e4:	4a09      	ldr	r2, [pc, #36]	; (800430c <BackDoorCheck+0x40>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	6812      	ldr	r2, [r2, #0]
 80042ea:	4413      	add	r3, r2
 80042ec:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80042f0:	4298      	cmp	r0, r3
 80042f2:	d305      	bcc.n	8004300 <BackDoorCheck+0x34>
    {
      /* close the backdoor */
      backdoorOpen = BLT_FALSE;
 80042f4:	2300      	movs	r3, #0
 80042f6:	7023      	strb	r3, [r4, #0]
        CpuStartUserProgram();
      }
    }
  }
#endif
} /*** end of BackDoorCheck ***/
 80042f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        CpuStartUserProgram();
 80042fc:	f7ff b87a 	b.w	80033f4 <CpuStartUserProgram>
} /*** end of BackDoorCheck ***/
 8004300:	bd10      	pop	{r4, pc}
 8004302:	bf00      	nop
 8004304:	24004a34 	.word	0x24004a34
 8004308:	24004a30 	.word	0x24004a30
 800430c:	24004a38 	.word	0x24004a38

08004310 <BackDoorSetExtension>:
**
****************************************************************************************/
void BackDoorSetExtension(blt_int32u extension_ms)
{
  /* update the extension time */
  backdoorExtensionTime = extension_ms;
 8004310:	4b01      	ldr	r3, [pc, #4]	; (8004318 <BackDoorSetExtension+0x8>)
 8004312:	6018      	str	r0, [r3, #0]
} /*** end of BackDoorSetExtension ***/
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	24004a30 	.word	0x24004a30

0800431c <BackDoorGetExtension>:
****************************************************************************************/
blt_int32u BackDoorGetExtension(void)
{
  /* read out and reutrn the currently configured extension time */
  return backdoorExtensionTime;
} /*** end of BackDoorGetExtension ***/
 800431c:	4b01      	ldr	r3, [pc, #4]	; (8004324 <BackDoorGetExtension+0x8>)
 800431e:	6818      	ldr	r0, [r3, #0]
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	24004a30 	.word	0x24004a30

08004328 <BackDoorRestartTimer>:
**            called.
** \return    none
**
****************************************************************************************/
void BackDoorRestartTimer(void)
{
 8004328:	b508      	push	{r3, lr}
  /* only restart the time if the backdoor is actually still open */
  if (backdoorOpen == BLT_TRUE)
 800432a:	4b04      	ldr	r3, [pc, #16]	; (800433c <BackDoorRestartTimer+0x14>)
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d103      	bne.n	800433a <BackDoorRestartTimer+0x12>
  {
    backdoorOpenTime = TimerGet();
 8004332:	f7ff fa53 	bl	80037dc <TimerGet>
 8004336:	4b02      	ldr	r3, [pc, #8]	; (8004340 <BackDoorRestartTimer+0x18>)
 8004338:	6018      	str	r0, [r3, #0]
  }
} /*** end of BackDoorRestartTimer ***/
 800433a:	bd08      	pop	{r3, pc}
 800433c:	24004a34 	.word	0x24004a34
 8004340:	24004a38 	.word	0x24004a38

08004344 <BackDoorInit>:
{
 8004344:	b508      	push	{r3, lr}
  backdoorOpen = BLT_TRUE;
 8004346:	2201      	movs	r2, #1
 8004348:	4b03      	ldr	r3, [pc, #12]	; (8004358 <BackDoorInit+0x14>)
 800434a:	701a      	strb	r2, [r3, #0]
  BackDoorRestartTimer();
 800434c:	f7ff ffec 	bl	8004328 <BackDoorRestartTimer>
} /*** end of BackDoorInit ***/
 8004350:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  BackDoorCheck();
 8004354:	f7ff bfba 	b.w	80042cc <BackDoorCheck>
 8004358:	24004a34 	.word	0x24004a34

0800435c <BootInit>:
** \brief     Initializes the bootloader core.
** \return    none
**
****************************************************************************************/
void BootInit(void)
{
 800435c:	b508      	push	{r3, lr}
  /* initialize the CPU */
  CpuInit();
 800435e:	f7ff f847 	bl	80033f0 <CpuInit>
  /* initialize the watchdog */
  CopInit();
 8004362:	f000 f860 	bl	8004426 <CopInit>
  /* initialize the millisecond timer */
  TimerInit();
 8004366:	f7ff fa1b 	bl	80037a0 <TimerInit>
  /* initialize the non-volatile memory driver */
  NvmInit();
 800436a:	f7ff f9ff 	bl	800376c <NvmInit>
  /* initialize the file system module */
  FileInit();
#endif
#if (BOOT_COM_ENABLE > 0)
  /* initialize the communication module */
  ComInit();
 800436e:	f000 f80f 	bl	8004390 <ComInit>
  /* initialize the gateway module */
  GatewayInit();
#endif
  /* initialize the backdoor entry */
  BackDoorInit();
} /*** end of BootInit ***/
 8004372:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  BackDoorInit();
 8004376:	f7ff bfe5 	b.w	8004344 <BackDoorInit>

0800437a <BootTask>:
** \brief     Task function of the bootloader core that drives the program.
** \return    none
**
****************************************************************************************/
void BootTask(void)
{
 800437a:	b508      	push	{r3, lr}
  /* service the watchdog */
  CopService();
 800437c:	f000 f855 	bl	800442a <CopService>
  /* update the millisecond timer */
  TimerUpdate();
 8004380:	f7ff fa20 	bl	80037c4 <TimerUpdate>
  /* call worker task for updating firmware from locally attached file storage */
  FileTask();
#endif /* BOOT_FILE_SYS_ENABLE > 0 */
#if (BOOT_COM_ENABLE > 0)
  /* process possibly pending communication data */
  ComTask();
 8004384:	f000 f810 	bl	80043a8 <ComTask>
  /* run the gateway */
  GatewayTask();
#endif
  /* control the backdoor */
  BackDoorCheck();
} /*** end of BootTask ***/
 8004388:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  BackDoorCheck();
 800438c:	f7ff bf9e 	b.w	80042cc <BackDoorCheck>

08004390 <ComInit>:
**            the communication.
** \return    none
**
****************************************************************************************/
void ComInit(void)
{
 8004390:	b508      	push	{r3, lr}
  /* initialize the XCP communication protocol */
  XcpInit();
 8004392:	f000 f859 	bl	8004448 <XcpInit>
  /* set it as active */
  comActiveInterface = COM_IF_RS232;
#endif
#if (BOOT_COM_USB_ENABLE > 0)
  /* initialize the USB interface */
  UsbInit();
 8004396:	f7ff fa7f 	bl	8003898 <UsbInit>
  /* set it as active */
  comActiveInterface = COM_IF_USB;
 800439a:	4b02      	ldr	r3, [pc, #8]	; (80043a4 <ComInit+0x14>)
 800439c:	2202      	movs	r2, #2
 800439e:	701a      	strb	r2, [r3, #0]
  NetInit();
  /* set it as active */
  comActiveInterface = COM_IF_NET;
  #endif
#endif
} /*** end of ComInit ***/
 80043a0:	bd08      	pop	{r3, pc}
 80043a2:	bf00      	nop
 80043a4:	24000010 	.word	0x24000010

080043a8 <ComTask>:
**            and submitting the request to process newly received data.
** \return    none
**
****************************************************************************************/
void ComTask(void)
{
 80043a8:	b507      	push	{r0, r1, r2, lr}
    /* process packet */
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
  }
#endif
#if (BOOT_COM_USB_ENABLE > 0)
  if (UsbReceivePacket(&xcpCtoReqPacket[0], &xcpPacketLen) == BLT_TRUE)
 80043aa:	4809      	ldr	r0, [pc, #36]	; (80043d0 <ComTask+0x28>)
 80043ac:	f10d 0107 	add.w	r1, sp, #7
 80043b0:	f7ff fafe 	bl	80039b0 <UsbReceivePacket>
 80043b4:	2801      	cmp	r0, #1
 80043b6:	d107      	bne.n	80043c8 <ComTask+0x20>
  {
    /* make this the active interface */
    comActiveInterface = COM_IF_USB;
 80043b8:	4b06      	ldr	r3, [pc, #24]	; (80043d4 <ComTask+0x2c>)
 80043ba:	2202      	movs	r2, #2
    /* process packet */
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
 80043bc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80043c0:	4803      	ldr	r0, [pc, #12]	; (80043d0 <ComTask+0x28>)
    comActiveInterface = COM_IF_USB;
 80043c2:	701a      	strb	r2, [r3, #0]
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
 80043c4:	f000 f862 	bl	800448c <XcpPacketReceived>
    comActiveInterface = COM_IF_NET;
    /* process packet */
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
  }
#endif
} /*** end of ComTask ***/
 80043c8:	b003      	add	sp, #12
 80043ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80043ce:	bf00      	nop
 80043d0:	24004a3c 	.word	0x24004a3c
 80043d4:	24000010 	.word	0x24000010

080043d8 <ComFree>:
****************************************************************************************/
void ComFree(void)
{
#if (BOOT_COM_USB_ENABLE > 0)
  /* disconnect the usb device from the usb host */
  UsbFree();
 80043d8:	f7ff baae 	b.w	8003938 <UsbFree>

080043dc <ComTransmitPacket>:
** \param     len  Number of data bytes that need to be transmitted.
** \return    none
**
****************************************************************************************/
void ComTransmitPacket(blt_int8u *data, blt_int16u len)
{
 80043dc:	b508      	push	{r3, lr}
    Rs232TransmitPacket(data, (blt_int8u)len);
  }
#endif
#if (BOOT_COM_USB_ENABLE > 0)
  /* transmit the packet */
  if (comActiveInterface == COM_IF_USB)
 80043de:	4b05      	ldr	r3, [pc, #20]	; (80043f4 <ComTransmitPacket+0x18>)
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d102      	bne.n	80043ec <ComTransmitPacket+0x10>
  {
    UsbTransmitPacket(data, len);
 80043e6:	b2c9      	uxtb	r1, r1
 80043e8:	f7ff fab6 	bl	8003958 <UsbTransmitPacket>
  }
#endif

  /* send signal that the packet was transmitted */
  XcpPacketTransmitted();
} /*** end of ComTransmitPacket ***/
 80043ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  XcpPacketTransmitted();
 80043f0:	f000 b844 	b.w	800447c <XcpPacketTransmitted>
 80043f4:	24000010 	.word	0x24000010

080043f8 <ComGetActiveInterfaceMaxRxLen>:
blt_int16u ComGetActiveInterfaceMaxRxLen(void)
{
  blt_int16u result;

  /* filter on communication interface identifier */
  switch (comActiveInterface)
 80043f8:	4b04      	ldr	r3, [pc, #16]	; (800440c <ComGetActiveInterfaceMaxRxLen+0x14>)
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	3b01      	subs	r3, #1
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	2b02      	cmp	r3, #2
 8004402:	bf9a      	itte	ls
 8004404:	4a02      	ldrls	r2, [pc, #8]	; (8004410 <ComGetActiveInterfaceMaxRxLen+0x18>)
 8004406:	5cd0      	ldrbls	r0, [r2, r3]
 8004408:	2081      	movhi	r0, #129	; 0x81
      result = BOOT_COM_RX_MAX_DATA;
      break;
  }

  return result;
} /*** end of ComGetActiveInterfaceMaxRxLen ***/
 800440a:	4770      	bx	lr
 800440c:	24000010 	.word	0x24000010
 8004410:	0800577d 	.word	0x0800577d

08004414 <ComGetActiveInterfaceMaxTxLen>:
 8004414:	f7ff bff0 	b.w	80043f8 <ComGetActiveInterfaceMaxRxLen>

08004418 <ComIsConnected>:
** \brief     This function obtains the XCP connection state.
** \return    BLT_TRUE when an XCP connection is established, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool ComIsConnected(void)
{
 8004418:	b508      	push	{r3, lr}
  blt_bool result = BLT_FALSE;

  /* Is there an active XCP connection? This indicates that the communication interface
   * is in the connection state. 
   */  
  if (XcpIsConnected())
 800441a:	f000 f825 	bl	8004468 <XcpIsConnected>
    result = BLT_TRUE;
  }
#endif
  /* give the result back to the caller. */
  return result;
} /*** end of ComIsConnected ***/
 800441e:	3800      	subs	r0, #0
 8004420:	bf18      	it	ne
 8004422:	2001      	movne	r0, #1
 8004424:	bd08      	pop	{r3, pc}

08004426 <CopInit>:
**
****************************************************************************************/
void CopInit(void)
{
#if (BOOT_COP_HOOKS_ENABLE > 0)
  CopInitHook();
 8004426:	f7fb bf73 	b.w	8000310 <CopInitHook>

0800442a <CopService>:
**
****************************************************************************************/
void CopService(void)
{
#if (BOOT_COP_HOOKS_ENABLE > 0)
  CopServiceHook();
 800442a:	f7fb bf74 	b.w	8000316 <CopServiceHook>
	...

08004430 <XcpSetCtoError>:
**
****************************************************************************************/
static void XcpSetCtoError(blt_int8u error)
{
  /* prepare the error packet */
  xcpInfo.ctoData[0] = XCP_PID_ERR;
 8004430:	4b03      	ldr	r3, [pc, #12]	; (8004440 <XcpSetCtoError+0x10>)
 8004432:	22fe      	movs	r2, #254	; 0xfe
 8004434:	701a      	strb	r2, [r3, #0]
  xcpInfo.ctoData[1] = error;
  xcpInfo.ctoLen = 2;
 8004436:	2202      	movs	r2, #2
  xcpInfo.ctoData[1] = error;
 8004438:	7058      	strb	r0, [r3, #1]
  xcpInfo.ctoLen = 2;
 800443a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
} /*** end of XcpSetCtoError ***/
 800443e:	4770      	bx	lr
 8004440:	24004ac0 	.word	0x24004ac0

08004444 <XcpGetOrderedLong>:
  result |= (blt_int32u)(data[1] << 16);
  result |= (blt_int32u)(data[0] << 24);
#endif
  /* Give the result back to the caller. */
  return result;
} /*** end of XcpGetOrderedLong ***/
 8004444:	6800      	ldr	r0, [r0, #0]
 8004446:	4770      	bx	lr

08004448 <XcpInit>:
  xcpInfo.mta = 0;
 8004448:	4b06      	ldr	r3, [pc, #24]	; (8004464 <XcpInit+0x1c>)
 800444a:	2200      	movs	r2, #0
 800444c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  xcpInfo.ctoLen = 0;
 8004450:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
  xcpInfo.connected = 0;
 8004454:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  xcpInfo.protection = 0;
 8004458:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
  xcpInfo.ctoPending = 0;
 800445c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
} /*** end of XcpInit ***/
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	24004ac0 	.word	0x24004ac0

08004468 <XcpIsConnected>:
  if (xcpInfo.connected == 0)
 8004468:	4b03      	ldr	r3, [pc, #12]	; (8004478 <XcpIsConnected+0x10>)
 800446a:	f893 0081 	ldrb.w	r0, [r3, #129]	; 0x81
} /*** end of XcpIsConnected ***/
 800446e:	3800      	subs	r0, #0
 8004470:	bf18      	it	ne
 8004472:	2001      	movne	r0, #1
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	24004ac0 	.word	0x24004ac0

0800447c <XcpPacketTransmitted>:
  xcpInfo.ctoPending = 0;
 800447c:	4b02      	ldr	r3, [pc, #8]	; (8004488 <XcpPacketTransmitted+0xc>)
 800447e:	2200      	movs	r2, #0
 8004480:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
} /*** end of XcpPacketTransmitted ***/
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	24004ac0 	.word	0x24004ac0

0800448c <XcpPacketReceived>:
{
 800448c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (data[0] == XCP_CMD_CONNECT)
 800448e:	7803      	ldrb	r3, [r0, #0]
{
 8004490:	4605      	mov	r5, r0
 8004492:	4c8a      	ldr	r4, [pc, #552]	; (80046bc <XcpPacketReceived+0x230>)
  if (data[0] == XCP_CMD_CONNECT)
 8004494:	2bff      	cmp	r3, #255	; 0xff
 8004496:	d130      	bne.n	80044fa <XcpPacketReceived+0x6e>

  /* enable resource protection */
  XcpProtectResources();

  /* indicate that the connection is established */
  xcpInfo.connected = 1;
 8004498:	2201      	movs	r2, #1
  xcpInfo.protection = 0;
 800449a:	2300      	movs	r3, #0
  xcpInfo.connected = 1;
 800449c:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80044a0:	f241 02ff 	movw	r2, #4351	; 0x10ff
  xcpInfo.protection = 0;
 80044a4:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
#if (XCP_RES_DATA_STIMULATION_EN == 1)
  xcpInfo.ctoData[1] |= XCP_RES_STIM;
#endif

  /* report communication mode info. only byte granularity is supported */
  xcpInfo.ctoData[2] = 0;
 80044a8:	70a3      	strb	r3, [r4, #2]
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80044aa:	8022      	strh	r2, [r4, #0]
  /* configure for motorola or intel byte ordering */
  xcpInfo.ctoData[2] |= XCP_MOTOROLA_FORMAT;

  /* report max cto data length */
  xcpInfo.ctoData[3] = (blt_int8u)XCP_CTO_PACKET_LEN;
 80044ac:	f7ff ffa4 	bl	80043f8 <ComGetActiveInterfaceMaxRxLen>
 80044b0:	70e0      	strb	r0, [r4, #3]

  /* report max dto data length */
#if (XCP_MOTOROLA_FORMAT == 0)
  xcpInfo.ctoData[4] = (blt_int8u)XCP_DTO_PACKET_LEN;
 80044b2:	f7ff ffaf 	bl	8004414 <ComGetActiveInterfaceMaxTxLen>
 80044b6:	7120      	strb	r0, [r4, #4]
  xcpInfo.ctoData[5] = (blt_int8u)(XCP_DTO_PACKET_LEN >> 8);
 80044b8:	f7ff ffac 	bl	8004414 <ComGetActiveInterfaceMaxTxLen>
  xcpInfo.ctoData[4] = (blt_int8u)(XCP_DTO_PACKET_LEN >> 8);
  xcpInfo.ctoData[5] = (blt_int8u)XCP_DTO_PACKET_LEN;
#endif

  /* report msb of protocol layer version number */
  xcpInfo.ctoData[6] = XCP_VERSION_PROTOCOL_LAYER >> 8;
 80044bc:	f240 1301 	movw	r3, #257	; 0x101
  xcpInfo.ctoData[5] = (blt_int8u)(XCP_DTO_PACKET_LEN >> 8);
 80044c0:	0a00      	lsrs	r0, r0, #8
  xcpInfo.ctoData[6] = XCP_VERSION_PROTOCOL_LAYER >> 8;
 80044c2:	80e3      	strh	r3, [r4, #6]

  /* report msb of transport layer version number */
  xcpInfo.ctoData[7] = XCP_VERSION_TRANSPORT_LAYER >> 8;

  /* set packet length */
  xcpInfo.ctoLen = 8;
 80044c4:	2308      	movs	r3, #8
  xcpInfo.ctoData[5] = (blt_int8u)(XCP_DTO_PACKET_LEN >> 8);
 80044c6:	7160      	strb	r0, [r4, #5]
  xcpInfo.ctoLen = 8;
 80044c8:	f8a4 3086 	strh.w	r3, [r4, #134]	; 0x86

  /* reinit the NVM driver because a new firmware update is about the start */
  NvmInit();
 80044cc:	f7ff f94e 	bl	800376c <NvmInit>
  if (xcpInfo.ctoPending == 1)
 80044d0:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d102      	bne.n	80044de <XcpPacketReceived+0x52>
    XcpSetCtoError(XCP_ERR_CMD_BUSY);
 80044d8:	2010      	movs	r0, #16
 80044da:	f7ff ffa9 	bl	8004430 <XcpSetCtoError>
  if (xcpInfo.ctoLen > 0)
 80044de:	f9b4 1086 	ldrsh.w	r1, [r4, #134]	; 0x86
 80044e2:	2900      	cmp	r1, #0
 80044e4:	f340 80e9 	ble.w	80046ba <XcpPacketReceived+0x22e>
    xcpInfo.ctoPending = 1;
 80044e8:	2301      	movs	r3, #1
  ComTransmitPacket(data, len);
 80044ea:	b289      	uxth	r1, r1
 80044ec:	4873      	ldr	r0, [pc, #460]	; (80046bc <XcpPacketReceived+0x230>)
    xcpInfo.ctoPending = 1;
 80044ee:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
} /*** end of XcpPacketReceived ***/
 80044f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  ComTransmitPacket(data, len);
 80044f6:	f7ff bf71 	b.w	80043dc <ComTransmitPacket>
  else if (xcpInfo.connected == 1)
 80044fa:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 80044fe:	2a01      	cmp	r2, #1
 8004500:	f040 80db 	bne.w	80046ba <XcpPacketReceived+0x22e>
    switch (data[0])
 8004504:	2bd2      	cmp	r3, #210	; 0xd2
 8004506:	d816      	bhi.n	8004536 <XcpPacketReceived+0xaa>
 8004508:	2bc8      	cmp	r3, #200	; 0xc8
 800450a:	d919      	bls.n	8004540 <XcpPacketReceived+0xb4>
 800450c:	3bc9      	subs	r3, #201	; 0xc9
 800450e:	2b09      	cmp	r3, #9
 8004510:	d816      	bhi.n	8004540 <XcpPacketReceived+0xb4>
 8004512:	e8df f003 	tbb	[pc, r3]
 8004516:	157f      	.short	0x157f
 8004518:	15158915 	.word	0x15158915
 800451c:	b8c396cf 	.word	0xb8c396cf
 8004520:	3bf3      	subs	r3, #243	; 0xf3
 8004522:	2b0b      	cmp	r3, #11
 8004524:	d80c      	bhi.n	8004540 <XcpPacketReceived+0xb4>
 8004526:	e8df f003 	tbb	[pc, r3]
 800452a:	283e      	.short	0x283e
 800452c:	0b0b350d 	.word	0x0b0b350d
 8004530:	610b590b 	.word	0x610b590b
 8004534:	6d63      	.short	0x6d63
 8004536:	f103 020d 	add.w	r2, r3, #13
 800453a:	b2d2      	uxtb	r2, r2
 800453c:	2a0b      	cmp	r2, #11
 800453e:	d9ef      	bls.n	8004520 <XcpPacketReceived+0x94>
        XcpSetCtoError(XCP_ERR_CMD_UNKNOWN);
 8004540:	2020      	movs	r0, #32
 8004542:	e005      	b.n	8004550 <XcpPacketReceived+0xc4>
{
  blt_int16u len;
  blt_int8u *destPtr;

  /* validate length of upload request */
  if (data[1] > (XCP_CTO_PACKET_LEN-1))
 8004544:	f7ff ff58 	bl	80043f8 <ComGetActiveInterfaceMaxRxLen>
 8004548:	786a      	ldrb	r2, [r5, #1]
 800454a:	4290      	cmp	r0, r2
 800454c:	d803      	bhi.n	8004556 <XcpPacketReceived+0xca>
  {
    /* requested data length is too long */
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 800454e:	2022      	movs	r0, #34	; 0x22
        XcpSetCtoError(XCP_ERR_CMD_UNKNOWN);
 8004550:	f7ff ff6e 	bl	8004430 <XcpSetCtoError>
        break;
 8004554:	e7bc      	b.n	80044d0 <XcpPacketReceived+0x44>
    /* copy the data from memory to the data packet */
    CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
  }
  #else
  /* copy the data from memory to the data packet */
  CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
 8004556:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    /* copy the data from memory to the data packet */
    CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
  }
  #else
  /* copy the data from memory to the data packet */
  CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
 800455a:	4859      	ldr	r0, [pc, #356]	; (80046c0 <XcpPacketReceived+0x234>)
 800455c:	f7fe ff6c 	bl	8003438 <CpuMemCopy>
  /* uploads are disabled, so return zero values for memory read operations */
  CpuMemSet((blt_addr)destPtr, 0, len);
#endif /* XCP_UPLOAD_EN == 1 */

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8004560:	23ff      	movs	r3, #255	; 0xff

  /* post increment the mta */
  xcpInfo.mta += data[1];
 8004562:	786a      	ldrb	r2, [r5, #1]
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8004564:	7023      	strb	r3, [r4, #0]
  xcpInfo.mta += data[1];
 8004566:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800456a:	4413      	add	r3, r2
 800456c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88

  /* set packet length */
  xcpInfo.ctoLen = data[1]+1;
 8004570:	786b      	ldrb	r3, [r5, #1]
 8004572:	3301      	adds	r3, #1

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;

  /* set packet length */
  xcpInfo.ctoLen = 1;
 8004574:	f8a4 3086 	strh.w	r3, [r4, #134]	; 0x86
} /*** end of XcpCmdProgramReset ***/
 8004578:	e7aa      	b.n	80044d0 <XcpPacketReceived+0x44>
  if (data[1] > (XCP_CTO_PACKET_LEN-1))
 800457a:	f7ff ff3d 	bl	80043f8 <ComGetActiveInterfaceMaxRxLen>
 800457e:	786b      	ldrb	r3, [r5, #1]
 8004580:	4283      	cmp	r3, r0
 8004582:	d2e4      	bcs.n	800454e <XcpPacketReceived+0xc2>
  xcpInfo.mta = XcpGetOrderedLong(&data[4]);
 8004584:	1d28      	adds	r0, r5, #4
 8004586:	f7ff ff5d 	bl	8004444 <XcpGetOrderedLong>
 800458a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 800458e:	4601      	mov	r1, r0
  CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
 8004590:	786a      	ldrb	r2, [r5, #1]
 8004592:	e7e2      	b.n	800455a <XcpPacketReceived+0xce>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8004594:	23ff      	movs	r3, #255	; 0xff
  xcpInfo.mta = XcpGetOrderedLong(&data[4]);
 8004596:	1d28      	adds	r0, r5, #4
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8004598:	7023      	strb	r3, [r4, #0]
  xcpInfo.mta = XcpGetOrderedLong(&data[4]);
 800459a:	f7ff ff53 	bl	8004444 <XcpGetOrderedLong>
 800459e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
  xcpInfo.ctoLen = 1;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e7e6      	b.n	8004574 <XcpPacketReceived+0xe8>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80045a6:	23ff      	movs	r3, #255	; 0xff
  checksumLen = XcpGetOrderedLong(&data[4]);
 80045a8:	1d28      	adds	r0, r5, #4
  blt_int8u cs = 0;
 80045aa:	2500      	movs	r5, #0
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80045ac:	7023      	strb	r3, [r4, #0]
  checksumLen = XcpGetOrderedLong(&data[4]);
 80045ae:	f7ff ff49 	bl	8004444 <XcpGetOrderedLong>
  checksumType = XcpComputeChecksum(xcpInfo.mta, checksumLen, &checksumVal);
 80045b2:	f8d4 6088 	ldr.w	r6, [r4, #136]	; 0x88
static blt_int8u XcpComputeChecksum(blt_int32u address, blt_int32u length,
 80045b6:	1987      	adds	r7, r0, r6
  while (length-- > 0)
 80045b8:	42be      	cmp	r6, r7
 80045ba:	d108      	bne.n	80045ce <XcpPacketReceived+0x142>
  data[1] = (blt_int8u)(value >>  8);
 80045bc:	2300      	movs	r3, #0
  xcpInfo.ctoData[1] = checksumType;
 80045be:	2201      	movs	r2, #1
  data[0] = (blt_int8u) value;
 80045c0:	7125      	strb	r5, [r4, #4]
  data[1] = (blt_int8u)(value >>  8);
 80045c2:	7163      	strb	r3, [r4, #5]
  data[2] = (blt_int8u)(value >> 16);
 80045c4:	80e3      	strh	r3, [r4, #6]
  xcpInfo.ctoData[1] = checksumType;
 80045c6:	7062      	strb	r2, [r4, #1]
  xcpInfo.ctoData[2] = 0;
 80045c8:	8063      	strh	r3, [r4, #2]
  xcpInfo.ctoLen = 8;
 80045ca:	2308      	movs	r3, #8
 80045cc:	e7d2      	b.n	8004574 <XcpPacketReceived+0xe8>
    cs += *((blt_int8u *)(blt_addr)address);
 80045ce:	f816 3b01 	ldrb.w	r3, [r6], #1
 80045d2:	441d      	add	r5, r3
 80045d4:	b2ed      	uxtb	r5, r5
    CopService();
 80045d6:	f7ff ff28 	bl	800442a <CopService>
 80045da:	e7ed      	b.n	80045b8 <XcpPacketReceived+0x12c>
  xcpInfo.mta = (blt_int32u)&xcpStationId[0];
 80045dc:	4b39      	ldr	r3, [pc, #228]	; (80046c4 <XcpPacketReceived+0x238>)
  data[0] = (blt_int8u) value;
 80045de:	22ff      	movs	r2, #255	; 0xff
  xcpInfo.mta = (blt_int32u)&xcpStationId[0];
 80045e0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  data[0] = (blt_int8u) value;
 80045e4:	2307      	movs	r3, #7
 80045e6:	e9c4 2300 	strd	r2, r3, [r4]
 80045ea:	e7ee      	b.n	80045ca <XcpPacketReceived+0x13e>
  XcpSetCtoError(XCP_ERR_CMD_SYNCH);
 80045ec:	2000      	movs	r0, #0
 80045ee:	e7af      	b.n	8004550 <XcpPacketReceived+0xc4>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80045f0:	23ff      	movs	r3, #255	; 0xff
 80045f2:	8023      	strh	r3, [r4, #0]
  xcpInfo.ctoData[2] = xcpInfo.protection;
 80045f4:	f894 3082 	ldrb.w	r3, [r4, #130]	; 0x82
 80045f8:	70a3      	strb	r3, [r4, #2]
  xcpInfo.ctoData[3] = 0;
 80045fa:	2300      	movs	r3, #0
 80045fc:	70e3      	strb	r3, [r4, #3]
  xcpInfo.ctoData[4] = 0;
 80045fe:	80a3      	strh	r3, [r4, #4]
  xcpInfo.ctoLen = 6;
 8004600:	2306      	movs	r3, #6
 8004602:	e7b7      	b.n	8004574 <XcpPacketReceived+0xe8>
  xcpInfo.connected = 0;
 8004604:	2300      	movs	r3, #0
 8004606:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  xcpInfo.protection = 0;
 800460a:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
  xcpInfo.ctoData[0] = XCP_PID_RES;
 800460e:	23ff      	movs	r3, #255	; 0xff
 8004610:	7023      	strb	r3, [r4, #0]
 8004612:	e7c6      	b.n	80045a2 <XcpPacketReceived+0x116>
  if (NvmWrite((blt_addr)xcpInfo.mta, XCP_CTO_PACKET_LEN-1, &data[1]) == BLT_FALSE)
 8004614:	f8d4 6088 	ldr.w	r6, [r4, #136]	; 0x88
 8004618:	f7ff feee 	bl	80043f8 <ComGetActiveInterfaceMaxRxLen>
 800461c:	1c6a      	adds	r2, r5, #1
 800461e:	1e41      	subs	r1, r0, #1
 8004620:	4630      	mov	r0, r6
 8004622:	f7ff f8a5 	bl	8003770 <NvmWrite>
 8004626:	b908      	cbnz	r0, 800462c <XcpPacketReceived+0x1a0>
    return;
  }
#endif

  /* programming with kernel currently not needed and therefore not supported */
  XcpSetCtoError(XCP_ERR_GENERIC);
 8004628:	2031      	movs	r0, #49	; 0x31
 800462a:	e791      	b.n	8004550 <XcpPacketReceived+0xc4>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 800462c:	23ff      	movs	r3, #255	; 0xff
 800462e:	7023      	strb	r3, [r4, #0]
  xcpInfo.mta += XCP_CTO_PACKET_LEN-1;
 8004630:	f7ff fee2 	bl	80043f8 <ComGetActiveInterfaceMaxRxLen>
 8004634:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8004638:	3801      	subs	r0, #1
 800463a:	4403      	add	r3, r0
 800463c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  xcpInfo.ctoLen = 1;
 8004640:	e7af      	b.n	80045a2 <XcpPacketReceived+0x116>
  if (data[1] > (XCP_CTO_PACKET_LEN-2))
 8004642:	f7ff fed9 	bl	80043f8 <ComGetActiveInterfaceMaxRxLen>
 8004646:	786b      	ldrb	r3, [r5, #1]
 8004648:	3801      	subs	r0, #1
 800464a:	4298      	cmp	r0, r3
 800464c:	f77f af7f 	ble.w	800454e <XcpPacketReceived+0xc2>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8004650:	23ff      	movs	r3, #255	; 0xff
 8004652:	7023      	strb	r3, [r4, #0]
  xcpInfo.ctoLen = 1;
 8004654:	2301      	movs	r3, #1
 8004656:	f8a4 3086 	strh.w	r3, [r4, #134]	; 0x86
  if (data[1] == 0)
 800465a:	7869      	ldrb	r1, [r5, #1]
 800465c:	b929      	cbnz	r1, 800466a <XcpPacketReceived+0x1de>
    if (NvmDone() == BLT_FALSE)
 800465e:	f7ff f88f 	bl	8003780 <NvmDone>
 8004662:	2800      	cmp	r0, #0
 8004664:	f47f af34 	bne.w	80044d0 <XcpPacketReceived+0x44>
 8004668:	e7de      	b.n	8004628 <XcpPacketReceived+0x19c>
  if (NvmWrite((blt_addr)xcpInfo.mta, data[1], &data[2]) == BLT_FALSE)
 800466a:	1caa      	adds	r2, r5, #2
 800466c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8004670:	f7ff f87e 	bl	8003770 <NvmWrite>
 8004674:	2800      	cmp	r0, #0
 8004676:	d0d7      	beq.n	8004628 <XcpPacketReceived+0x19c>
  xcpInfo.mta += data[1];
 8004678:	786a      	ldrb	r2, [r5, #1]
 800467a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800467e:	4413      	add	r3, r2
 8004680:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8004684:	e724      	b.n	80044d0 <XcpPacketReceived+0x44>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8004686:	23ff      	movs	r3, #255	; 0xff
  xcpInfo.ctoData[2] = 0;
 8004688:	2500      	movs	r5, #0
  xcpInfo.ctoData[0] = XCP_PID_RES;
 800468a:	8023      	strh	r3, [r4, #0]
  xcpInfo.ctoData[2] = 0;
 800468c:	70a5      	strb	r5, [r4, #2]
  xcpInfo.ctoData[3] = (blt_int8u)XCP_CTO_PACKET_LEN;
 800468e:	f7ff feb3 	bl	80043f8 <ComGetActiveInterfaceMaxRxLen>
  xcpInfo.ctoLen = 7;
 8004692:	2307      	movs	r3, #7
  xcpInfo.ctoData[3] = (blt_int8u)XCP_CTO_PACKET_LEN;
 8004694:	70e0      	strb	r0, [r4, #3]
  xcpInfo.ctoData[4] = 0;
 8004696:	80a5      	strh	r5, [r4, #4]
  xcpInfo.ctoData[6] = 0;
 8004698:	71a5      	strb	r5, [r4, #6]
  xcpInfo.ctoLen = 7;
 800469a:	e76b      	b.n	8004574 <XcpPacketReceived+0xe8>
  eraseAddr = xcpInfo.mta;
 800469c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
  eraseLen = XcpGetOrderedLong(&data[4]);
 80046a0:	3004      	adds	r0, #4
 80046a2:	f7ff fecf 	bl	8004444 <XcpGetOrderedLong>
 80046a6:	4601      	mov	r1, r0
  if (NvmErase(eraseAddr, eraseLen) == BLT_FALSE)
 80046a8:	4618      	mov	r0, r3
 80046aa:	f7ff f863 	bl	8003774 <NvmErase>
 80046ae:	2800      	cmp	r0, #0
 80046b0:	d1ad      	bne.n	800460e <XcpPacketReceived+0x182>
 80046b2:	e7b9      	b.n	8004628 <XcpPacketReceived+0x19c>
  CpuStartUserProgram();
 80046b4:	f7fe fe9e 	bl	80033f4 <CpuStartUserProgram>
 80046b8:	e7a9      	b.n	800460e <XcpPacketReceived+0x182>
} /*** end of XcpPacketReceived ***/
 80046ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046bc:	24004ac0 	.word	0x24004ac0
 80046c0:	24004ac1 	.word	0x24004ac1
 80046c4:	08005780 	.word	0x08005780

080046c8 <USBD_Bulk_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_Bulk_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_Bulk_CfgFSDesc);
 80046c8:	2320      	movs	r3, #32
 80046ca:	8003      	strh	r3, [r0, #0]
  return USBD_Bulk_CfgFSDesc;
}
 80046cc:	4800      	ldr	r0, [pc, #0]	; (80046d0 <USBD_Bulk_GetFSCfgDesc+0x8>)
 80046ce:	4770      	bx	lr
 80046d0:	2400004c 	.word	0x2400004c

080046d4 <USBD_Bulk_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_Bulk_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_Bulk_DeviceQualifierDesc);
 80046d4:	230a      	movs	r3, #10
 80046d6:	8003      	strh	r3, [r0, #0]
  return USBD_Bulk_DeviceQualifierDesc;
}
 80046d8:	4800      	ldr	r0, [pc, #0]	; (80046dc <USBD_Bulk_GetDeviceQualifierDescriptor+0x8>)
 80046da:	4770      	bx	lr
 80046dc:	2400006c 	.word	0x2400006c

080046e0 <USBD_Bulk_SOF>:
{
 80046e0:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED )
 80046e2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80046e6:	2b03      	cmp	r3, #3
 80046e8:	d101      	bne.n	80046ee <USBD_Bulk_SOF+0xe>
    UsbTransmitPipeBulkIN();
 80046ea:	f7ff f9ab 	bl	8003a44 <UsbTransmitPipeBulkIN>
}
 80046ee:	2000      	movs	r0, #0
 80046f0:	bd08      	pop	{r3, pc}

080046f2 <USBD_Bulk_DataIn>:
{
 80046f2:	b508      	push	{r3, lr}
  UsbTransmitPipeBulkIN();
 80046f4:	f7ff f9a6 	bl	8003a44 <UsbTransmitPipeBulkIN>
}
 80046f8:	2000      	movs	r0, #0
 80046fa:	bd08      	pop	{r3, pc}

080046fc <USBD_Bulk_DataOut>:
  UsbReceivePipeBulkOUT(epnum);
 80046fc:	4608      	mov	r0, r1
{
 80046fe:	b508      	push	{r3, lr}
  UsbReceivePipeBulkOUT(epnum);
 8004700:	f7ff f9e0 	bl	8003ac4 <UsbReceivePipeBulkOUT>
}
 8004704:	2000      	movs	r0, #0
 8004706:	bd08      	pop	{r3, pc}

08004708 <USBD_Bulk_DeInit>:
{
 8004708:	b510      	push	{r4, lr}
 800470a:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev, BULK_IN_EP);
 800470c:	2181      	movs	r1, #129	; 0x81
 800470e:	f000 f9c0 	bl	8004a92 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, BULK_OUT_EP);
 8004712:	2101      	movs	r1, #1
 8004714:	4620      	mov	r0, r4
 8004716:	f000 f9bc 	bl	8004a92 <USBD_LL_CloseEP>
}
 800471a:	2000      	movs	r0, #0
 800471c:	bd10      	pop	{r4, pc}
	...

08004720 <USBD_Bulk_Init>:
{
 8004720:	b510      	push	{r4, lr}
 8004722:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev,
 8004724:	2340      	movs	r3, #64	; 0x40
 8004726:	2202      	movs	r2, #2
 8004728:	2181      	movs	r1, #129	; 0x81
 800472a:	f000 f9a6 	bl	8004a7a <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 800472e:	2340      	movs	r3, #64	; 0x40
 8004730:	2202      	movs	r2, #2
 8004732:	2101      	movs	r1, #1
 8004734:	4620      	mov	r0, r4
 8004736:	f000 f9a0 	bl	8004a7a <USBD_LL_OpenEP>
  USBD_LL_PrepareReceive(pdev,
 800473a:	2340      	movs	r3, #64	; 0x40
 800473c:	4a03      	ldr	r2, [pc, #12]	; (800474c <USBD_Bulk_Init+0x2c>)
 800473e:	2101      	movs	r1, #1
 8004740:	4620      	mov	r0, r4
 8004742:	f000 f9d3 	bl	8004aec <USBD_LL_PrepareReceive>
}
 8004746:	2000      	movs	r0, #0
 8004748:	bd10      	pop	{r4, pc}
 800474a:	bf00      	nop
 800474c:	24004b4c 	.word	0x24004b4c

08004750 <USBD_Bulk_Setup>:
{
 8004750:	b510      	push	{r4, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004752:	780a      	ldrb	r2, [r1, #0]
{
 8004754:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004756:	f012 0f60 	tst.w	r2, #96	; 0x60
 800475a:	d112      	bne.n	8004782 <USBD_Bulk_Setup+0x32>
    switch (req->bRequest)
 800475c:	784a      	ldrb	r2, [r1, #1]
 800475e:	2a0a      	cmp	r2, #10
 8004760:	d014      	beq.n	800478c <USBD_Bulk_Setup+0x3c>
 8004762:	2a0b      	cmp	r2, #11
 8004764:	d015      	beq.n	8004792 <USBD_Bulk_Setup+0x42>
 8004766:	2a06      	cmp	r2, #6
 8004768:	d10b      	bne.n	8004782 <USBD_Bulk_Setup+0x32>
      if ( (req->wValue >> 8) == BULK_DESCRIPTOR_TYPE)
 800476a:	884a      	ldrh	r2, [r1, #2]
 800476c:	0a12      	lsrs	r2, r2, #8
 800476e:	2a21      	cmp	r2, #33	; 0x21
 8004770:	d109      	bne.n	8004786 <USBD_Bulk_Setup+0x36>
        len = MIN(USB_BULK_DESC_SIZ , req->wLength);
 8004772:	88ca      	ldrh	r2, [r1, #6]
        pbuf = USBD_Bulk_CfgFSDesc + 9 + (9 * USBD_MAX_NUM_INTERFACES);
 8004774:	490b      	ldr	r1, [pc, #44]	; (80047a4 <USBD_Bulk_Setup+0x54>)
        len = MIN(USB_BULK_DESC_SIZ , req->wLength);
 8004776:	2a17      	cmp	r2, #23
 8004778:	bf28      	it	cs
 800477a:	2217      	movcs	r2, #23
      USBD_CtlSendData (pdev, pbuf, len);
 800477c:	4620      	mov	r0, r4
      USBD_CtlSendData (pdev,
 800477e:	f7ff fd6d 	bl	800425c <USBD_CtlSendData>
}
 8004782:	2000      	movs	r0, #0
 8004784:	bd10      	pop	{r4, pc}
  uint8_t  *pbuf=USBD_Bulk_CfgFSDesc + 9;
 8004786:	4908      	ldr	r1, [pc, #32]	; (80047a8 <USBD_Bulk_Setup+0x58>)
  uint16_t len=USB_BULK_DESC_SIZ;
 8004788:	2217      	movs	r2, #23
 800478a:	e7f7      	b.n	800477c <USBD_Bulk_Setup+0x2c>
      USBD_CtlSendData (pdev,
 800478c:	2201      	movs	r2, #1
 800478e:	4907      	ldr	r1, [pc, #28]	; (80047ac <USBD_Bulk_Setup+0x5c>)
 8004790:	e7f5      	b.n	800477e <USBD_Bulk_Setup+0x2e>
      if ((uint8_t)(req->wValue) < USBD_MAX_NUM_INTERFACES)
 8004792:	788b      	ldrb	r3, [r1, #2]
 8004794:	b913      	cbnz	r3, 800479c <USBD_Bulk_Setup+0x4c>
        usbd_bulk_AltSet = (uint8_t)(req->wValue);
 8004796:	4a05      	ldr	r2, [pc, #20]	; (80047ac <USBD_Bulk_Setup+0x5c>)
 8004798:	6013      	str	r3, [r2, #0]
 800479a:	e7f2      	b.n	8004782 <USBD_Bulk_Setup+0x32>
        USBD_CtlError (pdev, req);
 800479c:	f7ff fd37 	bl	800420e <USBD_CtlError>
 80047a0:	e7ef      	b.n	8004782 <USBD_Bulk_Setup+0x32>
 80047a2:	bf00      	nop
 80047a4:	2400005e 	.word	0x2400005e
 80047a8:	24000055 	.word	0x24000055
 80047ac:	24004b8c 	.word	0x24004b8c

080047b0 <USBD_Bulk_GetRxBufferPtr>:
  * @retval Pointer to reception buffer.
  */
uint8_t * USBD_Bulk_GetRxBufferPtr(void)
{
  return &USB_Rx_Buffer[0];
}
 80047b0:	4800      	ldr	r0, [pc, #0]	; (80047b4 <USBD_Bulk_GetRxBufferPtr+0x4>)
 80047b2:	4770      	bx	lr
 80047b4:	24004b4c 	.word	0x24004b4c

080047b8 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80047b8:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 80047ba:	4801      	ldr	r0, [pc, #4]	; (80047c0 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 80047bc:	800b      	strh	r3, [r1, #0]
}
 80047be:	4770      	bx	lr
 80047c0:	24000094 	.word	0x24000094

080047c4 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80047c4:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 80047c6:	4801      	ldr	r0, [pc, #4]	; (80047cc <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 80047c8:	800b      	strh	r3, [r1, #0]
}
 80047ca:	4770      	bx	lr
 80047cc:	240000a8 	.word	0x240000a8

080047d0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80047d0:	2300      	movs	r3, #0
 80047d2:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 80047d4:	1c4d      	adds	r5, r1, #1
 80047d6:	461e      	mov	r6, r3
      pbuf[2 * idx] = (value >> 28) + '0';
 80047d8:	0f04      	lsrs	r4, r0, #28
    if (((value >> 28)) < 0xA)
 80047da:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
    value = value << 4;
 80047de:	ea4f 1000 	mov.w	r0, r0, lsl #4
      pbuf[2 * idx] = (value >> 28) + '0';
 80047e2:	bf34      	ite	cc
 80047e4:	3430      	addcc	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80047e6:	3437      	addcs	r4, #55	; 0x37
 80047e8:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 80047ec:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
  for (idx = 0; idx < len; idx++)
 80047f0:	3301      	adds	r3, #1
 80047f2:	b2dc      	uxtb	r4, r3
 80047f4:	42a2      	cmp	r2, r4
 80047f6:	d8ef      	bhi.n	80047d8 <IntToUnicode+0x8>
  }
}
 80047f8:	bd70      	pop	{r4, r5, r6, pc}
	...

080047fc <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 80047fc:	231a      	movs	r3, #26
{
 80047fe:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8004800:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8004802:	4b0a      	ldr	r3, [pc, #40]	; (800482c <USBD_FS_SerialStrDescriptor+0x30>)
 8004804:	f8d3 0800 	ldr.w	r0, [r3, #2048]	; 0x800
  deviceserial0 += deviceserial2;
 8004808:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
  if (deviceserial0 != 0)
 800480c:	1880      	adds	r0, r0, r2
 800480e:	d00a      	beq.n	8004826 <USBD_FS_SerialStrDescriptor+0x2a>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8004810:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8004814:	2208      	movs	r2, #8
 8004816:	4906      	ldr	r1, [pc, #24]	; (8004830 <USBD_FS_SerialStrDescriptor+0x34>)
 8004818:	f7ff ffda 	bl	80047d0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800481c:	2204      	movs	r2, #4
 800481e:	3110      	adds	r1, #16
 8004820:	4620      	mov	r0, r4
 8004822:	f7ff ffd5 	bl	80047d0 <IntToUnicode>
}
 8004826:	4803      	ldr	r0, [pc, #12]	; (8004834 <USBD_FS_SerialStrDescriptor+0x38>)
 8004828:	bd10      	pop	{r4, pc}
 800482a:	bf00      	nop
 800482c:	08fff000 	.word	0x08fff000
 8004830:	240000ae 	.word	0x240000ae
 8004834:	240000ac 	.word	0x240000ac

08004838 <USBD_FS_ManufacturerStrDescriptor>:
{
 8004838:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800483a:	4c04      	ldr	r4, [pc, #16]	; (800484c <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 800483c:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800483e:	4804      	ldr	r0, [pc, #16]	; (8004850 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8004840:	4621      	mov	r1, r4
 8004842:	f7ff fcef 	bl	8004224 <USBD_GetString>
}
 8004846:	4620      	mov	r0, r4
 8004848:	bd10      	pop	{r4, pc}
 800484a:	bf00      	nop
 800484c:	24004b90 	.word	0x24004b90
 8004850:	08005788 	.word	0x08005788

08004854 <USBD_FS_ProductStrDescriptor>:
{
 8004854:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004856:	4c04      	ldr	r4, [pc, #16]	; (8004868 <USBD_FS_ProductStrDescriptor+0x14>)
{
 8004858:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800485a:	4804      	ldr	r0, [pc, #16]	; (800486c <USBD_FS_ProductStrDescriptor+0x18>)
 800485c:	4621      	mov	r1, r4
 800485e:	f7ff fce1 	bl	8004224 <USBD_GetString>
}
 8004862:	4620      	mov	r0, r4
 8004864:	bd10      	pop	{r4, pc}
 8004866:	bf00      	nop
 8004868:	24004b90 	.word	0x24004b90
 800486c:	08005795 	.word	0x08005795

08004870 <USBD_FS_ConfigStrDescriptor>:
{
 8004870:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004872:	4c04      	ldr	r4, [pc, #16]	; (8004884 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 8004874:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004876:	4804      	ldr	r0, [pc, #16]	; (8004888 <USBD_FS_ConfigStrDescriptor+0x18>)
 8004878:	4621      	mov	r1, r4
 800487a:	f7ff fcd3 	bl	8004224 <USBD_GetString>
}
 800487e:	4620      	mov	r0, r4
 8004880:	bd10      	pop	{r4, pc}
 8004882:	bf00      	nop
 8004884:	24004b90 	.word	0x24004b90
 8004888:	080057a8 	.word	0x080057a8

0800488c <USBD_FS_InterfaceStrDescriptor>:
{
 800488c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800488e:	4c04      	ldr	r4, [pc, #16]	; (80048a0 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 8004890:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004892:	4804      	ldr	r0, [pc, #16]	; (80048a4 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8004894:	4621      	mov	r1, r4
 8004896:	f7ff fcc5 	bl	8004224 <USBD_GetString>
}
 800489a:	4620      	mov	r0, r4
 800489c:	bd10      	pop	{r4, pc}
 800489e:	bf00      	nop
 80048a0:	24004b90 	.word	0x24004b90
 80048a4:	080057b0 	.word	0x080057b0

080048a8 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80048a8:	f200 41c4 	addw	r1, r0, #1220	; 0x4c4
 80048ac:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 80048b0:	f7ff b98d 	b.w	8003bce <USBD_LL_SetupStage>

080048b4 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80048b4:	2324      	movs	r3, #36	; 0x24
 80048b6:	fb03 0301 	mla	r3, r3, r1, r0
 80048ba:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 80048be:	f8d3 228c 	ldr.w	r2, [r3, #652]	; 0x28c
 80048c2:	f7ff b9b4 	b.w	8003c2e <USBD_LL_DataOutStage>

080048c6 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80048c6:	2324      	movs	r3, #36	; 0x24
 80048c8:	fb03 0301 	mla	r3, r3, r1, r0
 80048cc:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 80048d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80048d2:	f7ff b9de 	b.w	8003c92 <USBD_LL_DataInStage>

080048d6 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80048d6:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 80048da:	f7ff ba66 	b.w	8003daa <USBD_LL_SOF>
	...

080048e0 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80048e0:	68c1      	ldr	r1, [r0, #12]
{ 
 80048e2:	b510      	push	{r4, lr}
 80048e4:	4604      	mov	r4, r0
  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80048e6:	b131      	cbz	r1, 80048f6 <HAL_PCD_ResetCallback+0x16>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80048e8:	2902      	cmp	r1, #2
 80048ea:	d003      	beq.n	80048f4 <HAL_PCD_ResetCallback+0x14>
  {
    speed = USBD_SPEED_FULL;
  }
  else
  {
    ASSERT_RT(BLT_FALSE);
 80048ec:	2191      	movs	r1, #145	; 0x91
 80048ee:	4807      	ldr	r0, [pc, #28]	; (800490c <HAL_PCD_ResetCallback+0x2c>)
 80048f0:	f7ff fce7 	bl	80042c2 <AssertFailure>
    speed = USBD_SPEED_FULL;
 80048f4:	2101      	movs	r1, #1
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80048f6:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
 80048fa:	f7ff fa40 	bl	8003d7e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80048fe:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
}
 8004902:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004906:	f7ff ba12 	b.w	8003d2e <USBD_LL_Reset>
 800490a:	bf00      	nop
 800490c:	080057c6 	.word	0x080057c6

08004910 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004910:	b510      	push	{r4, lr}
 8004912:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8004914:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 8004918:	f7ff fa34 	bl	8003d84 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800491c:	6822      	ldr	r2, [r4, #0]
 800491e:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8004922:	f043 0301 	orr.w	r3, r3, #1
 8004926:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800492a:	6a23      	ldr	r3, [r4, #32]
 800492c:	b123      	cbz	r3, 8004938 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800492e:	4a04      	ldr	r2, [pc, #16]	; (8004940 <HAL_PCD_SuspendCallback+0x30>)
 8004930:	6913      	ldr	r3, [r2, #16]
 8004932:	f043 0306 	orr.w	r3, r3, #6
 8004936:	6113      	str	r3, [r2, #16]
  }
  /* Inform application that the USB entered low power mode. */
  UsbEnterLowPowerModeHook();
  /* USER CODE END 2 */
}
 8004938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  UsbEnterLowPowerModeHook();
 800493c:	f7fb bcee 	b.w	800031c <UsbEnterLowPowerModeHook>
 8004940:	e000ed00 	.word	0xe000ed00

08004944 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004944:	b510      	push	{r4, lr}
 8004946:	4604      	mov	r4, r0
  /* USER CODE BEGIN 3 */
  /* Inform application that the USB left low power mode. */
  UsbLeaveLowPowerModeHook();
 8004948:	f7fb fce9 	bl	800031e <UsbLeaveLowPowerModeHook>
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800494c:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
}
 8004950:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8004954:	f7ff ba1f 	b.w	8003d96 <USBD_LL_Resume>

08004958 <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8004958:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 800495c:	f7ff ba33 	b.w	8003dc6 <USBD_LL_IsoOUTIncomplete>

08004960 <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8004960:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 8004964:	f7ff ba2d 	b.w	8003dc2 <USBD_LL_IsoINIncomplete>

08004968 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004968:	b510      	push	{r4, lr}
 800496a:	4604      	mov	r4, r0
  /* Configure Low connection state. */
  UsbConnectHook(BLT_TRUE);
 800496c:	2001      	movs	r0, #1
 800496e:	f7fb fcd4 	bl	800031a <UsbConnectHook>
  /* Inform lower layer. */
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8004972:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
}
 8004976:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800497a:	f7ff ba26 	b.w	8003dca <USBD_LL_DevConnected>

0800497e <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800497e:	b510      	push	{r4, lr}
 8004980:	4604      	mov	r4, r0
  /* Configure High connection state. */
  UsbConnectHook(BLT_FALSE);
 8004982:	2000      	movs	r0, #0
 8004984:	f7fb fcc9 	bl	800031a <UsbConnectHook>
  /* Inform lower layer. */
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8004988:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
}
 800498c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8004990:	f7ff ba1d 	b.w	8003dce <USBD_LL_DevDisconnected>

08004994 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8004994:	b508      	push	{r3, lr}
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8004996:	7802      	ldrb	r2, [r0, #0]
{
 8004998:	4603      	mov	r3, r0
  if (pdev->id == DEVICE_HS) {
 800499a:	2a01      	cmp	r2, #1
 800499c:	d12a      	bne.n	80049f4 <USBD_LL_Init+0x60>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800499e:	4816      	ldr	r0, [pc, #88]	; (80049f8 <USBD_LL_Init+0x64>)
  pdev->pData = &hpcd_USB_OTG_FS;
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_HS;
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80049a0:	f04f 0c02 	mov.w	ip, #2
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80049a4:	4915      	ldr	r1, [pc, #84]	; (80049fc <USBD_LL_Init+0x68>)
  hpcd_USB_OTG_FS.pData = pdev;
 80049a6:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80049aa:	f8c3 02c4 	str.w	r0, [r3, #708]	; 0x2c4
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80049ae:	2309      	movs	r3, #9
 80049b0:	e9c0 1300 	strd	r1, r3, [r0]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80049b4:	2300      	movs	r3, #0
  hpcd_USB_OTG_FS.Init.phy_itface = USB_OTG_ULPI_PHY;
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80049b6:	e9c0 2206 	strd	r2, r2, [r0, #24]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80049ba:	e9c0 c303 	strd	ip, r3, [r0, #12]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80049be:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80049c2:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80049c6:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80049c8:	f7fc fe44 	bl	8001654 <HAL_PCD_Init>
 80049cc:	b120      	cbz	r0, 80049d8 <USBD_LL_Init+0x44>
  {
    ASSERT_RT(BLT_FALSE);
 80049ce:	f44f 7193 	mov.w	r1, #294	; 0x126
 80049d2:	480b      	ldr	r0, [pc, #44]	; (8004a00 <USBD_LL_Init+0x6c>)
 80049d4:	f7ff fc75 	bl	80042c2 <AssertFailure>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80049d8:	2180      	movs	r1, #128	; 0x80
 80049da:	4807      	ldr	r0, [pc, #28]	; (80049f8 <USBD_LL_Init+0x64>)
 80049dc:	f7fd fc20 	bl	8002220 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80049e0:	2240      	movs	r2, #64	; 0x40
 80049e2:	2100      	movs	r1, #0
 80049e4:	4804      	ldr	r0, [pc, #16]	; (80049f8 <USBD_LL_Init+0x64>)
 80049e6:	f7fd fbfb 	bl	80021e0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80049ea:	2280      	movs	r2, #128	; 0x80
 80049ec:	2101      	movs	r1, #1
 80049ee:	4802      	ldr	r0, [pc, #8]	; (80049f8 <USBD_LL_Init+0x64>)
 80049f0:	f7fd fbf6 	bl	80021e0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
}
 80049f4:	2000      	movs	r0, #0
 80049f6:	bd08      	pop	{r3, pc}
 80049f8:	240000ec 	.word	0x240000ec
 80049fc:	40040000 	.word	0x40040000
 8004a00:	080057c6 	.word	0x080057c6

08004a04 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8004a04:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8004a08:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 8004a0c:	f04f 0224 	mov.w	r2, #36	; 0x24
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8004a10:	bf17      	itett	ne
 8004a12:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8004a16:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8004a1a:	fb02 3101 	mlane	r1, r2, r1, r3
 8004a1e:	f891 003e 	ldrbne.w	r0, [r1, #62]	; 0x3e
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8004a22:	bf08      	it	eq
 8004a24:	f891 027e 	ldrbeq.w	r0, [r1, #638]	; 0x27e
  }
}
 8004a28:	4770      	bx	lr

08004a2a <USBD_LL_GetRxDataSize>:
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8004a2a:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8004a2e:	f7fc bfca 	b.w	80019c6 <HAL_PCD_EP_GetRxCount>
	...

08004a34 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8004a34:	2803      	cmp	r0, #3
 8004a36:	bf9a      	itte	ls
 8004a38:	4b01      	ldrls	r3, [pc, #4]	; (8004a40 <USBD_Get_USB_Status+0xc>)
 8004a3a:	5c18      	ldrbls	r0, [r3, r0]
{
 8004a3c:	2003      	movhi	r0, #3
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8004a3e:	4770      	bx	lr
 8004a40:	080057e7 	.word	0x080057e7

08004a44 <USBD_LL_DeInit>:
{
 8004a44:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_DeInit(pdev->pData);
 8004a46:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8004a4a:	f7fc fe8c 	bl	8001766 <HAL_PCD_DeInit>
}
 8004a4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004a52:	f7ff bfef 	b.w	8004a34 <USBD_Get_USB_Status>

08004a56 <USBD_LL_Start>:
{
 8004a56:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8004a58:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8004a5c:	f7fc fe98 	bl	8001790 <HAL_PCD_Start>
}
 8004a60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8004a64:	f7ff bfe6 	b.w	8004a34 <USBD_Get_USB_Status>

08004a68 <USBD_LL_Stop>:
{
 8004a68:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Stop(pdev->pData);
 8004a6a:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8004a6e:	f7fc feae 	bl	80017ce <HAL_PCD_Stop>
}
 8004a72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004a76:	f7ff bfdd 	b.w	8004a34 <USBD_Get_USB_Status>

08004a7a <USBD_LL_OpenEP>:
{
 8004a7a:	b510      	push	{r4, lr}
 8004a7c:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8004a7e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8004a82:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8004a84:	4623      	mov	r3, r4
 8004a86:	f7fc ff13 	bl	80018b0 <HAL_PCD_EP_Open>
}
 8004a8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004a8e:	f7ff bfd1 	b.w	8004a34 <USBD_Get_USB_Status>

08004a92 <USBD_LL_CloseEP>:
{
 8004a92:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8004a94:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8004a98:	f7fc ff42 	bl	8001920 <HAL_PCD_EP_Close>
}
 8004a9c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8004aa0:	f7ff bfc8 	b.w	8004a34 <USBD_Get_USB_Status>

08004aa4 <USBD_LL_StallEP>:
{
 8004aa4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004aa6:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8004aaa:	f7fc ffb4 	bl	8001a16 <HAL_PCD_EP_SetStall>
}
 8004aae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004ab2:	f7ff bfbf 	b.w	8004a34 <USBD_Get_USB_Status>

08004ab6 <USBD_LL_ClearStallEP>:
{
 8004ab6:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8004ab8:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8004abc:	f7fc ffe3 	bl	8001a86 <HAL_PCD_EP_ClrStall>
}
 8004ac0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8004ac4:	f7ff bfb6 	b.w	8004a34 <USBD_Get_USB_Status>

08004ac8 <USBD_LL_SetUSBAddress>:
{
 8004ac8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8004aca:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8004ace:	f7fc fedb 	bl	8001888 <HAL_PCD_SetAddress>
}
 8004ad2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004ad6:	f7ff bfad 	b.w	8004a34 <USBD_Get_USB_Status>

08004ada <USBD_LL_Transmit>:
{
 8004ada:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8004adc:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8004ae0:	f7fc ff79 	bl	80019d6 <HAL_PCD_EP_Transmit>
}
 8004ae4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8004ae8:	f7ff bfa4 	b.w	8004a34 <USBD_Get_USB_Status>

08004aec <USBD_LL_PrepareReceive>:
{
 8004aec:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8004aee:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8004af2:	f7fc ff44 	bl	800197e <HAL_PCD_EP_Receive>
}
 8004af6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8004afa:	f7ff bf9b 	b.w	8004a34 <USBD_Get_USB_Status>
	...

08004b00 <__libc_init_array>:
 8004b00:	b570      	push	{r4, r5, r6, lr}
 8004b02:	4d0d      	ldr	r5, [pc, #52]	; (8004b38 <__libc_init_array+0x38>)
 8004b04:	4c0d      	ldr	r4, [pc, #52]	; (8004b3c <__libc_init_array+0x3c>)
 8004b06:	1b64      	subs	r4, r4, r5
 8004b08:	10a4      	asrs	r4, r4, #2
 8004b0a:	2600      	movs	r6, #0
 8004b0c:	42a6      	cmp	r6, r4
 8004b0e:	d109      	bne.n	8004b24 <__libc_init_array+0x24>
 8004b10:	4d0b      	ldr	r5, [pc, #44]	; (8004b40 <__libc_init_array+0x40>)
 8004b12:	4c0c      	ldr	r4, [pc, #48]	; (8004b44 <__libc_init_array+0x44>)
 8004b14:	f000 f820 	bl	8004b58 <_init>
 8004b18:	1b64      	subs	r4, r4, r5
 8004b1a:	10a4      	asrs	r4, r4, #2
 8004b1c:	2600      	movs	r6, #0
 8004b1e:	42a6      	cmp	r6, r4
 8004b20:	d105      	bne.n	8004b2e <__libc_init_array+0x2e>
 8004b22:	bd70      	pop	{r4, r5, r6, pc}
 8004b24:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b28:	4798      	blx	r3
 8004b2a:	3601      	adds	r6, #1
 8004b2c:	e7ee      	b.n	8004b0c <__libc_init_array+0xc>
 8004b2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b32:	4798      	blx	r3
 8004b34:	3601      	adds	r6, #1
 8004b36:	e7f2      	b.n	8004b1e <__libc_init_array+0x1e>
 8004b38:	080057ec 	.word	0x080057ec
 8004b3c:	080057ec 	.word	0x080057ec
 8004b40:	080057ec 	.word	0x080057ec
 8004b44:	080057f0 	.word	0x080057f0

08004b48 <memset>:
 8004b48:	4402      	add	r2, r0
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d100      	bne.n	8004b52 <memset+0xa>
 8004b50:	4770      	bx	lr
 8004b52:	f803 1b01 	strb.w	r1, [r3], #1
 8004b56:	e7f9      	b.n	8004b4c <memset+0x4>

08004b58 <_init>:
 8004b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b5a:	bf00      	nop
 8004b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b5e:	bc08      	pop	{r3}
 8004b60:	469e      	mov	lr, r3
 8004b62:	4770      	bx	lr

08004b64 <_fini>:
 8004b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b66:	bf00      	nop
 8004b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b6a:	bc08      	pop	{r3}
 8004b6c:	469e      	mov	lr, r3
 8004b6e:	4770      	bx	lr
